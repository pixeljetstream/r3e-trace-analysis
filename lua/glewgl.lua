local ffi = require 'ffi'
ffi.cdef [[
typedef unsigned int GLenum;
typedef unsigned int GLbitfield;
typedef unsigned int GLuint;
typedef int GLint;
typedef int GLsizei;
typedef unsigned char GLboolean;
typedef signed char GLbyte;
typedef short GLshort;
typedef unsigned char GLubyte;
typedef unsigned short GLushort;
typedef unsigned long GLulong;
typedef float GLfloat;
typedef float GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void GLvoid;
typedef __int64 GLint64EXT;
typedef unsigned __int64 GLuint64EXT;
typedef GLint64EXT  GLint64;
typedef GLuint64EXT GLuint64;
typedef struct __GLsync *GLsync;
typedef char GLchar;
typedef ptrdiff_t GLintptr;
typedef ptrdiff_t GLsizeiptr;
typedef int GLfixed;
typedef struct _cl_context *cl_context;
typedef struct _cl_event *cl_event;
typedef char GLcharARB;
typedef unsigned int GLhandleARB;
typedef ptrdiff_t GLintptrARB;
typedef ptrdiff_t GLsizeiptrARB;
typedef unsigned short GLhalf;
typedef GLintptr GLvdpauSurfaceNV;
typedef int GLclampx;
typedef void ( *GLDEBUGPROCARB)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* message, const void* userParam);
typedef void ( *GLDEBUGPROCAMD)(GLuint id, GLenum category, GLenum severity, GLsizei length, const GLchar* message, void* userParam);
typedef void ( *GLLOGPROCREGAL)(GLenum stream, GLsizei length, const GLchar *message, void *context);
typedef void ( *GLDEBUGPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* message, const void* userParam);

enum {
GL_ZERO = 0,
GL_FALSE = 0,
GL_LOGIC_OP = 0x0BF1,
GL_NONE = 0,
GL_TEXTURE_COMPONENTS = 0x1003,
GL_NO_ERROR = 0,
GL_POINTS = 0x0000,
GL_CURRENT_BIT = 0x00000001,
GL_TRUE = 1,
GL_ONE = 1,
GL_CLIENT_PIXEL_STORE_BIT = 0x00000001,
GL_LINES = 0x0001,
GL_LINE_LOOP = 0x0002,
GL_POINT_BIT = 0x00000002,
GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002,
GL_LINE_STRIP = 0x0003,
GL_LINE_BIT = 0x00000004,
GL_TRIANGLES = 0x0004,
GL_TRIANGLE_STRIP = 0x0005,
GL_TRIANGLE_FAN = 0x0006,
GL_QUADS = 0x0007,
GL_QUAD_STRIP = 0x0008,
GL_POLYGON_BIT = 0x00000008,
GL_POLYGON = 0x0009,
GL_POLYGON_STIPPLE_BIT = 0x00000010,
GL_PIXEL_MODE_BIT = 0x00000020,
GL_LIGHTING_BIT = 0x00000040,
GL_FOG_BIT = 0x00000080,
GL_DEPTH_BUFFER_BIT = 0x00000100,
GL_ACCUM = 0x0100,
GL_LOAD = 0x0101,
GL_RETURN = 0x0102,
GL_MULT = 0x0103,
GL_ADD = 0x0104,
GL_NEVER = 0x0200,
GL_ACCUM_BUFFER_BIT = 0x00000200,
GL_LESS = 0x0201,
GL_EQUAL = 0x0202,
GL_LEQUAL = 0x0203,
GL_GREATER = 0x0204,
GL_NOTEQUAL = 0x0205,
GL_GEQUAL = 0x0206,
GL_ALWAYS = 0x0207,
GL_SRC_COLOR = 0x0300,
GL_ONE_MINUS_SRC_COLOR = 0x0301,
GL_SRC_ALPHA = 0x0302,
GL_ONE_MINUS_SRC_ALPHA = 0x0303,
GL_DST_ALPHA = 0x0304,
GL_ONE_MINUS_DST_ALPHA = 0x0305,
GL_DST_COLOR = 0x0306,
GL_ONE_MINUS_DST_COLOR = 0x0307,
GL_SRC_ALPHA_SATURATE = 0x0308,
GL_STENCIL_BUFFER_BIT = 0x00000400,
GL_FRONT_LEFT = 0x0400,
GL_FRONT_RIGHT = 0x0401,
GL_BACK_LEFT = 0x0402,
GL_BACK_RIGHT = 0x0403,
GL_FRONT = 0x0404,
GL_BACK = 0x0405,
GL_LEFT = 0x0406,
GL_RIGHT = 0x0407,
GL_FRONT_AND_BACK = 0x0408,
GL_AUX0 = 0x0409,
GL_AUX1 = 0x040A,
GL_AUX2 = 0x040B,
GL_AUX3 = 0x040C,
GL_INVALID_ENUM = 0x0500,
GL_INVALID_VALUE = 0x0501,
GL_INVALID_OPERATION = 0x0502,
GL_STACK_OVERFLOW = 0x0503,
GL_STACK_UNDERFLOW = 0x0504,
GL_OUT_OF_MEMORY = 0x0505,
GL_2D = 0x0600,
GL_3D = 0x0601,
GL_3D_COLOR = 0x0602,
GL_3D_COLOR_TEXTURE = 0x0603,
GL_4D_COLOR_TEXTURE = 0x0604,
GL_PASS_THROUGH_TOKEN = 0x0700,
GL_POINT_TOKEN = 0x0701,
GL_LINE_TOKEN = 0x0702,
GL_POLYGON_TOKEN = 0x0703,
GL_BITMAP_TOKEN = 0x0704,
GL_DRAW_PIXEL_TOKEN = 0x0705,
GL_COPY_PIXEL_TOKEN = 0x0706,
GL_LINE_RESET_TOKEN = 0x0707,
GL_EXP = 0x0800,
GL_VIEWPORT_BIT = 0x00000800,
GL_EXP2 = 0x0801,
GL_CW = 0x0900,
GL_CCW = 0x0901,
GL_COEFF = 0x0A00,
GL_ORDER = 0x0A01,
GL_DOMAIN = 0x0A02,
GL_CURRENT_COLOR = 0x0B00,
GL_CURRENT_INDEX = 0x0B01,
GL_CURRENT_NORMAL = 0x0B02,
GL_CURRENT_TEXTURE_COORDS = 0x0B03,
GL_CURRENT_RASTER_COLOR = 0x0B04,
GL_CURRENT_RASTER_INDEX = 0x0B05,
GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06,
GL_CURRENT_RASTER_POSITION = 0x0B07,
GL_CURRENT_RASTER_POSITION_VALID = 0x0B08,
GL_CURRENT_RASTER_DISTANCE = 0x0B09,
GL_POINT_SMOOTH = 0x0B10,
GL_POINT_SIZE = 0x0B11,
GL_POINT_SIZE_RANGE = 0x0B12,
GL_POINT_SIZE_GRANULARITY = 0x0B13,
GL_LINE_SMOOTH = 0x0B20,
GL_LINE_WIDTH = 0x0B21,
GL_LINE_WIDTH_RANGE = 0x0B22,
GL_LINE_WIDTH_GRANULARITY = 0x0B23,
GL_LINE_STIPPLE = 0x0B24,
GL_LINE_STIPPLE_PATTERN = 0x0B25,
GL_LINE_STIPPLE_REPEAT = 0x0B26,
GL_LIST_MODE = 0x0B30,
GL_MAX_LIST_NESTING = 0x0B31,
GL_LIST_BASE = 0x0B32,
GL_LIST_INDEX = 0x0B33,
GL_POLYGON_MODE = 0x0B40,
GL_POLYGON_SMOOTH = 0x0B41,
GL_POLYGON_STIPPLE = 0x0B42,
GL_EDGE_FLAG = 0x0B43,
GL_CULL_FACE = 0x0B44,
GL_CULL_FACE_MODE = 0x0B45,
GL_FRONT_FACE = 0x0B46,
GL_LIGHTING = 0x0B50,
GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51,
GL_LIGHT_MODEL_TWO_SIDE = 0x0B52,
GL_LIGHT_MODEL_AMBIENT = 0x0B53,
GL_SHADE_MODEL = 0x0B54,
GL_COLOR_MATERIAL_FACE = 0x0B55,
GL_COLOR_MATERIAL_PARAMETER = 0x0B56,
GL_COLOR_MATERIAL = 0x0B57,
GL_FOG = 0x0B60,
GL_FOG_INDEX = 0x0B61,
GL_FOG_DENSITY = 0x0B62,
GL_FOG_START = 0x0B63,
GL_FOG_END = 0x0B64,
GL_FOG_MODE = 0x0B65,
GL_FOG_COLOR = 0x0B66,
GL_DEPTH_RANGE = 0x0B70,
GL_DEPTH_TEST = 0x0B71,
GL_DEPTH_WRITEMASK = 0x0B72,
GL_DEPTH_CLEAR_VALUE = 0x0B73,
GL_DEPTH_FUNC = 0x0B74,
GL_ACCUM_CLEAR_VALUE = 0x0B80,
GL_STENCIL_TEST = 0x0B90,
GL_STENCIL_CLEAR_VALUE = 0x0B91,
GL_STENCIL_FUNC = 0x0B92,
GL_STENCIL_VALUE_MASK = 0x0B93,
GL_STENCIL_FAIL = 0x0B94,
GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95,
GL_STENCIL_PASS_DEPTH_PASS = 0x0B96,
GL_STENCIL_REF = 0x0B97,
GL_STENCIL_WRITEMASK = 0x0B98,
GL_MATRIX_MODE = 0x0BA0,
GL_NORMALIZE = 0x0BA1,
GL_VIEWPORT = 0x0BA2,
GL_MODELVIEW_STACK_DEPTH = 0x0BA3,
GL_PROJECTION_STACK_DEPTH = 0x0BA4,
GL_TEXTURE_STACK_DEPTH = 0x0BA5,
GL_MODELVIEW_MATRIX = 0x0BA6,
GL_PROJECTION_MATRIX = 0x0BA7,
GL_TEXTURE_MATRIX = 0x0BA8,
GL_ATTRIB_STACK_DEPTH = 0x0BB0,
GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1,
GL_ALPHA_TEST = 0x0BC0,
GL_ALPHA_TEST_FUNC = 0x0BC1,
GL_ALPHA_TEST_REF = 0x0BC2,
GL_DITHER = 0x0BD0,
GL_BLEND_DST = 0x0BE0,
GL_BLEND_SRC = 0x0BE1,
GL_BLEND = 0x0BE2,
GL_LOGIC_OP_MODE = 0x0BF0,
GL_INDEX_LOGIC_OP = 0x0BF1,
GL_COLOR_LOGIC_OP = 0x0BF2,
GL_AUX_BUFFERS = 0x0C00,
GL_DRAW_BUFFER = 0x0C01,
GL_READ_BUFFER = 0x0C02,
GL_SCISSOR_BOX = 0x0C10,
GL_SCISSOR_TEST = 0x0C11,
GL_INDEX_CLEAR_VALUE = 0x0C20,
GL_INDEX_WRITEMASK = 0x0C21,
GL_COLOR_CLEAR_VALUE = 0x0C22,
GL_COLOR_WRITEMASK = 0x0C23,
GL_INDEX_MODE = 0x0C30,
GL_RGBA_MODE = 0x0C31,
GL_DOUBLEBUFFER = 0x0C32,
GL_STEREO = 0x0C33,
GL_RENDER_MODE = 0x0C40,
GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50,
GL_POINT_SMOOTH_HINT = 0x0C51,
GL_LINE_SMOOTH_HINT = 0x0C52,
GL_POLYGON_SMOOTH_HINT = 0x0C53,
GL_FOG_HINT = 0x0C54,
GL_TEXTURE_GEN_S = 0x0C60,
GL_TEXTURE_GEN_T = 0x0C61,
GL_TEXTURE_GEN_R = 0x0C62,
GL_TEXTURE_GEN_Q = 0x0C63,
GL_PIXEL_MAP_I_TO_I = 0x0C70,
GL_PIXEL_MAP_S_TO_S = 0x0C71,
GL_PIXEL_MAP_I_TO_R = 0x0C72,
GL_PIXEL_MAP_I_TO_G = 0x0C73,
GL_PIXEL_MAP_I_TO_B = 0x0C74,
GL_PIXEL_MAP_I_TO_A = 0x0C75,
GL_PIXEL_MAP_R_TO_R = 0x0C76,
GL_PIXEL_MAP_G_TO_G = 0x0C77,
GL_PIXEL_MAP_B_TO_B = 0x0C78,
GL_PIXEL_MAP_A_TO_A = 0x0C79,
GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0,
GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1,
GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2,
GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3,
GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4,
GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5,
GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6,
GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7,
GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8,
GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9,
GL_UNPACK_SWAP_BYTES = 0x0CF0,
GL_UNPACK_LSB_FIRST = 0x0CF1,
GL_UNPACK_ROW_LENGTH = 0x0CF2,
GL_UNPACK_SKIP_ROWS = 0x0CF3,
GL_UNPACK_SKIP_PIXELS = 0x0CF4,
GL_UNPACK_ALIGNMENT = 0x0CF5,
GL_PACK_SWAP_BYTES = 0x0D00,
GL_PACK_LSB_FIRST = 0x0D01,
GL_PACK_ROW_LENGTH = 0x0D02,
GL_PACK_SKIP_ROWS = 0x0D03,
GL_PACK_SKIP_PIXELS = 0x0D04,
GL_PACK_ALIGNMENT = 0x0D05,
GL_MAP_COLOR = 0x0D10,
GL_MAP_STENCIL = 0x0D11,
GL_INDEX_SHIFT = 0x0D12,
GL_INDEX_OFFSET = 0x0D13,
GL_RED_SCALE = 0x0D14,
GL_RED_BIAS = 0x0D15,
GL_ZOOM_X = 0x0D16,
GL_ZOOM_Y = 0x0D17,
GL_GREEN_SCALE = 0x0D18,
GL_GREEN_BIAS = 0x0D19,
GL_BLUE_SCALE = 0x0D1A,
GL_BLUE_BIAS = 0x0D1B,
GL_ALPHA_SCALE = 0x0D1C,
GL_ALPHA_BIAS = 0x0D1D,
GL_DEPTH_SCALE = 0x0D1E,
GL_DEPTH_BIAS = 0x0D1F,
GL_MAX_EVAL_ORDER = 0x0D30,
GL_MAX_LIGHTS = 0x0D31,
GL_MAX_CLIP_PLANES = 0x0D32,
GL_MAX_TEXTURE_SIZE = 0x0D33,
GL_MAX_PIXEL_MAP_TABLE = 0x0D34,
GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35,
GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36,
GL_MAX_NAME_STACK_DEPTH = 0x0D37,
GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38,
GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39,
GL_MAX_VIEWPORT_DIMS = 0x0D3A,
GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B,
GL_SUBPIXEL_BITS = 0x0D50,
GL_INDEX_BITS = 0x0D51,
GL_RED_BITS = 0x0D52,
GL_GREEN_BITS = 0x0D53,
GL_BLUE_BITS = 0x0D54,
GL_ALPHA_BITS = 0x0D55,
GL_DEPTH_BITS = 0x0D56,
GL_STENCIL_BITS = 0x0D57,
GL_ACCUM_RED_BITS = 0x0D58,
GL_ACCUM_GREEN_BITS = 0x0D59,
GL_ACCUM_BLUE_BITS = 0x0D5A,
GL_ACCUM_ALPHA_BITS = 0x0D5B,
GL_NAME_STACK_DEPTH = 0x0D70,
GL_AUTO_NORMAL = 0x0D80,
GL_MAP1_COLOR_4 = 0x0D90,
GL_MAP1_INDEX = 0x0D91,
GL_MAP1_NORMAL = 0x0D92,
GL_MAP1_TEXTURE_COORD_1 = 0x0D93,
GL_MAP1_TEXTURE_COORD_2 = 0x0D94,
GL_MAP1_TEXTURE_COORD_3 = 0x0D95,
GL_MAP1_TEXTURE_COORD_4 = 0x0D96,
GL_MAP1_VERTEX_3 = 0x0D97,
GL_MAP1_VERTEX_4 = 0x0D98,
GL_MAP2_COLOR_4 = 0x0DB0,
GL_MAP2_INDEX = 0x0DB1,
GL_MAP2_NORMAL = 0x0DB2,
GL_MAP2_TEXTURE_COORD_1 = 0x0DB3,
GL_MAP2_TEXTURE_COORD_2 = 0x0DB4,
GL_MAP2_TEXTURE_COORD_3 = 0x0DB5,
GL_MAP2_TEXTURE_COORD_4 = 0x0DB6,
GL_MAP2_VERTEX_3 = 0x0DB7,
GL_MAP2_VERTEX_4 = 0x0DB8,
GL_MAP1_GRID_DOMAIN = 0x0DD0,
GL_MAP1_GRID_SEGMENTS = 0x0DD1,
GL_MAP2_GRID_DOMAIN = 0x0DD2,
GL_MAP2_GRID_SEGMENTS = 0x0DD3,
GL_TEXTURE_1D = 0x0DE0,
GL_TEXTURE_2D = 0x0DE1,
GL_FEEDBACK_BUFFER_POINTER = 0x0DF0,
GL_FEEDBACK_BUFFER_SIZE = 0x0DF1,
GL_FEEDBACK_BUFFER_TYPE = 0x0DF2,
GL_SELECTION_BUFFER_POINTER = 0x0DF3,
GL_SELECTION_BUFFER_SIZE = 0x0DF4,
GL_TEXTURE_WIDTH = 0x1000,
GL_TRANSFORM_BIT = 0x00001000,
GL_TEXTURE_HEIGHT = 0x1001,
GL_TEXTURE_INTERNAL_FORMAT = 0x1003,
GL_TEXTURE_BORDER_COLOR = 0x1004,
GL_TEXTURE_BORDER = 0x1005,
GL_DONT_CARE = 0x1100,
GL_FASTEST = 0x1101,
GL_NICEST = 0x1102,
GL_AMBIENT = 0x1200,
GL_DIFFUSE = 0x1201,
GL_SPECULAR = 0x1202,
GL_POSITION = 0x1203,
GL_SPOT_DIRECTION = 0x1204,
GL_SPOT_EXPONENT = 0x1205,
GL_SPOT_CUTOFF = 0x1206,
GL_CONSTANT_ATTENUATION = 0x1207,
GL_LINEAR_ATTENUATION = 0x1208,
GL_QUADRATIC_ATTENUATION = 0x1209,
GL_COMPILE = 0x1300,
GL_COMPILE_AND_EXECUTE = 0x1301,
GL_BYTE = 0x1400,
GL_UNSIGNED_BYTE = 0x1401,
GL_SHORT = 0x1402,
GL_UNSIGNED_SHORT = 0x1403,
GL_INT = 0x1404,
GL_UNSIGNED_INT = 0x1405,
GL_FLOAT = 0x1406,
GL_2_BYTES = 0x1407,
GL_3_BYTES = 0x1408,
GL_4_BYTES = 0x1409,
GL_DOUBLE = 0x140A,
GL_CLEAR = 0x1500,
GL_AND = 0x1501,
GL_AND_REVERSE = 0x1502,
GL_COPY = 0x1503,
GL_AND_INVERTED = 0x1504,
GL_NOOP = 0x1505,
GL_XOR = 0x1506,
GL_OR = 0x1507,
GL_NOR = 0x1508,
GL_EQUIV = 0x1509,
GL_INVERT = 0x150A,
GL_OR_REVERSE = 0x150B,
GL_COPY_INVERTED = 0x150C,
GL_OR_INVERTED = 0x150D,
GL_NAND = 0x150E,
GL_SET = 0x150F,
GL_EMISSION = 0x1600,
GL_SHININESS = 0x1601,
GL_AMBIENT_AND_DIFFUSE = 0x1602,
GL_COLOR_INDEXES = 0x1603,
GL_MODELVIEW = 0x1700,
GL_PROJECTION = 0x1701,
GL_TEXTURE = 0x1702,
GL_COLOR = 0x1800,
GL_DEPTH = 0x1801,
GL_STENCIL = 0x1802,
GL_COLOR_INDEX = 0x1900,
GL_STENCIL_INDEX = 0x1901,
GL_DEPTH_COMPONENT = 0x1902,
GL_RED = 0x1903,
GL_GREEN = 0x1904,
GL_BLUE = 0x1905,
GL_ALPHA = 0x1906,
GL_RGB = 0x1907,
GL_RGBA = 0x1908,
GL_LUMINANCE = 0x1909,
GL_LUMINANCE_ALPHA = 0x190A,
GL_BITMAP = 0x1A00,
GL_POINT = 0x1B00,
GL_LINE = 0x1B01,
GL_FILL = 0x1B02,
GL_RENDER = 0x1C00,
GL_FEEDBACK = 0x1C01,
GL_SELECT = 0x1C02,
GL_FLAT = 0x1D00,
GL_SMOOTH = 0x1D01,
GL_KEEP = 0x1E00,
GL_REPLACE = 0x1E01,
GL_INCR = 0x1E02,
GL_DECR = 0x1E03,
GL_VENDOR = 0x1F00,
GL_RENDERER = 0x1F01,
GL_VERSION = 0x1F02,
GL_EXTENSIONS = 0x1F03,
GL_S = 0x2000,
GL_ENABLE_BIT = 0x00002000,
GL_T = 0x2001,
GL_R = 0x2002,
GL_Q = 0x2003,
GL_MODULATE = 0x2100,
GL_DECAL = 0x2101,
GL_TEXTURE_ENV_MODE = 0x2200,
GL_TEXTURE_ENV_COLOR = 0x2201,
GL_TEXTURE_ENV = 0x2300,
GL_EYE_LINEAR = 0x2400,
GL_OBJECT_LINEAR = 0x2401,
GL_SPHERE_MAP = 0x2402,
GL_TEXTURE_GEN_MODE = 0x2500,
GL_OBJECT_PLANE = 0x2501,
GL_EYE_PLANE = 0x2502,
GL_NEAREST = 0x2600,
GL_LINEAR = 0x2601,
GL_NEAREST_MIPMAP_NEAREST = 0x2700,
GL_LINEAR_MIPMAP_NEAREST = 0x2701,
GL_NEAREST_MIPMAP_LINEAR = 0x2702,
GL_LINEAR_MIPMAP_LINEAR = 0x2703,
GL_TEXTURE_MAG_FILTER = 0x2800,
GL_TEXTURE_MIN_FILTER = 0x2801,
GL_TEXTURE_WRAP_S = 0x2802,
GL_TEXTURE_WRAP_T = 0x2803,
GL_CLAMP = 0x2900,
GL_REPEAT = 0x2901,
GL_POLYGON_OFFSET_UNITS = 0x2A00,
GL_POLYGON_OFFSET_POINT = 0x2A01,
GL_POLYGON_OFFSET_LINE = 0x2A02,
GL_R3_G3_B2 = 0x2A10,
GL_V2F = 0x2A20,
GL_V3F = 0x2A21,
GL_C4UB_V2F = 0x2A22,
GL_C4UB_V3F = 0x2A23,
GL_C3F_V3F = 0x2A24,
GL_N3F_V3F = 0x2A25,
GL_C4F_N3F_V3F = 0x2A26,
GL_T2F_V3F = 0x2A27,
GL_T4F_V4F = 0x2A28,
GL_T2F_C4UB_V3F = 0x2A29,
GL_T2F_C3F_V3F = 0x2A2A,
GL_T2F_N3F_V3F = 0x2A2B,
GL_T2F_C4F_N3F_V3F = 0x2A2C,
GL_T4F_C4F_N3F_V4F = 0x2A2D,
GL_CLIP_PLANE0 = 0x3000,
GL_CLIP_PLANE1 = 0x3001,
GL_CLIP_PLANE2 = 0x3002,
GL_CLIP_PLANE3 = 0x3003,
GL_CLIP_PLANE4 = 0x3004,
GL_CLIP_PLANE5 = 0x3005,
GL_LIGHT0 = 0x4000,
GL_COLOR_BUFFER_BIT = 0x00004000,
GL_LIGHT1 = 0x4001,
GL_LIGHT2 = 0x4002,
GL_LIGHT3 = 0x4003,
GL_LIGHT4 = 0x4004,
GL_LIGHT5 = 0x4005,
GL_LIGHT6 = 0x4006,
GL_LIGHT7 = 0x4007,
GL_HINT_BIT = 0x00008000,
GL_POLYGON_OFFSET_FILL = 0x8037,
GL_POLYGON_OFFSET_FACTOR = 0x8038,
GL_ALPHA4 = 0x803B,
GL_ALPHA8 = 0x803C,
GL_ALPHA12 = 0x803D,
GL_ALPHA16 = 0x803E,
GL_LUMINANCE4 = 0x803F,
GL_LUMINANCE8 = 0x8040,
GL_LUMINANCE12 = 0x8041,
GL_LUMINANCE16 = 0x8042,
GL_LUMINANCE4_ALPHA4 = 0x8043,
GL_LUMINANCE6_ALPHA2 = 0x8044,
GL_LUMINANCE8_ALPHA8 = 0x8045,
GL_LUMINANCE12_ALPHA4 = 0x8046,
GL_LUMINANCE12_ALPHA12 = 0x8047,
GL_LUMINANCE16_ALPHA16 = 0x8048,
GL_INTENSITY = 0x8049,
GL_INTENSITY4 = 0x804A,
GL_INTENSITY8 = 0x804B,
GL_INTENSITY12 = 0x804C,
GL_INTENSITY16 = 0x804D,
GL_RGB4 = 0x804F,
GL_RGB5 = 0x8050,
GL_RGB8 = 0x8051,
GL_RGB10 = 0x8052,
GL_RGB12 = 0x8053,
GL_RGB16 = 0x8054,
GL_RGBA2 = 0x8055,
GL_RGBA4 = 0x8056,
GL_RGB5_A1 = 0x8057,
GL_RGBA8 = 0x8058,
GL_RGB10_A2 = 0x8059,
GL_RGBA12 = 0x805A,
GL_RGBA16 = 0x805B,
GL_TEXTURE_RED_SIZE = 0x805C,
GL_TEXTURE_GREEN_SIZE = 0x805D,
GL_TEXTURE_BLUE_SIZE = 0x805E,
GL_TEXTURE_ALPHA_SIZE = 0x805F,
GL_TEXTURE_LUMINANCE_SIZE = 0x8060,
GL_TEXTURE_INTENSITY_SIZE = 0x8061,
GL_PROXY_TEXTURE_1D = 0x8063,
GL_PROXY_TEXTURE_2D = 0x8064,
GL_TEXTURE_PRIORITY = 0x8066,
GL_TEXTURE_RESIDENT = 0x8067,
GL_TEXTURE_BINDING_1D = 0x8068,
GL_TEXTURE_BINDING_2D = 0x8069,
GL_VERTEX_ARRAY = 0x8074,
GL_NORMAL_ARRAY = 0x8075,
GL_COLOR_ARRAY = 0x8076,
GL_INDEX_ARRAY = 0x8077,
GL_TEXTURE_COORD_ARRAY = 0x8078,
GL_EDGE_FLAG_ARRAY = 0x8079,
GL_VERTEX_ARRAY_SIZE = 0x807A,
GL_VERTEX_ARRAY_TYPE = 0x807B,
GL_VERTEX_ARRAY_STRIDE = 0x807C,
GL_NORMAL_ARRAY_TYPE = 0x807E,
GL_NORMAL_ARRAY_STRIDE = 0x807F,
GL_COLOR_ARRAY_SIZE = 0x8081,
GL_COLOR_ARRAY_TYPE = 0x8082,
GL_COLOR_ARRAY_STRIDE = 0x8083,
GL_INDEX_ARRAY_TYPE = 0x8085,
GL_INDEX_ARRAY_STRIDE = 0x8086,
GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088,
GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089,
GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A,
GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C,
GL_VERTEX_ARRAY_POINTER = 0x808E,
GL_NORMAL_ARRAY_POINTER = 0x808F,
GL_COLOR_ARRAY_POINTER = 0x8090,
GL_INDEX_ARRAY_POINTER = 0x8091,
GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092,
GL_EDGE_FLAG_ARRAY_POINTER = 0x8093,
GL_COLOR_INDEX1_EXT = 0x80E2,
GL_COLOR_INDEX2_EXT = 0x80E3,
GL_COLOR_INDEX4_EXT = 0x80E4,
GL_COLOR_INDEX8_EXT = 0x80E5,
GL_COLOR_INDEX12_EXT = 0x80E6,
GL_COLOR_INDEX16_EXT = 0x80E7,
GL_EVAL_BIT = 0x00010000,
GL_LIST_BIT = 0x00020000,
GL_TEXTURE_BIT = 0x00040000,
GL_SCISSOR_BIT = 0x00080000,
GL_ALL_ATTRIB_BITS = 0x000fffff,
GL_CLIENT_ALL_ATTRIB_BITS = 0xffffffff,
GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12,
GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13,
GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22,
GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23,
GL_UNSIGNED_BYTE_3_3_2 = 0x8032,
GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033,
GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034,
GL_UNSIGNED_INT_8_8_8_8 = 0x8035,
GL_UNSIGNED_INT_10_10_10_2 = 0x8036,
GL_RESCALE_NORMAL = 0x803A,
GL_TEXTURE_BINDING_3D = 0x806A,
GL_PACK_SKIP_IMAGES = 0x806B,
GL_PACK_IMAGE_HEIGHT = 0x806C,
GL_UNPACK_SKIP_IMAGES = 0x806D,
GL_UNPACK_IMAGE_HEIGHT = 0x806E,
GL_TEXTURE_3D = 0x806F,
GL_PROXY_TEXTURE_3D = 0x8070,
GL_TEXTURE_DEPTH = 0x8071,
GL_TEXTURE_WRAP_R = 0x8072,
GL_MAX_3D_TEXTURE_SIZE = 0x8073,
GL_BGR = 0x80E0,
GL_BGRA = 0x80E1,
GL_MAX_ELEMENTS_VERTICES = 0x80E8,
GL_MAX_ELEMENTS_INDICES = 0x80E9,
GL_CLAMP_TO_EDGE = 0x812F,
GL_TEXTURE_MIN_LOD = 0x813A,
GL_TEXTURE_MAX_LOD = 0x813B,
GL_TEXTURE_BASE_LEVEL = 0x813C,
GL_TEXTURE_MAX_LEVEL = 0x813D,
GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8,
GL_SINGLE_COLOR = 0x81F9,
GL_SEPARATE_SPECULAR_COLOR = 0x81FA,
GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362,
GL_UNSIGNED_SHORT_5_6_5 = 0x8363,
GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364,
GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365,
GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366,
GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367,
GL_ALIASED_POINT_SIZE_RANGE = 0x846D,
GL_ALIASED_LINE_WIDTH_RANGE = 0x846E,
GL_MULTISAMPLE = 0x809D,
GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E,
GL_SAMPLE_ALPHA_TO_ONE = 0x809F,
GL_SAMPLE_COVERAGE = 0x80A0,
GL_SAMPLE_BUFFERS = 0x80A8,
GL_SAMPLES = 0x80A9,
GL_SAMPLE_COVERAGE_VALUE = 0x80AA,
GL_SAMPLE_COVERAGE_INVERT = 0x80AB,
GL_CLAMP_TO_BORDER = 0x812D,
GL_TEXTURE0 = 0x84C0,
GL_TEXTURE1 = 0x84C1,
GL_TEXTURE2 = 0x84C2,
GL_TEXTURE3 = 0x84C3,
GL_TEXTURE4 = 0x84C4,
GL_TEXTURE5 = 0x84C5,
GL_TEXTURE6 = 0x84C6,
GL_TEXTURE7 = 0x84C7,
GL_TEXTURE8 = 0x84C8,
GL_TEXTURE9 = 0x84C9,
GL_TEXTURE10 = 0x84CA,
GL_TEXTURE11 = 0x84CB,
GL_TEXTURE12 = 0x84CC,
GL_TEXTURE13 = 0x84CD,
GL_TEXTURE14 = 0x84CE,
GL_TEXTURE15 = 0x84CF,
GL_TEXTURE16 = 0x84D0,
GL_TEXTURE17 = 0x84D1,
GL_TEXTURE18 = 0x84D2,
GL_TEXTURE19 = 0x84D3,
GL_TEXTURE20 = 0x84D4,
GL_TEXTURE21 = 0x84D5,
GL_TEXTURE22 = 0x84D6,
GL_TEXTURE23 = 0x84D7,
GL_TEXTURE24 = 0x84D8,
GL_TEXTURE25 = 0x84D9,
GL_TEXTURE26 = 0x84DA,
GL_TEXTURE27 = 0x84DB,
GL_TEXTURE28 = 0x84DC,
GL_TEXTURE29 = 0x84DD,
GL_TEXTURE30 = 0x84DE,
GL_TEXTURE31 = 0x84DF,
GL_ACTIVE_TEXTURE = 0x84E0,
GL_CLIENT_ACTIVE_TEXTURE = 0x84E1,
GL_MAX_TEXTURE_UNITS = 0x84E2,
GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3,
GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4,
GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5,
GL_TRANSPOSE_COLOR_MATRIX = 0x84E6,
GL_SUBTRACT = 0x84E7,
GL_COMPRESSED_ALPHA = 0x84E9,
GL_COMPRESSED_LUMINANCE = 0x84EA,
GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB,
GL_COMPRESSED_INTENSITY = 0x84EC,
GL_COMPRESSED_RGB = 0x84ED,
GL_COMPRESSED_RGBA = 0x84EE,
GL_TEXTURE_COMPRESSION_HINT = 0x84EF,
GL_NORMAL_MAP = 0x8511,
GL_REFLECTION_MAP = 0x8512,
GL_TEXTURE_CUBE_MAP = 0x8513,
GL_TEXTURE_BINDING_CUBE_MAP = 0x8514,
GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515,
GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516,
GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517,
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518,
GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519,
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A,
GL_PROXY_TEXTURE_CUBE_MAP = 0x851B,
GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C,
GL_COMBINE = 0x8570,
GL_COMBINE_RGB = 0x8571,
GL_COMBINE_ALPHA = 0x8572,
GL_RGB_SCALE = 0x8573,
GL_ADD_SIGNED = 0x8574,
GL_INTERPOLATE = 0x8575,
GL_CONSTANT = 0x8576,
GL_PRIMARY_COLOR = 0x8577,
GL_PREVIOUS = 0x8578,
GL_SOURCE0_RGB = 0x8580,
GL_SOURCE1_RGB = 0x8581,
GL_SOURCE2_RGB = 0x8582,
GL_SOURCE0_ALPHA = 0x8588,
GL_SOURCE1_ALPHA = 0x8589,
GL_SOURCE2_ALPHA = 0x858A,
GL_OPERAND0_RGB = 0x8590,
GL_OPERAND1_RGB = 0x8591,
GL_OPERAND2_RGB = 0x8592,
GL_OPERAND0_ALPHA = 0x8598,
GL_OPERAND1_ALPHA = 0x8599,
GL_OPERAND2_ALPHA = 0x859A,
GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0,
GL_TEXTURE_COMPRESSED = 0x86A1,
GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2,
GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3,
GL_DOT3_RGB = 0x86AE,
GL_DOT3_RGBA = 0x86AF,
GL_MULTISAMPLE_BIT = 0x20000000,
GL_BLEND_DST_RGB = 0x80C8,
GL_BLEND_SRC_RGB = 0x80C9,
GL_BLEND_DST_ALPHA = 0x80CA,
GL_BLEND_SRC_ALPHA = 0x80CB,
GL_POINT_SIZE_MIN = 0x8126,
GL_POINT_SIZE_MAX = 0x8127,
GL_POINT_FADE_THRESHOLD_SIZE = 0x8128,
GL_POINT_DISTANCE_ATTENUATION = 0x8129,
GL_GENERATE_MIPMAP = 0x8191,
GL_GENERATE_MIPMAP_HINT = 0x8192,
GL_DEPTH_COMPONENT16 = 0x81A5,
GL_DEPTH_COMPONENT24 = 0x81A6,
GL_DEPTH_COMPONENT32 = 0x81A7,
GL_MIRRORED_REPEAT = 0x8370,
GL_FOG_COORDINATE_SOURCE = 0x8450,
GL_FOG_COORDINATE = 0x8451,
GL_FRAGMENT_DEPTH = 0x8452,
GL_CURRENT_FOG_COORDINATE = 0x8453,
GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454,
GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455,
GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456,
GL_FOG_COORDINATE_ARRAY = 0x8457,
GL_COLOR_SUM = 0x8458,
GL_CURRENT_SECONDARY_COLOR = 0x8459,
GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A,
GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B,
GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C,
GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D,
GL_SECONDARY_COLOR_ARRAY = 0x845E,
GL_MAX_TEXTURE_LOD_BIAS = 0x84FD,
GL_TEXTURE_FILTER_CONTROL = 0x8500,
GL_TEXTURE_LOD_BIAS = 0x8501,
GL_INCR_WRAP = 0x8507,
GL_DECR_WRAP = 0x8508,
GL_TEXTURE_DEPTH_SIZE = 0x884A,
GL_DEPTH_TEXTURE_MODE = 0x884B,
GL_TEXTURE_COMPARE_MODE = 0x884C,
GL_TEXTURE_COMPARE_FUNC = 0x884D,
GL_COMPARE_R_TO_TEXTURE = 0x884E,
GL_CURRENT_FOG_COORD = 0x8453,
GL_FOG_COORD = 0x8451,
GL_FOG_COORD_ARRAY = 0x8457,
GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D,
GL_FOG_COORD_ARRAY_POINTER = 0x8456,
GL_FOG_COORD_ARRAY_STRIDE = 0x8455,
GL_FOG_COORD_ARRAY_TYPE = 0x8454,
GL_FOG_COORD_SRC = 0x8450,
GL_SRC0_ALPHA = 0x8588,
GL_SRC0_RGB = 0x8580,
GL_SRC1_ALPHA = 0x8589,
GL_SRC1_RGB = 0x8581,
GL_SRC2_ALPHA = 0x858A,
GL_SRC2_RGB = 0x8582,
GL_BUFFER_SIZE = 0x8764,
GL_BUFFER_USAGE = 0x8765,
GL_QUERY_COUNTER_BITS = 0x8864,
GL_CURRENT_QUERY = 0x8865,
GL_QUERY_RESULT = 0x8866,
GL_QUERY_RESULT_AVAILABLE = 0x8867,
GL_ARRAY_BUFFER = 0x8892,
GL_ELEMENT_ARRAY_BUFFER = 0x8893,
GL_ARRAY_BUFFER_BINDING = 0x8894,
GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895,
GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896,
GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897,
GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898,
GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899,
GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A,
GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B,
GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C,
GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D,
GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E,
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F,
GL_READ_ONLY = 0x88B8,
GL_WRITE_ONLY = 0x88B9,
GL_READ_WRITE = 0x88BA,
GL_BUFFER_ACCESS = 0x88BB,
GL_BUFFER_MAPPED = 0x88BC,
GL_BUFFER_MAP_POINTER = 0x88BD,
GL_STREAM_DRAW = 0x88E0,
GL_STREAM_READ = 0x88E1,
GL_STREAM_COPY = 0x88E2,
GL_STATIC_DRAW = 0x88E4,
GL_STATIC_READ = 0x88E5,
GL_STATIC_COPY = 0x88E6,
GL_DYNAMIC_DRAW = 0x88E8,
GL_DYNAMIC_READ = 0x88E9,
GL_DYNAMIC_COPY = 0x88EA,
GL_SAMPLES_PASSED = 0x8914,
GL_BLEND_EQUATION_RGB = 0x8009,
GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622,
GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623,
GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624,
GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625,
GL_CURRENT_VERTEX_ATTRIB = 0x8626,
GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642,
GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643,
GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645,
GL_STENCIL_BACK_FUNC = 0x8800,
GL_STENCIL_BACK_FAIL = 0x8801,
GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802,
GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803,
GL_MAX_DRAW_BUFFERS = 0x8824,
GL_DRAW_BUFFER0 = 0x8825,
GL_DRAW_BUFFER1 = 0x8826,
GL_DRAW_BUFFER2 = 0x8827,
GL_DRAW_BUFFER3 = 0x8828,
GL_DRAW_BUFFER4 = 0x8829,
GL_DRAW_BUFFER5 = 0x882A,
GL_DRAW_BUFFER6 = 0x882B,
GL_DRAW_BUFFER7 = 0x882C,
GL_DRAW_BUFFER8 = 0x882D,
GL_DRAW_BUFFER9 = 0x882E,
GL_DRAW_BUFFER10 = 0x882F,
GL_DRAW_BUFFER11 = 0x8830,
GL_DRAW_BUFFER12 = 0x8831,
GL_DRAW_BUFFER13 = 0x8832,
GL_DRAW_BUFFER14 = 0x8833,
GL_DRAW_BUFFER15 = 0x8834,
GL_BLEND_EQUATION_ALPHA = 0x883D,
GL_POINT_SPRITE = 0x8861,
GL_COORD_REPLACE = 0x8862,
GL_MAX_VERTEX_ATTRIBS = 0x8869,
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A,
GL_MAX_TEXTURE_COORDS = 0x8871,
GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872,
GL_FRAGMENT_SHADER = 0x8B30,
GL_VERTEX_SHADER = 0x8B31,
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49,
GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A,
GL_MAX_VARYING_FLOATS = 0x8B4B,
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C,
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D,
GL_SHADER_TYPE = 0x8B4F,
GL_FLOAT_VEC2 = 0x8B50,
GL_FLOAT_VEC3 = 0x8B51,
GL_FLOAT_VEC4 = 0x8B52,
GL_INT_VEC2 = 0x8B53,
GL_INT_VEC3 = 0x8B54,
GL_INT_VEC4 = 0x8B55,
GL_BOOL = 0x8B56,
GL_BOOL_VEC2 = 0x8B57,
GL_BOOL_VEC3 = 0x8B58,
GL_BOOL_VEC4 = 0x8B59,
GL_FLOAT_MAT2 = 0x8B5A,
GL_FLOAT_MAT3 = 0x8B5B,
GL_FLOAT_MAT4 = 0x8B5C,
GL_SAMPLER_1D = 0x8B5D,
GL_SAMPLER_2D = 0x8B5E,
GL_SAMPLER_3D = 0x8B5F,
GL_SAMPLER_CUBE = 0x8B60,
GL_SAMPLER_1D_SHADOW = 0x8B61,
GL_SAMPLER_2D_SHADOW = 0x8B62,
GL_DELETE_STATUS = 0x8B80,
GL_COMPILE_STATUS = 0x8B81,
GL_LINK_STATUS = 0x8B82,
GL_VALIDATE_STATUS = 0x8B83,
GL_INFO_LOG_LENGTH = 0x8B84,
GL_ATTACHED_SHADERS = 0x8B85,
GL_ACTIVE_UNIFORMS = 0x8B86,
GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87,
GL_SHADER_SOURCE_LENGTH = 0x8B88,
GL_ACTIVE_ATTRIBUTES = 0x8B89,
GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A,
GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B,
GL_SHADING_LANGUAGE_VERSION = 0x8B8C,
GL_CURRENT_PROGRAM = 0x8B8D,
GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0,
GL_LOWER_LEFT = 0x8CA1,
GL_UPPER_LEFT = 0x8CA2,
GL_STENCIL_BACK_REF = 0x8CA3,
GL_STENCIL_BACK_VALUE_MASK = 0x8CA4,
GL_STENCIL_BACK_WRITEMASK = 0x8CA5,
GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F,
GL_PIXEL_PACK_BUFFER = 0x88EB,
GL_PIXEL_UNPACK_BUFFER = 0x88EC,
GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED,
GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF,
GL_FLOAT_MAT2x3 = 0x8B65,
GL_FLOAT_MAT2x4 = 0x8B66,
GL_FLOAT_MAT3x2 = 0x8B67,
GL_FLOAT_MAT3x4 = 0x8B68,
GL_FLOAT_MAT4x2 = 0x8B69,
GL_FLOAT_MAT4x3 = 0x8B6A,
GL_SRGB = 0x8C40,
GL_SRGB8 = 0x8C41,
GL_SRGB_ALPHA = 0x8C42,
GL_SRGB8_ALPHA8 = 0x8C43,
GL_SLUMINANCE_ALPHA = 0x8C44,
GL_SLUMINANCE8_ALPHA8 = 0x8C45,
GL_SLUMINANCE = 0x8C46,
GL_SLUMINANCE8 = 0x8C47,
GL_COMPRESSED_SRGB = 0x8C48,
GL_COMPRESSED_SRGB_ALPHA = 0x8C49,
GL_COMPRESSED_SLUMINANCE = 0x8C4A,
GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B,
GL_CLIP_DISTANCE0 = 0x3000,
GL_CLIP_DISTANCE1 = 0x3001,
GL_CLIP_DISTANCE2 = 0x3002,
GL_CLIP_DISTANCE3 = 0x3003,
GL_CLIP_DISTANCE4 = 0x3004,
GL_CLIP_DISTANCE5 = 0x3005,
GL_COMPARE_REF_TO_TEXTURE = 0x884E,
GL_MAX_CLIP_DISTANCES = 0x0D32,
GL_MAX_VARYING_COMPONENTS = 0x8B4B,
GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x0001,
GL_MAJOR_VERSION = 0x821B,
GL_MINOR_VERSION = 0x821C,
GL_NUM_EXTENSIONS = 0x821D,
GL_CONTEXT_FLAGS = 0x821E,
GL_DEPTH_BUFFER = 0x8223,
GL_STENCIL_BUFFER = 0x8224,
GL_RGBA32F = 0x8814,
GL_RGB32F = 0x8815,
GL_RGBA16F = 0x881A,
GL_RGB16F = 0x881B,
GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD,
GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF,
GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904,
GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905,
GL_CLAMP_VERTEX_COLOR = 0x891A,
GL_CLAMP_FRAGMENT_COLOR = 0x891B,
GL_CLAMP_READ_COLOR = 0x891C,
GL_FIXED_ONLY = 0x891D,
GL_TEXTURE_RED_TYPE = 0x8C10,
GL_TEXTURE_GREEN_TYPE = 0x8C11,
GL_TEXTURE_BLUE_TYPE = 0x8C12,
GL_TEXTURE_ALPHA_TYPE = 0x8C13,
GL_TEXTURE_LUMINANCE_TYPE = 0x8C14,
GL_TEXTURE_INTENSITY_TYPE = 0x8C15,
GL_TEXTURE_DEPTH_TYPE = 0x8C16,
GL_TEXTURE_1D_ARRAY = 0x8C18,
GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19,
GL_TEXTURE_2D_ARRAY = 0x8C1A,
GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B,
GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C,
GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D,
GL_R11F_G11F_B10F = 0x8C3A,
GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B,
GL_RGB9_E5 = 0x8C3D,
GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E,
GL_TEXTURE_SHARED_SIZE = 0x8C3F,
GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76,
GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F,
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80,
GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83,
GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84,
GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85,
GL_PRIMITIVES_GENERATED = 0x8C87,
GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88,
GL_RASTERIZER_DISCARD = 0x8C89,
GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A,
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B,
GL_INTERLEAVED_ATTRIBS = 0x8C8C,
GL_SEPARATE_ATTRIBS = 0x8C8D,
GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E,
GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F,
GL_RGBA32UI = 0x8D70,
GL_RGB32UI = 0x8D71,
GL_RGBA16UI = 0x8D76,
GL_RGB16UI = 0x8D77,
GL_RGBA8UI = 0x8D7C,
GL_RGB8UI = 0x8D7D,
GL_RGBA32I = 0x8D82,
GL_RGB32I = 0x8D83,
GL_RGBA16I = 0x8D88,
GL_RGB16I = 0x8D89,
GL_RGBA8I = 0x8D8E,
GL_RGB8I = 0x8D8F,
GL_RED_INTEGER = 0x8D94,
GL_GREEN_INTEGER = 0x8D95,
GL_BLUE_INTEGER = 0x8D96,
GL_ALPHA_INTEGER = 0x8D97,
GL_RGB_INTEGER = 0x8D98,
GL_RGBA_INTEGER = 0x8D99,
GL_BGR_INTEGER = 0x8D9A,
GL_BGRA_INTEGER = 0x8D9B,
GL_SAMPLER_1D_ARRAY = 0x8DC0,
GL_SAMPLER_2D_ARRAY = 0x8DC1,
GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3,
GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4,
GL_SAMPLER_CUBE_SHADOW = 0x8DC5,
GL_UNSIGNED_INT_VEC2 = 0x8DC6,
GL_UNSIGNED_INT_VEC3 = 0x8DC7,
GL_UNSIGNED_INT_VEC4 = 0x8DC8,
GL_INT_SAMPLER_1D = 0x8DC9,
GL_INT_SAMPLER_2D = 0x8DCA,
GL_INT_SAMPLER_3D = 0x8DCB,
GL_INT_SAMPLER_CUBE = 0x8DCC,
GL_INT_SAMPLER_1D_ARRAY = 0x8DCE,
GL_INT_SAMPLER_2D_ARRAY = 0x8DCF,
GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1,
GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2,
GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3,
GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4,
GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6,
GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7,
GL_QUERY_WAIT = 0x8E13,
GL_QUERY_NO_WAIT = 0x8E14,
GL_QUERY_BY_REGION_WAIT = 0x8E15,
GL_QUERY_BY_REGION_NO_WAIT = 0x8E16,
GL_TEXTURE_RECTANGLE = 0x84F5,
GL_TEXTURE_BINDING_RECTANGLE = 0x84F6,
GL_PROXY_TEXTURE_RECTANGLE = 0x84F7,
GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8,
GL_SAMPLER_2D_RECT = 0x8B63,
GL_SAMPLER_2D_RECT_SHADOW = 0x8B64,
GL_TEXTURE_BUFFER = 0x8C2A,
GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B,
GL_TEXTURE_BINDING_BUFFER = 0x8C2C,
GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D,
GL_TEXTURE_BUFFER_FORMAT = 0x8C2E,
GL_SAMPLER_BUFFER = 0x8DC2,
GL_INT_SAMPLER_2D_RECT = 0x8DCD,
GL_INT_SAMPLER_BUFFER = 0x8DD0,
GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5,
GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8,
GL_RED_SNORM = 0x8F90,
GL_RG_SNORM = 0x8F91,
GL_RGB_SNORM = 0x8F92,
GL_RGBA_SNORM = 0x8F93,
GL_R8_SNORM = 0x8F94,
GL_RG8_SNORM = 0x8F95,
GL_RGB8_SNORM = 0x8F96,
GL_RGBA8_SNORM = 0x8F97,
GL_R16_SNORM = 0x8F98,
GL_RG16_SNORM = 0x8F99,
GL_RGB16_SNORM = 0x8F9A,
GL_RGBA16_SNORM = 0x8F9B,
GL_SIGNED_NORMALIZED = 0x8F9C,
GL_PRIMITIVE_RESTART = 0x8F9D,
GL_PRIMITIVE_RESTART_INDEX = 0x8F9E,
GL_BUFFER_ACCESS_FLAGS = 0x911F,
GL_BUFFER_MAP_LENGTH = 0x9120,
GL_BUFFER_MAP_OFFSET = 0x9121,
GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001,
GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002,
GL_LINES_ADJACENCY = 0x000A,
GL_LINE_STRIP_ADJACENCY = 0x000B,
GL_TRIANGLES_ADJACENCY = 0x000C,
GL_TRIANGLE_STRIP_ADJACENCY = 0x000D,
GL_PROGRAM_POINT_SIZE = 0x8642,
GL_GEOMETRY_VERTICES_OUT = 0x8916,
GL_GEOMETRY_INPUT_TYPE = 0x8917,
GL_GEOMETRY_OUTPUT_TYPE = 0x8918,
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29,
GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7,
GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8,
GL_GEOMETRY_SHADER = 0x8DD9,
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF,
GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0,
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1,
GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122,
GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123,
GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124,
GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125,
GL_CONTEXT_PROFILE_MASK = 0x9126,
GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE,
GL_RGB10_A2UI = 0x906F,
GL_SAMPLE_SHADING = 0x8C36,
GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37,
GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E,
GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F,
GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS = 0x8F9F,
GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009,
GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A,
GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B,
GL_SAMPLER_CUBE_MAP_ARRAY = 0x900C,
GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D,
GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E,
GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F,
GL_COMPRESSED_RGBA_BPTC_UNORM = 0x8E8C,
GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D,
GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E,
GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F,
GL_COPY_READ_BUFFER_BINDING = 0x8F36,
GL_COPY_WRITE_BUFFER_BINDING = 0x8F37,
GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9,
GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874E,
GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221,
GL_MAX_VERTEX_ATTRIB_STRIDE = 0x82E5,
GL_TEXTURE_BUFFER_BINDING = 0x8C2A,
GL_MULTISAMPLE_3DFX = 0x86B2,
GL_SAMPLE_BUFFERS_3DFX = 0x86B3,
GL_SAMPLES_3DFX = 0x86B4,
GL_MULTISAMPLE_BIT_3DFX = 0x20000000,
GL_COMPRESSED_RGB_FXT1_3DFX = 0x86B0,
GL_COMPRESSED_RGBA_FXT1_3DFX = 0x86B1,
GL_FACTOR_MIN_AMD = 0x901C,
GL_FACTOR_MAX_AMD = 0x901D,
GL_MAX_DEBUG_MESSAGE_LENGTH_AMD = 0x9143,
GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = 0x9144,
GL_DEBUG_LOGGED_MESSAGES_AMD = 0x9145,
GL_DEBUG_SEVERITY_HIGH_AMD = 0x9146,
GL_DEBUG_SEVERITY_MEDIUM_AMD = 0x9147,
GL_DEBUG_SEVERITY_LOW_AMD = 0x9148,
GL_DEBUG_CATEGORY_API_ERROR_AMD = 0x9149,
GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = 0x914A,
GL_DEBUG_CATEGORY_DEPRECATION_AMD = 0x914B,
GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = 0x914C,
GL_DEBUG_CATEGORY_PERFORMANCE_AMD = 0x914D,
GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = 0x914E,
GL_DEBUG_CATEGORY_APPLICATION_AMD = 0x914F,
GL_DEBUG_CATEGORY_OTHER_AMD = 0x9150,
GL_DEPTH_CLAMP_NEAR_AMD = 0x901E,
GL_DEPTH_CLAMP_FAR_AMD = 0x901F,
//GL_RED = 0x1903,
//GL_GREEN = 0x1904,
//GL_BLUE = 0x1905,
//GL_ALPHA = 0x1906,
GL_RG8UI = 0x8238,
GL_RG16UI = 0x823A,
//GL_RGBA8UI = 0x8D7C,
GL_VERTEX_ELEMENT_SWIZZLE_AMD = 0x91A4,
GL_VERTEX_ID_SWIZZLE_AMD = 0x91A5,
GL_DATA_BUFFER_AMD = 0x9151,
GL_PERFORMANCE_MONITOR_AMD = 0x9152,
GL_QUERY_OBJECT_AMD = 0x9153,
GL_VERTEX_ARRAY_OBJECT_AMD = 0x9154,
GL_SAMPLER_OBJECT_AMD = 0x9155,
GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD = 0x00000001,
GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD = 0x00000002,
GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD = 0x00000004,
GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = 0x00000008,
GL_OCCLUSION_QUERY_EVENT_MASK_AMD = 0x874F,
GL_QUERY_ALL_EVENT_BITS_AMD = 0xFFFFFFFF,
GL_COUNTER_TYPE_AMD = 0x8BC0,
GL_COUNTER_RANGE_AMD = 0x8BC1,
GL_UNSIGNED_INT64_AMD = 0x8BC2,
GL_PERCENTAGE_AMD = 0x8BC3,
GL_PERFMON_RESULT_AVAILABLE_AMD = 0x8BC4,
GL_PERFMON_RESULT_SIZE_AMD = 0x8BC5,
GL_PERFMON_RESULT_AMD = 0x8BC6,
GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = 0x9160,
GL_QUERY_BUFFER_AMD = 0x9192,
GL_QUERY_BUFFER_BINDING_AMD = 0x9193,
GL_QUERY_RESULT_NO_WAIT_AMD = 0x9194,
GL_SUBSAMPLE_DISTANCE_AMD = 0x883F,
GL_TEXTURE_CUBE_MAP_SEAMLESS_ARB = 0x884F,
GL_TEXTURE_STORAGE_SPARSE_BIT_AMD = 0x00000001,
GL_VIRTUAL_PAGE_SIZE_X_AMD = 0x9195,
GL_VIRTUAL_PAGE_SIZE_Y_AMD = 0x9196,
GL_VIRTUAL_PAGE_SIZE_Z_AMD = 0x9197,
GL_MAX_SPARSE_TEXTURE_SIZE_AMD = 0x9198,
GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD = 0x9199,
GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS = 0x919A,
GL_MIN_SPARSE_LEVEL_AMD = 0x919B,
GL_MIN_LOD_WARNING_AMD = 0x919C,
GL_SET_AMD = 0x874A,
GL_REPLACE_VALUE_AMD = 0x874B,
GL_STENCIL_OP_VALUE_AMD = 0x874C,
GL_STENCIL_BACK_OP_VALUE_AMD = 0x874D,
GL_STREAM_RASTERIZATION_AMD = 0x91A0,
GL_SAMPLER_BUFFER_AMD = 0x9001,
GL_INT_SAMPLER_BUFFER_AMD = 0x9002,
GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = 0x9003,
GL_TESSELLATION_MODE_AMD = 0x9004,
GL_TESSELLATION_FACTOR_AMD = 0x9005,
GL_DISCRETE_AMD = 0x9006,
GL_CONTINUOUS_AMD = 0x9007,
GL_DRAW_FRAMEBUFFER_BINDING_ANGLE = 0x8CA6,
GL_READ_FRAMEBUFFER_ANGLE = 0x8CA8,
GL_DRAW_FRAMEBUFFER_ANGLE = 0x8CA9,
GL_READ_FRAMEBUFFER_BINDING_ANGLE = 0x8CAA,
GL_RENDERBUFFER_SAMPLES_ANGLE = 0x8CAB,
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE = 0x8D56,
GL_MAX_SAMPLES_ANGLE = 0x8D57,
GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = 0x88FE,
GL_PACK_REVERSE_ROW_ORDER_ANGLE = 0x93A4,
GL_PROGRAM_BINARY_ANGLE = 0x93A6,
GL_COMPRESSED_RGB_S3TC_DXT1_ANGLE = 0x83F0,
GL_COMPRESSED_RGBA_S3TC_DXT1_ANGLE = 0x83F1,
GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE = 0x83F2,
GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE = 0x83F3,
//GL_COMPRESSED_RGB_S3TC_DXT1_ANGLE = 0x83F0,
//GL_COMPRESSED_RGBA_S3TC_DXT1_ANGLE = 0x83F1,
//GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE = 0x83F2,
//GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE = 0x83F3,
//GL_COMPRESSED_RGB_S3TC_DXT1_ANGLE = 0x83F0,
//GL_COMPRESSED_RGBA_S3TC_DXT1_ANGLE = 0x83F1,
//GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE = 0x83F2,
//GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE = 0x83F3,
GL_TEXTURE_USAGE_ANGLE = 0x93A2,
GL_FRAMEBUFFER_ATTACHMENT_ANGLE = 0x93A3,
GL_QUERY_COUNTER_BITS_ANGLE = 0x8864,
GL_CURRENT_QUERY_ANGLE = 0x8865,
GL_QUERY_RESULT_ANGLE = 0x8866,
GL_QUERY_RESULT_AVAILABLE_ANGLE = 0x8867,
GL_TIME_ELAPSED_ANGLE = 0x88BF,
GL_TIMESTAMP_ANGLE = 0x8E28,
GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE = 0x93A0,
GL_AUX_DEPTH_STENCIL_APPLE = 0x8A14,
GL_UNPACK_CLIENT_STORAGE_APPLE = 0x85B2,
GL_ELEMENT_ARRAY_APPLE = 0x8A0C,
GL_ELEMENT_ARRAY_TYPE_APPLE = 0x8A0D,
GL_ELEMENT_ARRAY_POINTER_APPLE = 0x8A0E,
GL_DRAW_PIXELS_APPLE = 0x8A0A,
GL_FENCE_APPLE = 0x8A0B,
GL_HALF_APPLE = 0x140B,
GL_RGBA_FLOAT32_APPLE = 0x8814,
GL_RGB_FLOAT32_APPLE = 0x8815,
GL_ALPHA_FLOAT32_APPLE = 0x8816,
GL_INTENSITY_FLOAT32_APPLE = 0x8817,
GL_LUMINANCE_FLOAT32_APPLE = 0x8818,
GL_LUMINANCE_ALPHA_FLOAT32_APPLE = 0x8819,
GL_RGBA_FLOAT16_APPLE = 0x881A,
GL_RGB_FLOAT16_APPLE = 0x881B,
GL_ALPHA_FLOAT16_APPLE = 0x881C,
GL_INTENSITY_FLOAT16_APPLE = 0x881D,
GL_LUMINANCE_FLOAT16_APPLE = 0x881E,
GL_LUMINANCE_ALPHA_FLOAT16_APPLE = 0x881F,
GL_COLOR_FLOAT_APPLE = 0x8A0F,
GL_BUFFER_SERIALIZED_MODIFY_APPLE = 0x8A12,
GL_BUFFER_FLUSHING_UNMAP_APPLE = 0x8A13,
GL_BUFFER_OBJECT_APPLE = 0x85B3,
GL_RELEASED_APPLE = 0x8A19,
GL_VOLATILE_APPLE = 0x8A1A,
GL_RETAINED_APPLE = 0x8A1B,
GL_UNDEFINED_APPLE = 0x8A1C,
GL_PURGEABLE_APPLE = 0x8A1D,
GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE = 0x8A10,
GL_UNSIGNED_SHORT_8_8_APPLE = 0x85BA,
GL_UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BB,
GL_RGB_422_APPLE = 0x8A1F,
GL_RGB_RAW_422_APPLE = 0x8A51,
GL_PACK_ROW_BYTES_APPLE = 0x8A15,
GL_UNPACK_ROW_BYTES_APPLE = 0x8A16,
GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 0x85B0,
GL_TEXTURE_RANGE_LENGTH_APPLE = 0x85B7,
GL_TEXTURE_RANGE_POINTER_APPLE = 0x85B8,
GL_TEXTURE_STORAGE_HINT_APPLE = 0x85BC,
GL_STORAGE_PRIVATE_APPLE = 0x85BD,
GL_STORAGE_CACHED_APPLE = 0x85BE,
GL_STORAGE_SHARED_APPLE = 0x85BF,
GL_TRANSFORM_HINT_APPLE = 0x85B1,
GL_VERTEX_ARRAY_BINDING_APPLE = 0x85B5,
GL_VERTEX_ARRAY_RANGE_APPLE = 0x851D,
GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x851E,
GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F,
GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE = 0x8520,
GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x8521,
GL_STORAGE_CLIENT_APPLE = 0x85B4,
//GL_STORAGE_CACHED_APPLE = 0x85BE,
//GL_STORAGE_SHARED_APPLE = 0x85BF,
GL_VERTEX_ATTRIB_MAP1_APPLE = 0x8A00,
GL_VERTEX_ATTRIB_MAP2_APPLE = 0x8A01,
GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = 0x8A02,
GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = 0x8A03,
GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = 0x8A04,
GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 0x8A05,
GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = 0x8A06,
GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = 0x8A07,
GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = 0x8A08,
GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 0x8A09,
GL_YCBCR_422_APPLE = 0x85B9,
GL_FIXED = 0x140C,
GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A,
GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B,
GL_RGB565 = 0x8D62,
GL_LOW_FLOAT = 0x8DF0,
GL_MEDIUM_FLOAT = 0x8DF1,
GL_HIGH_FLOAT = 0x8DF2,
GL_LOW_INT = 0x8DF3,
GL_MEDIUM_INT = 0x8DF4,
GL_HIGH_INT = 0x8DF5,
GL_SHADER_BINARY_FORMATS = 0x8DF8,
GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9,
GL_SHADER_COMPILER = 0x8DFA,
GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB,
GL_MAX_VARYING_VECTORS = 0x8DFC,
GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD,
GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF,
GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69,
GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A,
GL_MAX_ELEMENT_INDEX = 0x8D6B,
GL_COMPRESSED_R11_EAC = 0x9270,
GL_COMPRESSED_SIGNED_R11_EAC = 0x9271,
GL_COMPRESSED_RG11_EAC = 0x9272,
GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273,
GL_COMPRESSED_RGB8_ETC2 = 0x9274,
GL_COMPRESSED_SRGB8_ETC2 = 0x9275,
GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276,
GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277,
GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278,
GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279,
GL_UNSIGNED_INT64_ARB = 0x140F,
GL_SRC1_COLOR = 0x88F9,
GL_ONE_MINUS_SRC1_COLOR = 0x88FA,
GL_ONE_MINUS_SRC1_ALPHA = 0x88FB,
GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC,
GL_MAP_READ_BIT = 0x0001,
GL_MAP_WRITE_BIT = 0x0002,
GL_MAP_PERSISTENT_BIT = 0x00000040,
GL_MAP_COHERENT_BIT = 0x00000080,
GL_DYNAMIC_STORAGE_BIT = 0x0100,
GL_CLIENT_STORAGE_BIT = 0x0200,
GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000,
GL_BUFFER_IMMUTABLE_STORAGE = 0x821F,
GL_BUFFER_STORAGE_FLAGS = 0x8220,
GL_SYNC_CL_EVENT_ARB = 0x8240,
GL_SYNC_CL_EVENT_COMPLETE_ARB = 0x8241,
GL_CLEAR_TEXTURE = 0x9365,
//GL_LOWER_LEFT = 0x8CA1,
//GL_UPPER_LEFT = 0x8CA2,
GL_CLIP_ORIGIN = 0x935C,
GL_CLIP_DEPTH_MODE = 0x935D,
GL_NEGATIVE_ONE_TO_ONE = 0x935E,
GL_ZERO_TO_ONE = 0x935F,
GL_RGBA_FLOAT_MODE_ARB = 0x8820,
GL_CLAMP_VERTEX_COLOR_ARB = 0x891A,
GL_CLAMP_FRAGMENT_COLOR_ARB = 0x891B,
GL_CLAMP_READ_COLOR_ARB = 0x891C,
GL_FIXED_ONLY_ARB = 0x891D,
GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127,
GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128,
GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129,
GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A,
GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912B,
GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C,
GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912D,
GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912E,
GL_COMPUTE_SHADER_BIT = 0x00000020,
GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262,
GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263,
GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264,
GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265,
GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266,
GL_COMPUTE_WORK_GROUP_SIZE = 0x8267,
GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB,
GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC,
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED,
GL_DISPATCH_INDIRECT_BUFFER = 0x90EE,
GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF,
GL_COMPUTE_SHADER = 0x91B9,
GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB,
GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC,
GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD,
GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE,
GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF,
GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = 0x90EB,
GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = 0x91BF,
GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = 0x9344,
GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = 0x9345,
GL_QUERY_WAIT_INVERTED = 0x8E17,
GL_QUERY_NO_WAIT_INVERTED = 0x8E18,
GL_QUERY_BY_REGION_WAIT_INVERTED = 0x8E19,
GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A,
GL_COPY_READ_BUFFER = 0x8F36,
GL_COPY_WRITE_BUFFER = 0x8F37,
GL_MAX_CULL_DISTANCES = 0x82F9,
GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FA,
GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = 0x8242,
GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 0x8243,
GL_DEBUG_CALLBACK_FUNCTION_ARB = 0x8244,
GL_DEBUG_CALLBACK_USER_PARAM_ARB = 0x8245,
GL_DEBUG_SOURCE_API_ARB = 0x8246,
GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 0x8247,
GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = 0x8248,
GL_DEBUG_SOURCE_THIRD_PARTY_ARB = 0x8249,
GL_DEBUG_SOURCE_APPLICATION_ARB = 0x824A,
GL_DEBUG_SOURCE_OTHER_ARB = 0x824B,
GL_DEBUG_TYPE_ERROR_ARB = 0x824C,
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 0x824D,
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 0x824E,
GL_DEBUG_TYPE_PORTABILITY_ARB = 0x824F,
GL_DEBUG_TYPE_PERFORMANCE_ARB = 0x8250,
GL_DEBUG_TYPE_OTHER_ARB = 0x8251,
GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = 0x9143,
GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = 0x9144,
GL_DEBUG_LOGGED_MESSAGES_ARB = 0x9145,
GL_DEBUG_SEVERITY_HIGH_ARB = 0x9146,
GL_DEBUG_SEVERITY_MEDIUM_ARB = 0x9147,
GL_DEBUG_SEVERITY_LOW_ARB = 0x9148,
GL_DEPTH_COMPONENT32F = 0x8CAC,
GL_DEPTH32F_STENCIL8 = 0x8CAD,
GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD,
GL_DEPTH_CLAMP = 0x864F,
GL_DEPTH_COMPONENT16_ARB = 0x81A5,
GL_DEPTH_COMPONENT24_ARB = 0x81A6,
GL_DEPTH_COMPONENT32_ARB = 0x81A7,
GL_TEXTURE_DEPTH_SIZE_ARB = 0x884A,
GL_DEPTH_TEXTURE_MODE_ARB = 0x884B,
GL_TEXTURE_TARGET = 0x1006,
GL_QUERY_TARGET = 0x82EA,
GL_TEXTURE_BINDING = 0x82EB,
GL_MAX_DRAW_BUFFERS_ARB = 0x8824,
GL_DRAW_BUFFER0_ARB = 0x8825,
GL_DRAW_BUFFER1_ARB = 0x8826,
GL_DRAW_BUFFER2_ARB = 0x8827,
GL_DRAW_BUFFER3_ARB = 0x8828,
GL_DRAW_BUFFER4_ARB = 0x8829,
GL_DRAW_BUFFER5_ARB = 0x882A,
GL_DRAW_BUFFER6_ARB = 0x882B,
GL_DRAW_BUFFER7_ARB = 0x882C,
GL_DRAW_BUFFER8_ARB = 0x882D,
GL_DRAW_BUFFER9_ARB = 0x882E,
GL_DRAW_BUFFER10_ARB = 0x882F,
GL_DRAW_BUFFER11_ARB = 0x8830,
GL_DRAW_BUFFER12_ARB = 0x8831,
GL_DRAW_BUFFER13_ARB = 0x8832,
GL_DRAW_BUFFER14_ARB = 0x8833,
GL_DRAW_BUFFER15_ARB = 0x8834,
GL_DRAW_INDIRECT_BUFFER = 0x8F3F,
GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43,
GL_LOCATION_COMPONENT = 0x934A,
GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B,
GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C,
GL_MAX_UNIFORM_LOCATIONS = 0x826E,
GL_FRAGMENT_PROGRAM_ARB = 0x8804,
GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x8805,
GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x8806,
GL_PROGRAM_TEX_INDIRECTIONS_ARB = 0x8807,
GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x8808,
GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x8809,
GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x880A,
GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x880B,
GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x880C,
GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x880D,
GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x880E,
GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x880F,
GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x8810,
GL_MAX_TEXTURE_COORDS_ARB = 0x8871,
GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 0x8872,
GL_FRAGMENT_SHADER_ARB = 0x8B30,
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 0x8B49,
GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B,
GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310,
GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311,
GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312,
GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313,
GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314,
GL_MAX_FRAMEBUFFER_WIDTH = 0x9315,
GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316,
GL_MAX_FRAMEBUFFER_LAYERS = 0x9317,
GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318,
GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506,
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210,
GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211,
GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212,
GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213,
GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214,
GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215,
GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216,
GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217,
GL_FRAMEBUFFER_DEFAULT = 0x8218,
GL_FRAMEBUFFER_UNDEFINED = 0x8219,
GL_DEPTH_STENCIL_ATTACHMENT = 0x821A,
GL_INDEX = 0x8222,
GL_MAX_RENDERBUFFER_SIZE = 0x84E8,
GL_DEPTH_STENCIL = 0x84F9,
GL_UNSIGNED_INT_24_8 = 0x84FA,
GL_DEPTH24_STENCIL8 = 0x88F0,
GL_TEXTURE_STENCIL_SIZE = 0x88F1,
GL_UNSIGNED_NORMALIZED = 0x8C17,
//GL_SRGB = 0x8C40,
GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6,
GL_FRAMEBUFFER_BINDING = 0x8CA6,
GL_RENDERBUFFER_BINDING = 0x8CA7,
GL_READ_FRAMEBUFFER = 0x8CA8,
GL_DRAW_FRAMEBUFFER = 0x8CA9,
GL_READ_FRAMEBUFFER_BINDING = 0x8CAA,
GL_RENDERBUFFER_SAMPLES = 0x8CAB,
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0,
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1,
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2,
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3,
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4,
GL_FRAMEBUFFER_COMPLETE = 0x8CD5,
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6,
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7,
GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB,
GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC,
GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD,
GL_MAX_COLOR_ATTACHMENTS = 0x8CDF,
GL_COLOR_ATTACHMENT0 = 0x8CE0,
GL_COLOR_ATTACHMENT1 = 0x8CE1,
GL_COLOR_ATTACHMENT2 = 0x8CE2,
GL_COLOR_ATTACHMENT3 = 0x8CE3,
GL_COLOR_ATTACHMENT4 = 0x8CE4,
GL_COLOR_ATTACHMENT5 = 0x8CE5,
GL_COLOR_ATTACHMENT6 = 0x8CE6,
GL_COLOR_ATTACHMENT7 = 0x8CE7,
GL_COLOR_ATTACHMENT8 = 0x8CE8,
GL_COLOR_ATTACHMENT9 = 0x8CE9,
GL_COLOR_ATTACHMENT10 = 0x8CEA,
GL_COLOR_ATTACHMENT11 = 0x8CEB,
GL_COLOR_ATTACHMENT12 = 0x8CEC,
GL_COLOR_ATTACHMENT13 = 0x8CED,
GL_COLOR_ATTACHMENT14 = 0x8CEE,
GL_COLOR_ATTACHMENT15 = 0x8CEF,
GL_DEPTH_ATTACHMENT = 0x8D00,
GL_STENCIL_ATTACHMENT = 0x8D20,
GL_FRAMEBUFFER = 0x8D40,
GL_RENDERBUFFER = 0x8D41,
GL_RENDERBUFFER_WIDTH = 0x8D42,
GL_RENDERBUFFER_HEIGHT = 0x8D43,
GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44,
GL_STENCIL_INDEX1 = 0x8D46,
GL_STENCIL_INDEX4 = 0x8D47,
GL_STENCIL_INDEX8 = 0x8D48,
GL_STENCIL_INDEX16 = 0x8D49,
GL_RENDERBUFFER_RED_SIZE = 0x8D50,
GL_RENDERBUFFER_GREEN_SIZE = 0x8D51,
GL_RENDERBUFFER_BLUE_SIZE = 0x8D52,
GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53,
GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54,
GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55,
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56,
GL_MAX_SAMPLES = 0x8D57,
GL_FRAMEBUFFER_SRGB = 0x8DB9,
GL_LINES_ADJACENCY_ARB = 0xA,
GL_LINE_STRIP_ADJACENCY_ARB = 0xB,
GL_TRIANGLES_ADJACENCY_ARB = 0xC,
GL_TRIANGLE_STRIP_ADJACENCY_ARB = 0xD,
GL_PROGRAM_POINT_SIZE_ARB = 0x8642,
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 0x8C29,
//GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4,
GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 0x8DA7,
GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 0x8DA8,
GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 0x8DA9,
GL_GEOMETRY_SHADER_ARB = 0x8DD9,
GL_GEOMETRY_VERTICES_OUT_ARB = 0x8DDA,
GL_GEOMETRY_INPUT_TYPE_ARB = 0x8DDB,
GL_GEOMETRY_OUTPUT_TYPE_ARB = 0x8DDC,
GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 0x8DDD,
GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = 0x8DDE,
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 0x8DDF,
GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 0x8DE0,
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 0x8DE1,
GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257,
GL_PROGRAM_BINARY_LENGTH = 0x8741,
GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE,
GL_PROGRAM_BINARY_FORMATS = 0x87FF,
GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F,
GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A,
GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B,
GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C,
GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D,
GL_MAX_VERTEX_STREAMS = 0x8E71,
GL_DOUBLE_MAT2 = 0x8F46,
GL_DOUBLE_MAT3 = 0x8F47,
GL_DOUBLE_MAT4 = 0x8F48,
GL_DOUBLE_MAT2x3 = 0x8F49,
GL_DOUBLE_MAT2x4 = 0x8F4A,
GL_DOUBLE_MAT3x2 = 0x8F4B,
GL_DOUBLE_MAT3x4 = 0x8F4C,
GL_DOUBLE_MAT4x2 = 0x8F4D,
GL_DOUBLE_MAT4x3 = 0x8F4E,
GL_DOUBLE_VEC2 = 0x8FFC,
GL_DOUBLE_VEC3 = 0x8FFD,
GL_DOUBLE_VEC4 = 0x8FFE,
GL_HALF_FLOAT_ARB = 0x140B,
GL_HALF_FLOAT = 0x140B,
GL_CONSTANT_COLOR = 0x8001,
GL_ONE_MINUS_CONSTANT_COLOR = 0x8002,
GL_CONSTANT_ALPHA = 0x8003,
GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004,
GL_BLEND_COLOR = 0x8005,
GL_FUNC_ADD = 0x8006,
GL_MIN = 0x8007,
GL_MAX = 0x8008,
GL_BLEND_EQUATION = 0x8009,
GL_FUNC_SUBTRACT = 0x800A,
GL_FUNC_REVERSE_SUBTRACT = 0x800B,
GL_CONVOLUTION_1D = 0x8010,
GL_CONVOLUTION_2D = 0x8011,
GL_SEPARABLE_2D = 0x8012,
GL_CONVOLUTION_BORDER_MODE = 0x8013,
GL_CONVOLUTION_FILTER_SCALE = 0x8014,
GL_CONVOLUTION_FILTER_BIAS = 0x8015,
GL_REDUCE = 0x8016,
GL_CONVOLUTION_FORMAT = 0x8017,
GL_CONVOLUTION_WIDTH = 0x8018,
GL_CONVOLUTION_HEIGHT = 0x8019,
GL_MAX_CONVOLUTION_WIDTH = 0x801A,
GL_MAX_CONVOLUTION_HEIGHT = 0x801B,
GL_POST_CONVOLUTION_RED_SCALE = 0x801C,
GL_POST_CONVOLUTION_GREEN_SCALE = 0x801D,
GL_POST_CONVOLUTION_BLUE_SCALE = 0x801E,
GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801F,
GL_POST_CONVOLUTION_RED_BIAS = 0x8020,
GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021,
GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022,
GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023,
GL_HISTOGRAM = 0x8024,
GL_PROXY_HISTOGRAM = 0x8025,
GL_HISTOGRAM_WIDTH = 0x8026,
GL_HISTOGRAM_FORMAT = 0x8027,
GL_HISTOGRAM_RED_SIZE = 0x8028,
GL_HISTOGRAM_GREEN_SIZE = 0x8029,
GL_HISTOGRAM_BLUE_SIZE = 0x802A,
GL_HISTOGRAM_ALPHA_SIZE = 0x802B,
GL_HISTOGRAM_LUMINANCE_SIZE = 0x802C,
GL_HISTOGRAM_SINK = 0x802D,
GL_MINMAX = 0x802E,
GL_MINMAX_FORMAT = 0x802F,
GL_MINMAX_SINK = 0x8030,
GL_TABLE_TOO_LARGE = 0x8031,
GL_COLOR_MATRIX = 0x80B1,
GL_COLOR_MATRIX_STACK_DEPTH = 0x80B2,
GL_MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3,
GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4,
GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5,
GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6,
GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7,
GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8,
GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9,
GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA,
GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB,
GL_COLOR_TABLE = 0x80D0,
GL_POST_CONVOLUTION_COLOR_TABLE = 0x80D1,
GL_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2,
GL_PROXY_COLOR_TABLE = 0x80D3,
GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4,
GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5,
GL_COLOR_TABLE_SCALE = 0x80D6,
GL_COLOR_TABLE_BIAS = 0x80D7,
GL_COLOR_TABLE_FORMAT = 0x80D8,
GL_COLOR_TABLE_WIDTH = 0x80D9,
GL_COLOR_TABLE_RED_SIZE = 0x80DA,
GL_COLOR_TABLE_GREEN_SIZE = 0x80DB,
GL_COLOR_TABLE_BLUE_SIZE = 0x80DC,
GL_COLOR_TABLE_ALPHA_SIZE = 0x80DD,
GL_COLOR_TABLE_LUMINANCE_SIZE = 0x80DE,
GL_COLOR_TABLE_INTENSITY_SIZE = 0x80DF,
GL_IGNORE_BORDER = 0x8150,
GL_CONSTANT_BORDER = 0x8151,
GL_WRAP_BORDER = 0x8152,
GL_REPLICATE_BORDER = 0x8153,
GL_CONVOLUTION_BORDER_COLOR = 0x8154,
GL_PARAMETER_BUFFER_ARB = 0x80EE,
GL_PARAMETER_BUFFER_BINDING_ARB = 0x80EF,
GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = 0x88FE,
GL_NUM_SAMPLE_COUNTS = 0x9380,
GL_INTERNALFORMAT_SUPPORTED = 0x826F,
GL_INTERNALFORMAT_PREFERRED = 0x8270,
GL_INTERNALFORMAT_RED_SIZE = 0x8271,
GL_INTERNALFORMAT_GREEN_SIZE = 0x8272,
GL_INTERNALFORMAT_BLUE_SIZE = 0x8273,
GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274,
GL_INTERNALFORMAT_DEPTH_SIZE = 0x8275,
GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276,
GL_INTERNALFORMAT_SHARED_SIZE = 0x8277,
GL_INTERNALFORMAT_RED_TYPE = 0x8278,
GL_INTERNALFORMAT_GREEN_TYPE = 0x8279,
GL_INTERNALFORMAT_BLUE_TYPE = 0x827A,
GL_INTERNALFORMAT_ALPHA_TYPE = 0x827B,
GL_INTERNALFORMAT_DEPTH_TYPE = 0x827C,
GL_INTERNALFORMAT_STENCIL_TYPE = 0x827D,
GL_MAX_WIDTH = 0x827E,
GL_MAX_HEIGHT = 0x827F,
GL_MAX_DEPTH = 0x8280,
GL_MAX_LAYERS = 0x8281,
GL_MAX_COMBINED_DIMENSIONS = 0x8282,
GL_COLOR_COMPONENTS = 0x8283,
GL_DEPTH_COMPONENTS = 0x8284,
GL_STENCIL_COMPONENTS = 0x8285,
GL_COLOR_RENDERABLE = 0x8286,
GL_DEPTH_RENDERABLE = 0x8287,
GL_STENCIL_RENDERABLE = 0x8288,
GL_FRAMEBUFFER_RENDERABLE = 0x8289,
GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A,
GL_FRAMEBUFFER_BLEND = 0x828B,
GL_READ_PIXELS = 0x828C,
GL_READ_PIXELS_FORMAT = 0x828D,
GL_READ_PIXELS_TYPE = 0x828E,
GL_TEXTURE_IMAGE_FORMAT = 0x828F,
GL_TEXTURE_IMAGE_TYPE = 0x8290,
GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291,
GL_GET_TEXTURE_IMAGE_TYPE = 0x8292,
GL_MIPMAP = 0x8293,
GL_MANUAL_GENERATE_MIPMAP = 0x8294,
GL_AUTO_GENERATE_MIPMAP = 0x8295,
GL_COLOR_ENCODING = 0x8296,
GL_SRGB_READ = 0x8297,
GL_SRGB_WRITE = 0x8298,
GL_SRGB_DECODE_ARB = 0x8299,
GL_FILTER = 0x829A,
GL_VERTEX_TEXTURE = 0x829B,
GL_TESS_CONTROL_TEXTURE = 0x829C,
GL_TESS_EVALUATION_TEXTURE = 0x829D,
GL_GEOMETRY_TEXTURE = 0x829E,
GL_FRAGMENT_TEXTURE = 0x829F,
GL_COMPUTE_TEXTURE = 0x82A0,
GL_TEXTURE_SHADOW = 0x82A1,
GL_TEXTURE_GATHER = 0x82A2,
GL_TEXTURE_GATHER_SHADOW = 0x82A3,
GL_SHADER_IMAGE_LOAD = 0x82A4,
GL_SHADER_IMAGE_STORE = 0x82A5,
GL_SHADER_IMAGE_ATOMIC = 0x82A6,
GL_IMAGE_TEXEL_SIZE = 0x82A7,
GL_IMAGE_COMPATIBILITY_CLASS = 0x82A8,
GL_IMAGE_PIXEL_FORMAT = 0x82A9,
GL_IMAGE_PIXEL_TYPE = 0x82AA,
GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC,
GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD,
GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE,
GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF,
GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1,
GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2,
GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3,
GL_CLEAR_BUFFER = 0x82B4,
GL_TEXTURE_VIEW = 0x82B5,
GL_VIEW_COMPATIBILITY_CLASS = 0x82B6,
GL_FULL_SUPPORT = 0x82B7,
GL_CAVEAT_SUPPORT = 0x82B8,
GL_IMAGE_CLASS_4_X_32 = 0x82B9,
GL_IMAGE_CLASS_2_X_32 = 0x82BA,
GL_IMAGE_CLASS_1_X_32 = 0x82BB,
GL_IMAGE_CLASS_4_X_16 = 0x82BC,
GL_IMAGE_CLASS_2_X_16 = 0x82BD,
GL_IMAGE_CLASS_1_X_16 = 0x82BE,
GL_IMAGE_CLASS_4_X_8 = 0x82BF,
GL_IMAGE_CLASS_2_X_8 = 0x82C0,
GL_IMAGE_CLASS_1_X_8 = 0x82C1,
GL_IMAGE_CLASS_11_11_10 = 0x82C2,
GL_IMAGE_CLASS_10_10_10_2 = 0x82C3,
GL_VIEW_CLASS_128_BITS = 0x82C4,
GL_VIEW_CLASS_96_BITS = 0x82C5,
GL_VIEW_CLASS_64_BITS = 0x82C6,
GL_VIEW_CLASS_48_BITS = 0x82C7,
GL_VIEW_CLASS_32_BITS = 0x82C8,
GL_VIEW_CLASS_24_BITS = 0x82C9,
GL_VIEW_CLASS_16_BITS = 0x82CA,
GL_VIEW_CLASS_8_BITS = 0x82CB,
GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC,
GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD,
GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE,
GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF,
GL_VIEW_CLASS_RGTC1_RED = 0x82D0,
GL_VIEW_CLASS_RGTC2_RG = 0x82D1,
GL_VIEW_CLASS_BPTC_UNORM = 0x82D2,
GL_VIEW_CLASS_BPTC_FLOAT = 0x82D3,
GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BC,
//GL_MAP_READ_BIT = 0x0001,
//GL_MAP_WRITE_BIT = 0x0002,
GL_MAP_INVALIDATE_RANGE_BIT = 0x0004,
GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008,
GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010,
GL_MAP_UNSYNCHRONIZED_BIT = 0x0020,
GL_MATRIX_PALETTE_ARB = 0x8840,
GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x8841,
GL_MAX_PALETTE_MATRICES_ARB = 0x8842,
GL_CURRENT_PALETTE_MATRIX_ARB = 0x8843,
GL_MATRIX_INDEX_ARRAY_ARB = 0x8844,
GL_CURRENT_MATRIX_INDEX_ARB = 0x8845,
GL_MATRIX_INDEX_ARRAY_SIZE_ARB = 0x8846,
GL_MATRIX_INDEX_ARRAY_TYPE_ARB = 0x8847,
GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = 0x8848,
GL_MATRIX_INDEX_ARRAY_POINTER_ARB = 0x8849,
GL_MULTISAMPLE_ARB = 0x809D,
GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x809E,
GL_SAMPLE_ALPHA_TO_ONE_ARB = 0x809F,
GL_SAMPLE_COVERAGE_ARB = 0x80A0,
GL_SAMPLE_BUFFERS_ARB = 0x80A8,
GL_SAMPLES_ARB = 0x80A9,
GL_SAMPLE_COVERAGE_VALUE_ARB = 0x80AA,
GL_SAMPLE_COVERAGE_INVERT_ARB = 0x80AB,
GL_MULTISAMPLE_BIT_ARB = 0x20000000,
GL_TEXTURE0_ARB = 0x84C0,
GL_TEXTURE1_ARB = 0x84C1,
GL_TEXTURE2_ARB = 0x84C2,
GL_TEXTURE3_ARB = 0x84C3,
GL_TEXTURE4_ARB = 0x84C4,
GL_TEXTURE5_ARB = 0x84C5,
GL_TEXTURE6_ARB = 0x84C6,
GL_TEXTURE7_ARB = 0x84C7,
GL_TEXTURE8_ARB = 0x84C8,
GL_TEXTURE9_ARB = 0x84C9,
GL_TEXTURE10_ARB = 0x84CA,
GL_TEXTURE11_ARB = 0x84CB,
GL_TEXTURE12_ARB = 0x84CC,
GL_TEXTURE13_ARB = 0x84CD,
GL_TEXTURE14_ARB = 0x84CE,
GL_TEXTURE15_ARB = 0x84CF,
GL_TEXTURE16_ARB = 0x84D0,
GL_TEXTURE17_ARB = 0x84D1,
GL_TEXTURE18_ARB = 0x84D2,
GL_TEXTURE19_ARB = 0x84D3,
GL_TEXTURE20_ARB = 0x84D4,
GL_TEXTURE21_ARB = 0x84D5,
GL_TEXTURE22_ARB = 0x84D6,
GL_TEXTURE23_ARB = 0x84D7,
GL_TEXTURE24_ARB = 0x84D8,
GL_TEXTURE25_ARB = 0x84D9,
GL_TEXTURE26_ARB = 0x84DA,
GL_TEXTURE27_ARB = 0x84DB,
GL_TEXTURE28_ARB = 0x84DC,
GL_TEXTURE29_ARB = 0x84DD,
GL_TEXTURE30_ARB = 0x84DE,
GL_TEXTURE31_ARB = 0x84DF,
GL_ACTIVE_TEXTURE_ARB = 0x84E0,
GL_CLIENT_ACTIVE_TEXTURE_ARB = 0x84E1,
GL_MAX_TEXTURE_UNITS_ARB = 0x84E2,
GL_QUERY_COUNTER_BITS_ARB = 0x8864,
GL_CURRENT_QUERY_ARB = 0x8865,
GL_QUERY_RESULT_ARB = 0x8866,
GL_QUERY_RESULT_AVAILABLE_ARB = 0x8867,
GL_SAMPLES_PASSED_ARB = 0x8914,
GL_ANY_SAMPLES_PASSED = 0x8C2F,
GL_VERTICES_SUBMITTED_ARB = 0x82EE,
GL_PRIMITIVES_SUBMITTED_ARB = 0x82EF,
GL_VERTEX_SHADER_INVOCATIONS_ARB = 0x82F0,
GL_TESS_CONTROL_SHADER_PATCHES_ARB = 0x82F1,
GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB = 0x82F2,
GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = 0x82F3,
GL_FRAGMENT_SHADER_INVOCATIONS_ARB = 0x82F4,
GL_COMPUTE_SHADER_INVOCATIONS_ARB = 0x82F5,
GL_CLIPPING_INPUT_PRIMITIVES_ARB = 0x82F6,
GL_CLIPPING_OUTPUT_PRIMITIVES_ARB = 0x82F7,
//GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F,
GL_PIXEL_PACK_BUFFER_ARB = 0x88EB,
GL_PIXEL_UNPACK_BUFFER_ARB = 0x88EC,
GL_PIXEL_PACK_BUFFER_BINDING_ARB = 0x88ED,
GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = 0x88EF,
GL_POINT_SIZE_MIN_ARB = 0x8126,
GL_POINT_SIZE_MAX_ARB = 0x8127,
GL_POINT_FADE_THRESHOLD_SIZE_ARB = 0x8128,
GL_POINT_DISTANCE_ATTENUATION_ARB = 0x8129,
GL_POINT_SPRITE_ARB = 0x8861,
GL_COORD_REPLACE_ARB = 0x8862,
GL_UNIFORM = 0x92E1,
GL_UNIFORM_BLOCK = 0x92E2,
GL_PROGRAM_INPUT = 0x92E3,
GL_PROGRAM_OUTPUT = 0x92E4,
GL_BUFFER_VARIABLE = 0x92E5,
GL_SHADER_STORAGE_BLOCK = 0x92E6,
GL_IS_PER_PATCH = 0x92E7,
GL_VERTEX_SUBROUTINE = 0x92E8,
GL_TESS_CONTROL_SUBROUTINE = 0x92E9,
GL_TESS_EVALUATION_SUBROUTINE = 0x92EA,
GL_GEOMETRY_SUBROUTINE = 0x92EB,
GL_FRAGMENT_SUBROUTINE = 0x92EC,
GL_COMPUTE_SUBROUTINE = 0x92ED,
GL_VERTEX_SUBROUTINE_UNIFORM = 0x92EE,
GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF,
GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0,
GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1,
GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2,
GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92F3,
GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4,
GL_ACTIVE_RESOURCES = 0x92F5,
GL_MAX_NAME_LENGTH = 0x92F6,
GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7,
GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8,
GL_NAME_LENGTH = 0x92F9,
GL_TYPE = 0x92FA,
GL_ARRAY_SIZE = 0x92FB,
GL_OFFSET = 0x92FC,
GL_BLOCK_INDEX = 0x92FD,
GL_ARRAY_STRIDE = 0x92FE,
GL_MATRIX_STRIDE = 0x92FF,
GL_IS_ROW_MAJOR = 0x9300,
GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301,
GL_BUFFER_BINDING = 0x9302,
GL_BUFFER_DATA_SIZE = 0x9303,
GL_NUM_ACTIVE_VARIABLES = 0x9304,
GL_ACTIVE_VARIABLES = 0x9305,
GL_REFERENCED_BY_VERTEX_SHADER = 0x9306,
GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307,
GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308,
GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309,
GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930A,
GL_REFERENCED_BY_COMPUTE_SHADER = 0x930B,
GL_TOP_LEVEL_ARRAY_SIZE = 0x930C,
GL_TOP_LEVEL_ARRAY_STRIDE = 0x930D,
GL_LOCATION = 0x930E,
GL_LOCATION_INDEX = 0x930F,
GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C,
GL_FIRST_VERTEX_CONVENTION = 0x8E4D,
GL_LAST_VERTEX_CONVENTION = 0x8E4E,
GL_PROVOKING_VERTEX = 0x8E4F,
GL_QUERY_BUFFER_BARRIER_BIT = 0x00008000,
GL_QUERY_BUFFER = 0x9192,
GL_QUERY_BUFFER_BINDING = 0x9193,
GL_QUERY_RESULT_NO_WAIT = 0x9194,
GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 0x00000004,
GL_LOSE_CONTEXT_ON_RESET_ARB = 0x8252,
GL_GUILTY_CONTEXT_RESET_ARB = 0x8253,
GL_INNOCENT_CONTEXT_RESET_ARB = 0x8254,
GL_UNKNOWN_CONTEXT_RESET_ARB = 0x8255,
GL_RESET_NOTIFICATION_STRATEGY_ARB = 0x8256,
GL_NO_RESET_NOTIFICATION_ARB = 0x8261,
GL_SAMPLE_SHADING_ARB = 0x8C36,
GL_MIN_SAMPLE_SHADING_VALUE_ARB = 0x8C37,
GL_SAMPLER_BINDING = 0x8919,
GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F,
//GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F,
GL_VERTEX_SHADER_BIT = 0x00000001,
GL_FRAGMENT_SHADER_BIT = 0x00000002,
GL_GEOMETRY_SHADER_BIT = 0x00000004,
GL_TESS_CONTROL_SHADER_BIT = 0x00000008,
GL_TESS_EVALUATION_SHADER_BIT = 0x00000010,
GL_PROGRAM_SEPARABLE = 0x8258,
GL_ACTIVE_PROGRAM = 0x8259,
GL_PROGRAM_PIPELINE_BINDING = 0x825A,
GL_ALL_SHADER_BITS = 0xFFFFFFFF,
GL_ATOMIC_COUNTER_BUFFER = 0x92C0,
GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1,
GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2,
GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3,
GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4,
GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5,
GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6,
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7,
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8,
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9,
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA,
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB,
GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC,
GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD,
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE,
GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF,
GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0,
GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1,
GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2,
GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3,
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4,
GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5,
GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6,
GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7,
GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8,
GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9,
GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA,
GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB,
GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC,
GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001,
GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002,
GL_UNIFORM_BARRIER_BIT = 0x00000004,
GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008,
GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020,
GL_COMMAND_BARRIER_BIT = 0x00000040,
GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080,
GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100,
GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200,
GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400,
GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800,
GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000,
GL_MAX_IMAGE_UNITS = 0x8F38,
GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39,
GL_IMAGE_BINDING_NAME = 0x8F3A,
GL_IMAGE_BINDING_LEVEL = 0x8F3B,
GL_IMAGE_BINDING_LAYERED = 0x8F3C,
GL_IMAGE_BINDING_LAYER = 0x8F3D,
GL_IMAGE_BINDING_ACCESS = 0x8F3E,
GL_IMAGE_1D = 0x904C,
GL_IMAGE_2D = 0x904D,
GL_IMAGE_3D = 0x904E,
GL_IMAGE_2D_RECT = 0x904F,
GL_IMAGE_CUBE = 0x9050,
GL_IMAGE_BUFFER = 0x9051,
GL_IMAGE_1D_ARRAY = 0x9052,
GL_IMAGE_2D_ARRAY = 0x9053,
GL_IMAGE_CUBE_MAP_ARRAY = 0x9054,
GL_IMAGE_2D_MULTISAMPLE = 0x9055,
GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056,
GL_INT_IMAGE_1D = 0x9057,
GL_INT_IMAGE_2D = 0x9058,
GL_INT_IMAGE_3D = 0x9059,
GL_INT_IMAGE_2D_RECT = 0x905A,
GL_INT_IMAGE_CUBE = 0x905B,
GL_INT_IMAGE_BUFFER = 0x905C,
GL_INT_IMAGE_1D_ARRAY = 0x905D,
GL_INT_IMAGE_2D_ARRAY = 0x905E,
GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x905F,
GL_INT_IMAGE_2D_MULTISAMPLE = 0x9060,
GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061,
GL_UNSIGNED_INT_IMAGE_1D = 0x9062,
GL_UNSIGNED_INT_IMAGE_2D = 0x9063,
GL_UNSIGNED_INT_IMAGE_3D = 0x9064,
GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065,
GL_UNSIGNED_INT_IMAGE_CUBE = 0x9066,
GL_UNSIGNED_INT_IMAGE_BUFFER = 0x9067,
GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068,
GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069,
GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A,
GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B,
GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C,
GL_MAX_IMAGE_SAMPLES = 0x906D,
GL_IMAGE_BINDING_FORMAT = 0x906E,
GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7,
GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8,
GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9,
GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA,
GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB,
GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC,
GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD,
GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE,
GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF,
GL_ALL_BARRIER_BITS = 0xFFFFFFFF,
GL_PROGRAM_OBJECT_ARB = 0x8B40,
GL_SHADER_OBJECT_ARB = 0x8B48,
GL_OBJECT_TYPE_ARB = 0x8B4E,
GL_OBJECT_SUBTYPE_ARB = 0x8B4F,
GL_FLOAT_VEC2_ARB = 0x8B50,
GL_FLOAT_VEC3_ARB = 0x8B51,
GL_FLOAT_VEC4_ARB = 0x8B52,
GL_INT_VEC2_ARB = 0x8B53,
GL_INT_VEC3_ARB = 0x8B54,
GL_INT_VEC4_ARB = 0x8B55,
GL_BOOL_ARB = 0x8B56,
GL_BOOL_VEC2_ARB = 0x8B57,
GL_BOOL_VEC3_ARB = 0x8B58,
GL_BOOL_VEC4_ARB = 0x8B59,
GL_FLOAT_MAT2_ARB = 0x8B5A,
GL_FLOAT_MAT3_ARB = 0x8B5B,
GL_FLOAT_MAT4_ARB = 0x8B5C,
GL_SAMPLER_1D_ARB = 0x8B5D,
GL_SAMPLER_2D_ARB = 0x8B5E,
GL_SAMPLER_3D_ARB = 0x8B5F,
GL_SAMPLER_CUBE_ARB = 0x8B60,
GL_SAMPLER_1D_SHADOW_ARB = 0x8B61,
GL_SAMPLER_2D_SHADOW_ARB = 0x8B62,
GL_SAMPLER_2D_RECT_ARB = 0x8B63,
GL_SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64,
GL_OBJECT_DELETE_STATUS_ARB = 0x8B80,
GL_OBJECT_COMPILE_STATUS_ARB = 0x8B81,
GL_OBJECT_LINK_STATUS_ARB = 0x8B82,
GL_OBJECT_VALIDATE_STATUS_ARB = 0x8B83,
GL_OBJECT_INFO_LOG_LENGTH_ARB = 0x8B84,
GL_OBJECT_ATTACHED_OBJECTS_ARB = 0x8B85,
GL_OBJECT_ACTIVE_UNIFORMS_ARB = 0x8B86,
GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x8B87,
GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x8B88,
GL_SHADER_STORAGE_BARRIER_BIT = 0x2000,
GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39,
GL_SHADER_STORAGE_BUFFER = 0x90D2,
GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3,
GL_SHADER_STORAGE_BUFFER_START = 0x90D4,
GL_SHADER_STORAGE_BUFFER_SIZE = 0x90D5,
GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6,
GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7,
GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8,
GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9,
GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA,
GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB,
GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC,
GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD,
GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE,
GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF,
GL_ACTIVE_SUBROUTINES = 0x8DE5,
GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6,
GL_MAX_SUBROUTINES = 0x8DE7,
GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8,
GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47,
GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48,
GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49,
GL_NUM_COMPATIBLE_SUBROUTINES = 0x8E4A,
GL_COMPATIBLE_SUBROUTINES = 0x8E4B,
GL_SHADING_LANGUAGE_VERSION_ARB = 0x8B8C,
GL_SHADER_INCLUDE_ARB = 0x8DAE,
GL_NAMED_STRING_LENGTH_ARB = 0x8DE9,
GL_NAMED_STRING_TYPE_ARB = 0x8DEA,
GL_TEXTURE_COMPARE_MODE_ARB = 0x884C,
GL_TEXTURE_COMPARE_FUNC_ARB = 0x884D,
GL_COMPARE_R_TO_TEXTURE_ARB = 0x884E,
GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x80BF,
GL_SPARSE_STORAGE_BIT_ARB = 0x0400,
GL_SPARSE_BUFFER_PAGE_SIZE_ARB = 0x82F8,
GL_VIRTUAL_PAGE_SIZE_X_ARB = 0x9195,
GL_VIRTUAL_PAGE_SIZE_Y_ARB = 0x9196,
GL_VIRTUAL_PAGE_SIZE_Z_ARB = 0x9197,
GL_MAX_SPARSE_TEXTURE_SIZE_ARB = 0x9198,
GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 0x9199,
GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = 0x919A,
GL_TEXTURE_SPARSE_ARB = 0x91A6,
GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = 0x91A7,
GL_NUM_VIRTUAL_PAGE_SIZES_ARB = 0x91A8,
GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 0x91A9,
GL_NUM_SPARSE_LEVELS_ARB = 0x91AA,
GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA,
GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001,
GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111,
GL_OBJECT_TYPE = 0x9112,
GL_SYNC_CONDITION = 0x9113,
GL_SYNC_STATUS = 0x9114,
GL_SYNC_FLAGS = 0x9115,
GL_SYNC_FENCE = 0x9116,
GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117,
GL_UNSIGNALED = 0x9118,
GL_SIGNALED = 0x9119,
GL_ALREADY_SIGNALED = 0x911A,
GL_TIMEOUT_EXPIRED = 0x911B,
GL_CONDITION_SATISFIED = 0x911C,
GL_WAIT_FAILED = 0x911D,
//GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF,
GL_PATCHES = 0xE,
GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0,
GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1,
GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C,
GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D,
GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E,
GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F,
GL_PATCH_VERTICES = 0x8E72,
GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73,
GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74,
GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75,
GL_TESS_GEN_MODE = 0x8E76,
GL_TESS_GEN_SPACING = 0x8E77,
GL_TESS_GEN_VERTEX_ORDER = 0x8E78,
GL_TESS_GEN_POINT_MODE = 0x8E79,
GL_ISOLINES = 0x8E7A,
GL_FRACTIONAL_ODD = 0x8E7B,
GL_FRACTIONAL_EVEN = 0x8E7C,
GL_MAX_PATCH_VERTICES = 0x8E7D,
GL_MAX_TESS_GEN_LEVEL = 0x8E7E,
GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F,
GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80,
GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81,
GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82,
GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83,
GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84,
GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85,
GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86,
GL_TESS_EVALUATION_SHADER = 0x8E87,
GL_TESS_CONTROL_SHADER = 0x8E88,
GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89,
GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A,
GL_CLAMP_TO_BORDER_ARB = 0x812D,
GL_TEXTURE_BUFFER_ARB = 0x8C2A,
GL_MAX_TEXTURE_BUFFER_SIZE_ARB = 0x8C2B,
GL_TEXTURE_BINDING_BUFFER_ARB = 0x8C2C,
GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = 0x8C2D,
GL_TEXTURE_BUFFER_FORMAT_ARB = 0x8C2E,
GL_TEXTURE_BUFFER_OFFSET = 0x919D,
GL_TEXTURE_BUFFER_SIZE = 0x919E,
GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F,
GL_COMPRESSED_ALPHA_ARB = 0x84E9,
GL_COMPRESSED_LUMINANCE_ARB = 0x84EA,
GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 0x84EB,
GL_COMPRESSED_INTENSITY_ARB = 0x84EC,
GL_COMPRESSED_RGB_ARB = 0x84ED,
GL_COMPRESSED_RGBA_ARB = 0x84EE,
GL_TEXTURE_COMPRESSION_HINT_ARB = 0x84EF,
GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 0x86A0,
GL_TEXTURE_COMPRESSED_ARB = 0x86A1,
GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A2,
GL_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A3,
GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = 0x8E8C,
GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 0x8E8D,
GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 0x8E8E,
GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 0x8E8F,
GL_COMPRESSED_RED_RGTC1 = 0x8DBB,
GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC,
GL_COMPRESSED_RG_RGTC2 = 0x8DBD,
GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE,
GL_NORMAL_MAP_ARB = 0x8511,
GL_REFLECTION_MAP_ARB = 0x8512,
GL_TEXTURE_CUBE_MAP_ARB = 0x8513,
GL_TEXTURE_BINDING_CUBE_MAP_ARB = 0x8514,
GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x8515,
GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x8516,
GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x8517,
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x8518,
GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x8519,
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x851A,
GL_PROXY_TEXTURE_CUBE_MAP_ARB = 0x851B,
GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x851C,
GL_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x9009,
GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 0x900A,
GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x900B,
GL_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900C,
GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 0x900D,
GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900E,
GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900F,
GL_SUBTRACT_ARB = 0x84E7,
GL_COMBINE_ARB = 0x8570,
GL_COMBINE_RGB_ARB = 0x8571,
GL_COMBINE_ALPHA_ARB = 0x8572,
GL_RGB_SCALE_ARB = 0x8573,
GL_ADD_SIGNED_ARB = 0x8574,
GL_INTERPOLATE_ARB = 0x8575,
GL_CONSTANT_ARB = 0x8576,
GL_PRIMARY_COLOR_ARB = 0x8577,
GL_PREVIOUS_ARB = 0x8578,
GL_SOURCE0_RGB_ARB = 0x8580,
GL_SOURCE1_RGB_ARB = 0x8581,
GL_SOURCE2_RGB_ARB = 0x8582,
GL_SOURCE0_ALPHA_ARB = 0x8588,
GL_SOURCE1_ALPHA_ARB = 0x8589,
GL_SOURCE2_ALPHA_ARB = 0x858A,
GL_OPERAND0_RGB_ARB = 0x8590,
GL_OPERAND1_RGB_ARB = 0x8591,
GL_OPERAND2_RGB_ARB = 0x8592,
GL_OPERAND0_ALPHA_ARB = 0x8598,
GL_OPERAND1_ALPHA_ARB = 0x8599,
GL_OPERAND2_ALPHA_ARB = 0x859A,
GL_DOT3_RGB_ARB = 0x86AE,
GL_DOT3_RGBA_ARB = 0x86AF,
GL_RGBA32F_ARB = 0x8814,
GL_RGB32F_ARB = 0x8815,
GL_ALPHA32F_ARB = 0x8816,
GL_INTENSITY32F_ARB = 0x8817,
GL_LUMINANCE32F_ARB = 0x8818,
GL_LUMINANCE_ALPHA32F_ARB = 0x8819,
GL_RGBA16F_ARB = 0x881A,
GL_RGB16F_ARB = 0x881B,
GL_ALPHA16F_ARB = 0x881C,
GL_INTENSITY16F_ARB = 0x881D,
GL_LUMINANCE16F_ARB = 0x881E,
GL_LUMINANCE_ALPHA16F_ARB = 0x881F,
GL_TEXTURE_RED_TYPE_ARB = 0x8C10,
GL_TEXTURE_GREEN_TYPE_ARB = 0x8C11,
GL_TEXTURE_BLUE_TYPE_ARB = 0x8C12,
GL_TEXTURE_ALPHA_TYPE_ARB = 0x8C13,
GL_TEXTURE_LUMINANCE_TYPE_ARB = 0x8C14,
GL_TEXTURE_INTENSITY_TYPE_ARB = 0x8C15,
GL_TEXTURE_DEPTH_TYPE_ARB = 0x8C16,
GL_UNSIGNED_NORMALIZED_ARB = 0x8C17,
GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5E,
GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5F,
GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = 0x8F9F,
GL_MIRROR_CLAMP_TO_EDGE = 0x8743,
GL_MIRRORED_REPEAT_ARB = 0x8370,
GL_SAMPLE_POSITION = 0x8E50,
GL_SAMPLE_MASK = 0x8E51,
GL_SAMPLE_MASK_VALUE = 0x8E52,
GL_MAX_SAMPLE_MASK_WORDS = 0x8E59,
GL_TEXTURE_2D_MULTISAMPLE = 0x9100,
GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101,
GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102,
GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103,
GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104,
GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105,
GL_TEXTURE_SAMPLES = 0x9106,
GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107,
GL_SAMPLER_2D_MULTISAMPLE = 0x9108,
GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109,
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A,
GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B,
GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C,
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D,
GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E,
GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F,
GL_MAX_INTEGER_SAMPLES = 0x9110,
GL_TEXTURE_RECTANGLE_ARB = 0x84F5,
GL_TEXTURE_BINDING_RECTANGLE_ARB = 0x84F6,
GL_PROXY_TEXTURE_RECTANGLE_ARB = 0x84F7,
GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x84F8,
//GL_SAMPLER_2D_RECT_ARB = 0x8B63,
//GL_SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64,
GL_COMPRESSED_RED = 0x8225,
GL_COMPRESSED_RG = 0x8226,
GL_RG = 0x8227,
GL_RG_INTEGER = 0x8228,
GL_R8 = 0x8229,
GL_R16 = 0x822A,
GL_RG8 = 0x822B,
GL_RG16 = 0x822C,
GL_R16F = 0x822D,
GL_R32F = 0x822E,
GL_RG16F = 0x822F,
GL_RG32F = 0x8230,
GL_R8I = 0x8231,
GL_R8UI = 0x8232,
GL_R16I = 0x8233,
GL_R16UI = 0x8234,
GL_R32I = 0x8235,
GL_R32UI = 0x8236,
GL_RG8I = 0x8237,
//GL_RG8UI = 0x8238,
GL_RG16I = 0x8239,
//GL_RG16UI = 0x823A,
GL_RG32I = 0x823B,
GL_RG32UI = 0x823C,
//GL_RGB10_A2UI = 0x906F,
//GL_STENCIL_INDEX = 0x1901,
//GL_STENCIL_INDEX8 = 0x8D48,
GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F,
GL_TEXTURE_SWIZZLE_R = 0x8E42,
GL_TEXTURE_SWIZZLE_G = 0x8E43,
GL_TEXTURE_SWIZZLE_B = 0x8E44,
GL_TEXTURE_SWIZZLE_A = 0x8E45,
GL_TEXTURE_SWIZZLE_RGBA = 0x8E46,
GL_TEXTURE_VIEW_MIN_LEVEL = 0x82DB,
GL_TEXTURE_VIEW_NUM_LEVELS = 0x82DC,
GL_TEXTURE_VIEW_MIN_LAYER = 0x82DD,
GL_TEXTURE_VIEW_NUM_LAYERS = 0x82DE,
//GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF,
GL_TIME_ELAPSED = 0x88BF,
GL_TIMESTAMP = 0x8E28,
GL_TRANSFORM_FEEDBACK = 0x8E22,
GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23,
GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24,
GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25,
GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70,
//GL_MAX_VERTEX_STREAMS = 0x8E71,
GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB = 0x82EC,
GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = 0x82ED,
GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = 0x84E3,
GL_TRANSPOSE_PROJECTION_MATRIX_ARB = 0x84E4,
GL_TRANSPOSE_TEXTURE_MATRIX_ARB = 0x84E5,
GL_TRANSPOSE_COLOR_MATRIX_ARB = 0x84E6,
GL_UNIFORM_BUFFER = 0x8A11,
GL_UNIFORM_BUFFER_BINDING = 0x8A28,
GL_UNIFORM_BUFFER_START = 0x8A29,
GL_UNIFORM_BUFFER_SIZE = 0x8A2A,
GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B,
GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C,
GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D,
GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E,
GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F,
GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30,
GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31,
GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32,
GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33,
GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34,
GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35,
GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36,
GL_UNIFORM_TYPE = 0x8A37,
GL_UNIFORM_SIZE = 0x8A38,
GL_UNIFORM_NAME_LENGTH = 0x8A39,
GL_UNIFORM_BLOCK_INDEX = 0x8A3A,
GL_UNIFORM_OFFSET = 0x8A3B,
GL_UNIFORM_ARRAY_STRIDE = 0x8A3C,
GL_UNIFORM_MATRIX_STRIDE = 0x8A3D,
GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E,
GL_UNIFORM_BLOCK_BINDING = 0x8A3F,
GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40,
GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41,
GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42,
GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43,
GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44,
GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45,
GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46,
GL_INVALID_INDEX = 0xFFFFFFFF,
//GL_BGRA = 0x80E1,
GL_VERTEX_ARRAY_BINDING = 0x85B5,
GL_VERTEX_ATTRIB_BINDING = 0x82D4,
GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5,
GL_VERTEX_BINDING_DIVISOR = 0x82D6,
GL_VERTEX_BINDING_OFFSET = 0x82D7,
GL_VERTEX_BINDING_STRIDE = 0x82D8,
GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9,
GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA,
GL_VERTEX_BINDING_BUFFER = 0x8F4F,
GL_MODELVIEW0_ARB = 0x1700,
GL_MODELVIEW1_ARB = 0x850A,
GL_MAX_VERTEX_UNITS_ARB = 0x86A4,
GL_ACTIVE_VERTEX_UNITS_ARB = 0x86A5,
GL_WEIGHT_SUM_UNITY_ARB = 0x86A6,
GL_VERTEX_BLEND_ARB = 0x86A7,
GL_CURRENT_WEIGHT_ARB = 0x86A8,
GL_WEIGHT_ARRAY_TYPE_ARB = 0x86A9,
GL_WEIGHT_ARRAY_STRIDE_ARB = 0x86AA,
GL_WEIGHT_ARRAY_SIZE_ARB = 0x86AB,
GL_WEIGHT_ARRAY_POINTER_ARB = 0x86AC,
GL_WEIGHT_ARRAY_ARB = 0x86AD,
GL_MODELVIEW2_ARB = 0x8722,
GL_MODELVIEW3_ARB = 0x8723,
GL_MODELVIEW4_ARB = 0x8724,
GL_MODELVIEW5_ARB = 0x8725,
GL_MODELVIEW6_ARB = 0x8726,
GL_MODELVIEW7_ARB = 0x8727,
GL_MODELVIEW8_ARB = 0x8728,
GL_MODELVIEW9_ARB = 0x8729,
GL_MODELVIEW10_ARB = 0x872A,
GL_MODELVIEW11_ARB = 0x872B,
GL_MODELVIEW12_ARB = 0x872C,
GL_MODELVIEW13_ARB = 0x872D,
GL_MODELVIEW14_ARB = 0x872E,
GL_MODELVIEW15_ARB = 0x872F,
GL_MODELVIEW16_ARB = 0x8730,
GL_MODELVIEW17_ARB = 0x8731,
GL_MODELVIEW18_ARB = 0x8732,
GL_MODELVIEW19_ARB = 0x8733,
GL_MODELVIEW20_ARB = 0x8734,
GL_MODELVIEW21_ARB = 0x8735,
GL_MODELVIEW22_ARB = 0x8736,
GL_MODELVIEW23_ARB = 0x8737,
GL_MODELVIEW24_ARB = 0x8738,
GL_MODELVIEW25_ARB = 0x8739,
GL_MODELVIEW26_ARB = 0x873A,
GL_MODELVIEW27_ARB = 0x873B,
GL_MODELVIEW28_ARB = 0x873C,
GL_MODELVIEW29_ARB = 0x873D,
GL_MODELVIEW30_ARB = 0x873E,
GL_MODELVIEW31_ARB = 0x873F,
GL_BUFFER_SIZE_ARB = 0x8764,
GL_BUFFER_USAGE_ARB = 0x8765,
GL_ARRAY_BUFFER_ARB = 0x8892,
GL_ELEMENT_ARRAY_BUFFER_ARB = 0x8893,
GL_ARRAY_BUFFER_BINDING_ARB = 0x8894,
GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x8895,
GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x8896,
GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x8897,
GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x8898,
GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 0x8899,
GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x889A,
GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x889B,
GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x889C,
GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x889D,
GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x889E,
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x889F,
GL_READ_ONLY_ARB = 0x88B8,
GL_WRITE_ONLY_ARB = 0x88B9,
GL_READ_WRITE_ARB = 0x88BA,
GL_BUFFER_ACCESS_ARB = 0x88BB,
GL_BUFFER_MAPPED_ARB = 0x88BC,
GL_BUFFER_MAP_POINTER_ARB = 0x88BD,
GL_STREAM_DRAW_ARB = 0x88E0,
GL_STREAM_READ_ARB = 0x88E1,
GL_STREAM_COPY_ARB = 0x88E2,
GL_STATIC_DRAW_ARB = 0x88E4,
GL_STATIC_READ_ARB = 0x88E5,
GL_STATIC_COPY_ARB = 0x88E6,
GL_DYNAMIC_DRAW_ARB = 0x88E8,
GL_DYNAMIC_READ_ARB = 0x88E9,
GL_DYNAMIC_COPY_ARB = 0x88EA,
GL_COLOR_SUM_ARB = 0x8458,
GL_VERTEX_PROGRAM_ARB = 0x8620,
GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x8622,
GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x8623,
GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x8624,
GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x8625,
GL_CURRENT_VERTEX_ATTRIB_ARB = 0x8626,
GL_PROGRAM_LENGTH_ARB = 0x8627,
GL_PROGRAM_STRING_ARB = 0x8628,
GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x862E,
GL_MAX_PROGRAM_MATRICES_ARB = 0x862F,
GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 0x8640,
GL_CURRENT_MATRIX_ARB = 0x8641,
GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 0x8642,
GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 0x8643,
GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645,
GL_PROGRAM_ERROR_POSITION_ARB = 0x864B,
GL_PROGRAM_BINDING_ARB = 0x8677,
GL_MAX_VERTEX_ATTRIBS_ARB = 0x8869,
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x886A,
GL_PROGRAM_ERROR_STRING_ARB = 0x8874,
GL_PROGRAM_FORMAT_ASCII_ARB = 0x8875,
GL_PROGRAM_FORMAT_ARB = 0x8876,
GL_PROGRAM_INSTRUCTIONS_ARB = 0x88A0,
GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 0x88A1,
GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A2,
GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A3,
GL_PROGRAM_TEMPORARIES_ARB = 0x88A4,
GL_MAX_PROGRAM_TEMPORARIES_ARB = 0x88A5,
GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A6,
GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A7,
GL_PROGRAM_PARAMETERS_ARB = 0x88A8,
GL_MAX_PROGRAM_PARAMETERS_ARB = 0x88A9,
GL_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AA,
GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AB,
GL_PROGRAM_ATTRIBS_ARB = 0x88AC,
GL_MAX_PROGRAM_ATTRIBS_ARB = 0x88AD,
GL_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AE,
GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AF,
GL_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B0,
GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B1,
GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B2,
GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B3,
GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x88B4,
GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x88B5,
GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x88B6,
GL_TRANSPOSE_CURRENT_MATRIX_ARB = 0x88B7,
GL_MATRIX0_ARB = 0x88C0,
GL_MATRIX1_ARB = 0x88C1,
GL_MATRIX2_ARB = 0x88C2,
GL_MATRIX3_ARB = 0x88C3,
GL_MATRIX4_ARB = 0x88C4,
GL_MATRIX5_ARB = 0x88C5,
GL_MATRIX6_ARB = 0x88C6,
GL_MATRIX7_ARB = 0x88C7,
GL_MATRIX8_ARB = 0x88C8,
GL_MATRIX9_ARB = 0x88C9,
GL_MATRIX10_ARB = 0x88CA,
GL_MATRIX11_ARB = 0x88CB,
GL_MATRIX12_ARB = 0x88CC,
GL_MATRIX13_ARB = 0x88CD,
GL_MATRIX14_ARB = 0x88CE,
GL_MATRIX15_ARB = 0x88CF,
GL_MATRIX16_ARB = 0x88D0,
GL_MATRIX17_ARB = 0x88D1,
GL_MATRIX18_ARB = 0x88D2,
GL_MATRIX19_ARB = 0x88D3,
GL_MATRIX20_ARB = 0x88D4,
GL_MATRIX21_ARB = 0x88D5,
GL_MATRIX22_ARB = 0x88D6,
GL_MATRIX23_ARB = 0x88D7,
GL_MATRIX24_ARB = 0x88D8,
GL_MATRIX25_ARB = 0x88D9,
GL_MATRIX26_ARB = 0x88DA,
GL_MATRIX27_ARB = 0x88DB,
GL_MATRIX28_ARB = 0x88DC,
GL_MATRIX29_ARB = 0x88DD,
GL_MATRIX30_ARB = 0x88DE,
GL_MATRIX31_ARB = 0x88DF,
GL_VERTEX_SHADER_ARB = 0x8B31,
GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 0x8B4A,
GL_MAX_VARYING_FLOATS_ARB = 0x8B4B,
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x8B4C,
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 0x8B4D,
GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 0x8B89,
GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 0x8B8A,
//GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B,
GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368,
GL_INT_2_10_10_10_REV = 0x8D9F,
//GL_DEPTH_RANGE = 0x0B70,
//GL_VIEWPORT = 0x0BA2,
//GL_SCISSOR_BOX = 0x0C10,
//GL_SCISSOR_TEST = 0x0C11,
GL_MAX_VIEWPORTS = 0x825B,
GL_VIEWPORT_SUBPIXEL_BITS = 0x825C,
GL_VIEWPORT_BOUNDS_RANGE = 0x825D,
GL_LAYER_PROVOKING_VERTEX = 0x825E,
GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F,
GL_UNDEFINED_VERTEX = 0x8260,
//GL_FIRST_VERTEX_CONVENTION = 0x8E4D,
//GL_LAST_VERTEX_CONVENTION = 0x8E4E,
//GL_PROVOKING_VERTEX = 0x8E4F,
GL_TEXTURE_POINT_MODE_ATIX = 0x60B0,
GL_TEXTURE_POINT_ONE_COORD_ATIX = 0x60B1,
GL_TEXTURE_POINT_SPRITE_ATIX = 0x60B2,
GL_POINT_SPRITE_CULL_MODE_ATIX = 0x60B3,
GL_POINT_SPRITE_CULL_CENTER_ATIX = 0x60B4,
GL_POINT_SPRITE_CULL_CLIP_ATIX = 0x60B5,
GL_MODULATE_ADD_ATIX = 0x8744,
GL_MODULATE_SIGNED_ADD_ATIX = 0x8745,
GL_MODULATE_SUBTRACT_ATIX = 0x8746,
GL_SECONDARY_COLOR_ATIX = 0x8747,
GL_TEXTURE_OUTPUT_RGB_ATIX = 0x8748,
GL_TEXTURE_OUTPUT_ALPHA_ATIX = 0x8749,
GL_OUTPUT_POINT_SIZE_ATIX = 0x610E,
GL_MAX_DRAW_BUFFERS_ATI = 0x8824,
GL_DRAW_BUFFER0_ATI = 0x8825,
GL_DRAW_BUFFER1_ATI = 0x8826,
GL_DRAW_BUFFER2_ATI = 0x8827,
GL_DRAW_BUFFER3_ATI = 0x8828,
GL_DRAW_BUFFER4_ATI = 0x8829,
GL_DRAW_BUFFER5_ATI = 0x882A,
GL_DRAW_BUFFER6_ATI = 0x882B,
GL_DRAW_BUFFER7_ATI = 0x882C,
GL_DRAW_BUFFER8_ATI = 0x882D,
GL_DRAW_BUFFER9_ATI = 0x882E,
GL_DRAW_BUFFER10_ATI = 0x882F,
GL_DRAW_BUFFER11_ATI = 0x8830,
GL_DRAW_BUFFER12_ATI = 0x8831,
GL_DRAW_BUFFER13_ATI = 0x8832,
GL_DRAW_BUFFER14_ATI = 0x8833,
GL_DRAW_BUFFER15_ATI = 0x8834,
GL_ELEMENT_ARRAY_ATI = 0x8768,
GL_ELEMENT_ARRAY_TYPE_ATI = 0x8769,
GL_ELEMENT_ARRAY_POINTER_ATI = 0x876A,
GL_BUMP_ROT_MATRIX_ATI = 0x8775,
GL_BUMP_ROT_MATRIX_SIZE_ATI = 0x8776,
GL_BUMP_NUM_TEX_UNITS_ATI = 0x8777,
GL_BUMP_TEX_UNITS_ATI = 0x8778,
GL_DUDV_ATI = 0x8779,
GL_DU8DV8_ATI = 0x877A,
GL_BUMP_ENVMAP_ATI = 0x877B,
GL_BUMP_TARGET_ATI = 0x877C,
GL_2X_BIT_ATI = 0x00000001,
GL_RED_BIT_ATI = 0x00000001,
GL_4X_BIT_ATI = 0x00000002,
GL_COMP_BIT_ATI = 0x00000002,
GL_GREEN_BIT_ATI = 0x00000002,
GL_8X_BIT_ATI = 0x00000004,
GL_BLUE_BIT_ATI = 0x00000004,
GL_NEGATE_BIT_ATI = 0x00000004,
GL_BIAS_BIT_ATI = 0x00000008,
GL_HALF_BIT_ATI = 0x00000008,
GL_QUARTER_BIT_ATI = 0x00000010,
GL_EIGHTH_BIT_ATI = 0x00000020,
GL_SATURATE_BIT_ATI = 0x00000040,
GL_FRAGMENT_SHADER_ATI = 0x8920,
GL_REG_0_ATI = 0x8921,
GL_REG_1_ATI = 0x8922,
GL_REG_2_ATI = 0x8923,
GL_REG_3_ATI = 0x8924,
GL_REG_4_ATI = 0x8925,
GL_REG_5_ATI = 0x8926,
GL_CON_0_ATI = 0x8941,
GL_CON_1_ATI = 0x8942,
GL_CON_2_ATI = 0x8943,
GL_CON_3_ATI = 0x8944,
GL_CON_4_ATI = 0x8945,
GL_CON_5_ATI = 0x8946,
GL_CON_6_ATI = 0x8947,
GL_CON_7_ATI = 0x8948,
GL_MOV_ATI = 0x8961,
GL_ADD_ATI = 0x8963,
GL_MUL_ATI = 0x8964,
GL_SUB_ATI = 0x8965,
GL_DOT3_ATI = 0x8966,
GL_DOT4_ATI = 0x8967,
GL_MAD_ATI = 0x8968,
GL_LERP_ATI = 0x8969,
GL_CND_ATI = 0x896A,
GL_CND0_ATI = 0x896B,
GL_DOT2_ADD_ATI = 0x896C,
GL_SECONDARY_INTERPOLATOR_ATI = 0x896D,
GL_NUM_FRAGMENT_REGISTERS_ATI = 0x896E,
GL_NUM_FRAGMENT_CONSTANTS_ATI = 0x896F,
GL_NUM_PASSES_ATI = 0x8970,
GL_NUM_INSTRUCTIONS_PER_PASS_ATI = 0x8971,
GL_NUM_INSTRUCTIONS_TOTAL_ATI = 0x8972,
GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 0x8973,
GL_NUM_LOOPBACK_COMPONENTS_ATI = 0x8974,
GL_COLOR_ALPHA_PAIRING_ATI = 0x8975,
GL_SWIZZLE_STR_ATI = 0x8976,
GL_SWIZZLE_STQ_ATI = 0x8977,
GL_SWIZZLE_STR_DR_ATI = 0x8978,
GL_SWIZZLE_STQ_DQ_ATI = 0x8979,
GL_SWIZZLE_STRQ_ATI = 0x897A,
GL_SWIZZLE_STRQ_DQ_ATI = 0x897B,
GL_VBO_FREE_MEMORY_ATI = 0x87FB,
GL_TEXTURE_FREE_MEMORY_ATI = 0x87FC,
GL_RENDERBUFFER_FREE_MEMORY_ATI = 0x87FD,
GL_PN_TRIANGLES_ATI = 0x87F0,
GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F1,
GL_PN_TRIANGLES_POINT_MODE_ATI = 0x87F2,
GL_PN_TRIANGLES_NORMAL_MODE_ATI = 0x87F3,
GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F4,
GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x87F5,
GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 0x87F6,
GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x87F7,
GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x87F8,
GL_STENCIL_BACK_FUNC_ATI = 0x8800,
GL_STENCIL_BACK_FAIL_ATI = 0x8801,
GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 0x8802,
GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 0x8803,
GL_TEXT_FRAGMENT_SHADER_ATI = 0x8200,
GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI = 0x8837,
GL_MODULATE_ADD_ATI = 0x8744,
GL_MODULATE_SIGNED_ADD_ATI = 0x8745,
GL_MODULATE_SUBTRACT_ATI = 0x8746,
GL_RGBA_FLOAT32_ATI = 0x8814,
GL_RGB_FLOAT32_ATI = 0x8815,
GL_ALPHA_FLOAT32_ATI = 0x8816,
GL_INTENSITY_FLOAT32_ATI = 0x8817,
GL_LUMINANCE_FLOAT32_ATI = 0x8818,
GL_LUMINANCE_ALPHA_FLOAT32_ATI = 0x8819,
GL_RGBA_FLOAT16_ATI = 0x881A,
GL_RGB_FLOAT16_ATI = 0x881B,
GL_ALPHA_FLOAT16_ATI = 0x881C,
GL_INTENSITY_FLOAT16_ATI = 0x881D,
GL_LUMINANCE_FLOAT16_ATI = 0x881E,
GL_LUMINANCE_ALPHA_FLOAT16_ATI = 0x881F,
GL_MIRROR_CLAMP_ATI = 0x8742,
GL_MIRROR_CLAMP_TO_EDGE_ATI = 0x8743,
GL_STATIC_ATI = 0x8760,
GL_DYNAMIC_ATI = 0x8761,
GL_PRESERVE_ATI = 0x8762,
GL_DISCARD_ATI = 0x8763,
GL_OBJECT_BUFFER_SIZE_ATI = 0x8764,
GL_OBJECT_BUFFER_USAGE_ATI = 0x8765,
GL_ARRAY_OBJECT_BUFFER_ATI = 0x8766,
GL_ARRAY_OBJECT_OFFSET_ATI = 0x8767,
GL_MAX_VERTEX_STREAMS_ATI = 0x876B,
GL_VERTEX_SOURCE_ATI = 0x876C,
GL_VERTEX_STREAM0_ATI = 0x876D,
GL_VERTEX_STREAM1_ATI = 0x876E,
GL_VERTEX_STREAM2_ATI = 0x876F,
GL_VERTEX_STREAM3_ATI = 0x8770,
GL_VERTEX_STREAM4_ATI = 0x8771,
GL_VERTEX_STREAM5_ATI = 0x8772,
GL_VERTEX_STREAM6_ATI = 0x8773,
GL_VERTEX_STREAM7_ATI = 0x8774,
GL_422_EXT = 0x80CC,
GL_422_REV_EXT = 0x80CD,
GL_422_AVERAGE_EXT = 0x80CE,
GL_422_REV_AVERAGE_EXT = 0x80CF,
GL_CG_VERTEX_SHADER_EXT = 0x890E,
GL_CG_FRAGMENT_SHADER_EXT = 0x890F,
GL_ABGR_EXT = 0x8000,
GL_BGR_EXT = 0x80E0,
GL_BGRA_EXT = 0x80E1,
GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 0x8DE2,
GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 0x8DE3,
GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 0x8DE4,
GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = 0x8DED,
GL_UNIFORM_BUFFER_EXT = 0x8DEE,
GL_UNIFORM_BUFFER_BINDING_EXT = 0x8DEF,
GL_CONSTANT_COLOR_EXT = 0x8001,
GL_ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002,
GL_CONSTANT_ALPHA_EXT = 0x8003,
GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004,
GL_BLEND_COLOR_EXT = 0x8005,
GL_BLEND_EQUATION_RGB_EXT = 0x8009,
GL_BLEND_EQUATION_ALPHA_EXT = 0x883D,
GL_BLEND_DST_RGB_EXT = 0x80C8,
GL_BLEND_SRC_RGB_EXT = 0x80C9,
GL_BLEND_DST_ALPHA_EXT = 0x80CA,
GL_BLEND_SRC_ALPHA_EXT = 0x80CB,
GL_FUNC_ADD_EXT = 0x8006,
GL_MIN_EXT = 0x8007,
GL_MAX_EXT = 0x8008,
GL_BLEND_EQUATION_EXT = 0x8009,
GL_FUNC_SUBTRACT_EXT = 0x800A,
GL_FUNC_REVERSE_SUBTRACT_EXT = 0x800B,
GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0,
GL_CMYK_EXT = 0x800C,
GL_CMYKA_EXT = 0x800D,
GL_PACK_CMYK_HINT_EXT = 0x800E,
GL_UNPACK_CMYK_HINT_EXT = 0x800F,
GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x81A8,
GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x81A9,
GL_CONVOLUTION_1D_EXT = 0x8010,
GL_CONVOLUTION_2D_EXT = 0x8011,
GL_SEPARABLE_2D_EXT = 0x8012,
GL_CONVOLUTION_BORDER_MODE_EXT = 0x8013,
GL_CONVOLUTION_FILTER_SCALE_EXT = 0x8014,
GL_CONVOLUTION_FILTER_BIAS_EXT = 0x8015,
GL_REDUCE_EXT = 0x8016,
GL_CONVOLUTION_FORMAT_EXT = 0x8017,
GL_CONVOLUTION_WIDTH_EXT = 0x8018,
GL_CONVOLUTION_HEIGHT_EXT = 0x8019,
GL_MAX_CONVOLUTION_WIDTH_EXT = 0x801A,
GL_MAX_CONVOLUTION_HEIGHT_EXT = 0x801B,
GL_POST_CONVOLUTION_RED_SCALE_EXT = 0x801C,
GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D,
GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E,
GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F,
GL_POST_CONVOLUTION_RED_BIAS_EXT = 0x8020,
GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021,
GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022,
GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023,
GL_TANGENT_ARRAY_EXT = 0x8439,
GL_BINORMAL_ARRAY_EXT = 0x843A,
GL_CURRENT_TANGENT_EXT = 0x843B,
GL_CURRENT_BINORMAL_EXT = 0x843C,
GL_TANGENT_ARRAY_TYPE_EXT = 0x843E,
GL_TANGENT_ARRAY_STRIDE_EXT = 0x843F,
GL_BINORMAL_ARRAY_TYPE_EXT = 0x8440,
GL_BINORMAL_ARRAY_STRIDE_EXT = 0x8441,
GL_TANGENT_ARRAY_POINTER_EXT = 0x8442,
GL_BINORMAL_ARRAY_POINTER_EXT = 0x8443,
GL_MAP1_TANGENT_EXT = 0x8444,
GL_MAP2_TANGENT_EXT = 0x8445,
GL_MAP1_BINORMAL_EXT = 0x8446,
GL_MAP2_BINORMAL_EXT = 0x8447,
GL_CULL_VERTEX_EXT = 0x81AA,
GL_CULL_VERTEX_EYE_POSITION_EXT = 0x81AB,
GL_CULL_VERTEX_OBJECT_POSITION_EXT = 0x81AC,
GL_PROGRAM_PIPELINE_OBJECT_EXT = 0x8A4F,
GL_PROGRAM_OBJECT_EXT = 0x8B40,
GL_SHADER_OBJECT_EXT = 0x8B48,
GL_BUFFER_OBJECT_EXT = 0x9151,
GL_QUERY_OBJECT_EXT = 0x9153,
GL_VERTEX_ARRAY_OBJECT_EXT = 0x9154,
GL_DEPTH_BOUNDS_TEST_EXT = 0x8890,
GL_DEPTH_BOUNDS_EXT = 0x8891,
GL_PROGRAM_MATRIX_EXT = 0x8E2D,
GL_TRANSPOSE_PROGRAM_MATRIX_EXT = 0x8E2E,
GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = 0x8E2F,
GL_MAX_ELEMENTS_VERTICES_EXT = 0x80E8,
GL_MAX_ELEMENTS_INDICES_EXT = 0x80E9,
GL_FOG_COORDINATE_SOURCE_EXT = 0x8450,
GL_FOG_COORDINATE_EXT = 0x8451,
GL_FRAGMENT_DEPTH_EXT = 0x8452,
GL_CURRENT_FOG_COORDINATE_EXT = 0x8453,
GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 0x8454,
GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 0x8455,
GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 0x8456,
GL_FOG_COORDINATE_ARRAY_EXT = 0x8457,
GL_FRAGMENT_LIGHTING_EXT = 0x8400,
GL_FRAGMENT_COLOR_MATERIAL_EXT = 0x8401,
GL_FRAGMENT_COLOR_MATERIAL_FACE_EXT = 0x8402,
GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_EXT = 0x8403,
GL_MAX_FRAGMENT_LIGHTS_EXT = 0x8404,
GL_MAX_ACTIVE_LIGHTS_EXT = 0x8405,
GL_CURRENT_RASTER_NORMAL_EXT = 0x8406,
GL_LIGHT_ENV_MODE_EXT = 0x8407,
GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_EXT = 0x8408,
GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_EXT = 0x8409,
GL_FRAGMENT_LIGHT_MODEL_AMBIENT_EXT = 0x840A,
GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_EXT = 0x840B,
GL_FRAGMENT_LIGHT0_EXT = 0x840C,
GL_FRAGMENT_LIGHT7_EXT = 0x8413,
GL_DRAW_FRAMEBUFFER_BINDING_EXT = 0x8CA6,
GL_READ_FRAMEBUFFER_EXT = 0x8CA8,
GL_DRAW_FRAMEBUFFER_EXT = 0x8CA9,
GL_READ_FRAMEBUFFER_BINDING_EXT = 0x8CAA,
GL_RENDERBUFFER_SAMPLES_EXT = 0x8CAB,
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 0x8D56,
GL_MAX_SAMPLES_EXT = 0x8D57,
GL_SCALED_RESOLVE_FASTEST_EXT = 0x90BA,
GL_SCALED_RESOLVE_NICEST_EXT = 0x90BB,
GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 0x0506,
GL_MAX_RENDERBUFFER_SIZE_EXT = 0x84E8,
GL_FRAMEBUFFER_BINDING_EXT = 0x8CA6,
GL_RENDERBUFFER_BINDING_EXT = 0x8CA7,
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x8CD0,
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x8CD1,
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x8CD2,
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x8CD3,
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x8CD4,
GL_FRAMEBUFFER_COMPLETE_EXT = 0x8CD5,
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 0x8CD6,
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 0x8CD7,
GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x8CD9,
GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x8CDA,
GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 0x8CDB,
GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x8CDC,
GL_FRAMEBUFFER_UNSUPPORTED_EXT = 0x8CDD,
GL_MAX_COLOR_ATTACHMENTS_EXT = 0x8CDF,
GL_COLOR_ATTACHMENT0_EXT = 0x8CE0,
GL_COLOR_ATTACHMENT1_EXT = 0x8CE1,
GL_COLOR_ATTACHMENT2_EXT = 0x8CE2,
GL_COLOR_ATTACHMENT3_EXT = 0x8CE3,
GL_COLOR_ATTACHMENT4_EXT = 0x8CE4,
GL_COLOR_ATTACHMENT5_EXT = 0x8CE5,
GL_COLOR_ATTACHMENT6_EXT = 0x8CE6,
GL_COLOR_ATTACHMENT7_EXT = 0x8CE7,
GL_COLOR_ATTACHMENT8_EXT = 0x8CE8,
GL_COLOR_ATTACHMENT9_EXT = 0x8CE9,
GL_COLOR_ATTACHMENT10_EXT = 0x8CEA,
GL_COLOR_ATTACHMENT11_EXT = 0x8CEB,
GL_COLOR_ATTACHMENT12_EXT = 0x8CEC,
GL_COLOR_ATTACHMENT13_EXT = 0x8CED,
GL_COLOR_ATTACHMENT14_EXT = 0x8CEE,
GL_COLOR_ATTACHMENT15_EXT = 0x8CEF,
GL_DEPTH_ATTACHMENT_EXT = 0x8D00,
GL_STENCIL_ATTACHMENT_EXT = 0x8D20,
GL_FRAMEBUFFER_EXT = 0x8D40,
GL_RENDERBUFFER_EXT = 0x8D41,
GL_RENDERBUFFER_WIDTH_EXT = 0x8D42,
GL_RENDERBUFFER_HEIGHT_EXT = 0x8D43,
GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 0x8D44,
GL_STENCIL_INDEX1_EXT = 0x8D46,
GL_STENCIL_INDEX4_EXT = 0x8D47,
GL_STENCIL_INDEX8_EXT = 0x8D48,
GL_STENCIL_INDEX16_EXT = 0x8D49,
GL_RENDERBUFFER_RED_SIZE_EXT = 0x8D50,
GL_RENDERBUFFER_GREEN_SIZE_EXT = 0x8D51,
GL_RENDERBUFFER_BLUE_SIZE_EXT = 0x8D52,
GL_RENDERBUFFER_ALPHA_SIZE_EXT = 0x8D53,
GL_RENDERBUFFER_DEPTH_SIZE_EXT = 0x8D54,
GL_RENDERBUFFER_STENCIL_SIZE_EXT = 0x8D55,
GL_FRAMEBUFFER_SRGB_EXT = 0x8DB9,
GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x8DBA,
GL_LINES_ADJACENCY_EXT = 0xA,
GL_LINE_STRIP_ADJACENCY_EXT = 0xB,
GL_TRIANGLES_ADJACENCY_EXT = 0xC,
GL_TRIANGLE_STRIP_ADJACENCY_EXT = 0xD,
GL_PROGRAM_POINT_SIZE_EXT = 0x8642,
GL_MAX_VARYING_COMPONENTS_EXT = 0x8B4B,
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 0x8C29,
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 0x8CD4,
GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 0x8DA7,
GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 0x8DA8,
GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 0x8DA9,
GL_GEOMETRY_SHADER_EXT = 0x8DD9,
GL_GEOMETRY_VERTICES_OUT_EXT = 0x8DDA,
GL_GEOMETRY_INPUT_TYPE_EXT = 0x8DDB,
GL_GEOMETRY_OUTPUT_TYPE_EXT = 0x8DDC,
GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 0x8DDD,
GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = 0x8DDE,
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8DDF,
GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 0x8DE0,
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8DE1,
GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = 0x88FD,
GL_SAMPLER_1D_ARRAY_EXT = 0x8DC0,
GL_SAMPLER_2D_ARRAY_EXT = 0x8DC1,
GL_SAMPLER_BUFFER_EXT = 0x8DC2,
GL_SAMPLER_1D_ARRAY_SHADOW_EXT = 0x8DC3,
GL_SAMPLER_2D_ARRAY_SHADOW_EXT = 0x8DC4,
GL_SAMPLER_CUBE_SHADOW_EXT = 0x8DC5,
GL_UNSIGNED_INT_VEC2_EXT = 0x8DC6,
GL_UNSIGNED_INT_VEC3_EXT = 0x8DC7,
GL_UNSIGNED_INT_VEC4_EXT = 0x8DC8,
GL_INT_SAMPLER_1D_EXT = 0x8DC9,
GL_INT_SAMPLER_2D_EXT = 0x8DCA,
GL_INT_SAMPLER_3D_EXT = 0x8DCB,
GL_INT_SAMPLER_CUBE_EXT = 0x8DCC,
GL_INT_SAMPLER_2D_RECT_EXT = 0x8DCD,
GL_INT_SAMPLER_1D_ARRAY_EXT = 0x8DCE,
GL_INT_SAMPLER_2D_ARRAY_EXT = 0x8DCF,
GL_INT_SAMPLER_BUFFER_EXT = 0x8DD0,
GL_UNSIGNED_INT_SAMPLER_1D_EXT = 0x8DD1,
GL_UNSIGNED_INT_SAMPLER_2D_EXT = 0x8DD2,
GL_UNSIGNED_INT_SAMPLER_3D_EXT = 0x8DD3,
GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = 0x8DD4,
GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 0x8DD5,
GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 0x8DD6,
GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 0x8DD7,
GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 0x8DD8,
GL_HISTOGRAM_EXT = 0x8024,
GL_PROXY_HISTOGRAM_EXT = 0x8025,
GL_HISTOGRAM_WIDTH_EXT = 0x8026,
GL_HISTOGRAM_FORMAT_EXT = 0x8027,
GL_HISTOGRAM_RED_SIZE_EXT = 0x8028,
GL_HISTOGRAM_GREEN_SIZE_EXT = 0x8029,
GL_HISTOGRAM_BLUE_SIZE_EXT = 0x802A,
GL_HISTOGRAM_ALPHA_SIZE_EXT = 0x802B,
GL_HISTOGRAM_LUMINANCE_SIZE_EXT = 0x802C,
GL_HISTOGRAM_SINK_EXT = 0x802D,
GL_MINMAX_EXT = 0x802E,
GL_MINMAX_FORMAT_EXT = 0x802F,
GL_MINMAX_SINK_EXT = 0x8030,
GL_FRAGMENT_MATERIAL_EXT = 0x8349,
GL_FRAGMENT_NORMAL_EXT = 0x834A,
GL_FRAGMENT_COLOR_EXT = 0x834C,
GL_ATTENUATION_EXT = 0x834D,
GL_SHADOW_ATTENUATION_EXT = 0x834E,
GL_TEXTURE_APPLICATION_MODE_EXT = 0x834F,
GL_TEXTURE_LIGHT_EXT = 0x8350,
GL_TEXTURE_MATERIAL_FACE_EXT = 0x8351,
GL_TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352,
GL_MULTISAMPLE_EXT = 0x809D,
GL_SAMPLE_ALPHA_TO_MASK_EXT = 0x809E,
GL_SAMPLE_ALPHA_TO_ONE_EXT = 0x809F,
GL_SAMPLE_MASK_EXT = 0x80A0,
GL_1PASS_EXT = 0x80A1,
GL_2PASS_0_EXT = 0x80A2,
GL_2PASS_1_EXT = 0x80A3,
GL_4PASS_0_EXT = 0x80A4,
GL_4PASS_1_EXT = 0x80A5,
GL_4PASS_2_EXT = 0x80A6,
GL_4PASS_3_EXT = 0x80A7,
GL_SAMPLE_BUFFERS_EXT = 0x80A8,
GL_SAMPLES_EXT = 0x80A9,
GL_SAMPLE_MASK_VALUE_EXT = 0x80AA,
GL_SAMPLE_MASK_INVERT_EXT = 0x80AB,
GL_SAMPLE_PATTERN_EXT = 0x80AC,
GL_MULTISAMPLE_BIT_EXT = 0x20000000,
GL_DEPTH_STENCIL_EXT = 0x84F9,
GL_UNSIGNED_INT_24_8_EXT = 0x84FA,
GL_DEPTH24_STENCIL8_EXT = 0x88F0,
GL_TEXTURE_STENCIL_SIZE_EXT = 0x88F1,
GL_R11F_G11F_B10F_EXT = 0x8C3A,
GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = 0x8C3B,
GL_RGBA_SIGNED_COMPONENTS_EXT = 0x8C3C,
GL_UNSIGNED_BYTE_3_3_2_EXT = 0x8032,
GL_UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033,
GL_UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034,
GL_UNSIGNED_INT_8_8_8_8_EXT = 0x8035,
GL_UNSIGNED_INT_10_10_10_2_EXT = 0x8036,
//GL_TEXTURE_1D = 0x0DE0,
//GL_TEXTURE_2D = 0x0DE1,
//GL_PROXY_TEXTURE_1D = 0x8063,
//GL_PROXY_TEXTURE_2D = 0x8064,
GL_COLOR_TABLE_FORMAT_EXT = 0x80D8,
GL_COLOR_TABLE_WIDTH_EXT = 0x80D9,
GL_COLOR_TABLE_RED_SIZE_EXT = 0x80DA,
GL_COLOR_TABLE_GREEN_SIZE_EXT = 0x80DB,
GL_COLOR_TABLE_BLUE_SIZE_EXT = 0x80DC,
GL_COLOR_TABLE_ALPHA_SIZE_EXT = 0x80DD,
GL_COLOR_TABLE_LUMINANCE_SIZE_EXT = 0x80DE,
GL_COLOR_TABLE_INTENSITY_SIZE_EXT = 0x80DF,
//GL_COLOR_INDEX1_EXT = 0x80E2,
//GL_COLOR_INDEX2_EXT = 0x80E3,
//GL_COLOR_INDEX4_EXT = 0x80E4,
//GL_COLOR_INDEX8_EXT = 0x80E5,
//GL_COLOR_INDEX12_EXT = 0x80E6,
//GL_COLOR_INDEX16_EXT = 0x80E7,
GL_TEXTURE_INDEX_SIZE_EXT = 0x80ED,
//GL_TEXTURE_CUBE_MAP_ARB = 0x8513,
//GL_PROXY_TEXTURE_CUBE_MAP_ARB = 0x851B,
GL_PIXEL_PACK_BUFFER_EXT = 0x88EB,
GL_PIXEL_UNPACK_BUFFER_EXT = 0x88EC,
GL_PIXEL_PACK_BUFFER_BINDING_EXT = 0x88ED,
GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x88EF,
GL_PIXEL_TRANSFORM_2D_EXT = 0x8330,
GL_PIXEL_MAG_FILTER_EXT = 0x8331,
GL_PIXEL_MIN_FILTER_EXT = 0x8332,
GL_PIXEL_CUBIC_WEIGHT_EXT = 0x8333,
GL_CUBIC_EXT = 0x8334,
GL_AVERAGE_EXT = 0x8335,
GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8336,
GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8337,
GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x8338,
GL_POINT_SIZE_MIN_EXT = 0x8126,
GL_POINT_SIZE_MAX_EXT = 0x8127,
GL_POINT_FADE_THRESHOLD_SIZE_EXT = 0x8128,
GL_DISTANCE_ATTENUATION_EXT = 0x8129,
GL_POLYGON_OFFSET_EXT = 0x8037,
GL_POLYGON_OFFSET_FACTOR_EXT = 0x8038,
GL_POLYGON_OFFSET_BIAS_EXT = 0x8039,
GL_POLYGON_OFFSET_CLAMP_EXT = 0x8E1B,
GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = 0x8E4C,
GL_FIRST_VERTEX_CONVENTION_EXT = 0x8E4D,
GL_LAST_VERTEX_CONVENTION_EXT = 0x8E4E,
GL_PROVOKING_VERTEX_EXT = 0x8E4F,
GL_COLOR_SAMPLES_NV = 0x8E20,
GL_RASTER_MULTISAMPLE_EXT = 0x9327,
GL_RASTER_SAMPLES_EXT = 0x9328,
GL_MAX_RASTER_SAMPLES_EXT = 0x9329,
GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = 0x932A,
GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = 0x932B,
GL_EFFECTIVE_RASTER_SAMPLES_EXT = 0x932C,
GL_DEPTH_SAMPLES_NV = 0x932D,
GL_STENCIL_SAMPLES_NV = 0x932E,
GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = 0x932F,
GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = 0x9330,
GL_COVERAGE_MODULATION_TABLE_NV = 0x9331,
GL_COVERAGE_MODULATION_NV = 0x9332,
GL_COVERAGE_MODULATION_TABLE_SIZE_NV = 0x9333,
GL_RESCALE_NORMAL_EXT = 0x803A,
GL_COLOR_SUM_EXT = 0x8458,
GL_CURRENT_SECONDARY_COLOR_EXT = 0x8459,
GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 0x845A,
GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 0x845B,
GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 0x845C,
GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 0x845D,
GL_SECONDARY_COLOR_ARRAY_EXT = 0x845E,
GL_ACTIVE_PROGRAM_EXT = 0x8B8D,
GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8,
GL_SINGLE_COLOR_EXT = 0x81F9,
GL_SEPARATE_SPECULAR_COLOR_EXT = 0x81FA,
GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = 0x00000001,
GL_ELEMENT_ARRAY_BARRIER_BIT_EXT = 0x00000002,
GL_UNIFORM_BARRIER_BIT_EXT = 0x00000004,
GL_TEXTURE_FETCH_BARRIER_BIT_EXT = 0x00000008,
GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = 0x00000020,
GL_COMMAND_BARRIER_BIT_EXT = 0x00000040,
GL_PIXEL_BUFFER_BARRIER_BIT_EXT = 0x00000080,
GL_TEXTURE_UPDATE_BARRIER_BIT_EXT = 0x00000100,
GL_BUFFER_UPDATE_BARRIER_BIT_EXT = 0x00000200,
GL_FRAMEBUFFER_BARRIER_BIT_EXT = 0x00000400,
GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = 0x00000800,
GL_ATOMIC_COUNTER_BARRIER_BIT_EXT = 0x00001000,
GL_MAX_IMAGE_UNITS_EXT = 0x8F38,
GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = 0x8F39,
GL_IMAGE_BINDING_NAME_EXT = 0x8F3A,
GL_IMAGE_BINDING_LEVEL_EXT = 0x8F3B,
GL_IMAGE_BINDING_LAYERED_EXT = 0x8F3C,
GL_IMAGE_BINDING_LAYER_EXT = 0x8F3D,
GL_IMAGE_BINDING_ACCESS_EXT = 0x8F3E,
GL_IMAGE_1D_EXT = 0x904C,
GL_IMAGE_2D_EXT = 0x904D,
GL_IMAGE_3D_EXT = 0x904E,
GL_IMAGE_2D_RECT_EXT = 0x904F,
GL_IMAGE_CUBE_EXT = 0x9050,
GL_IMAGE_BUFFER_EXT = 0x9051,
GL_IMAGE_1D_ARRAY_EXT = 0x9052,
GL_IMAGE_2D_ARRAY_EXT = 0x9053,
GL_IMAGE_CUBE_MAP_ARRAY_EXT = 0x9054,
GL_IMAGE_2D_MULTISAMPLE_EXT = 0x9055,
GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9056,
GL_INT_IMAGE_1D_EXT = 0x9057,
GL_INT_IMAGE_2D_EXT = 0x9058,
GL_INT_IMAGE_3D_EXT = 0x9059,
GL_INT_IMAGE_2D_RECT_EXT = 0x905A,
GL_INT_IMAGE_CUBE_EXT = 0x905B,
GL_INT_IMAGE_BUFFER_EXT = 0x905C,
GL_INT_IMAGE_1D_ARRAY_EXT = 0x905D,
GL_INT_IMAGE_2D_ARRAY_EXT = 0x905E,
GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x905F,
GL_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x9060,
GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9061,
GL_UNSIGNED_INT_IMAGE_1D_EXT = 0x9062,
GL_UNSIGNED_INT_IMAGE_2D_EXT = 0x9063,
GL_UNSIGNED_INT_IMAGE_3D_EXT = 0x9064,
GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT = 0x9065,
GL_UNSIGNED_INT_IMAGE_CUBE_EXT = 0x9066,
GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = 0x9067,
GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = 0x9068,
GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = 0x9069,
GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x906A,
GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x906B,
GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x906C,
GL_MAX_IMAGE_SAMPLES_EXT = 0x906D,
GL_IMAGE_BINDING_FORMAT_EXT = 0x906E,
GL_ALL_BARRIER_BITS_EXT = 0xFFFFFFFF,
GL_SHARED_TEXTURE_PALETTE_EXT = 0x81FB,
GL_STENCIL_TAG_BITS_EXT = 0x88F2,
GL_STENCIL_CLEAR_TAG_VALUE_EXT = 0x88F3,
GL_STENCIL_TEST_TWO_SIDE_EXT = 0x8910,
GL_ACTIVE_STENCIL_FACE_EXT = 0x8911,
GL_INCR_WRAP_EXT = 0x8507,
GL_DECR_WRAP_EXT = 0x8508,
GL_ALPHA4_EXT = 0x803B,
GL_ALPHA8_EXT = 0x803C,
GL_ALPHA12_EXT = 0x803D,
GL_ALPHA16_EXT = 0x803E,
GL_LUMINANCE4_EXT = 0x803F,
GL_LUMINANCE8_EXT = 0x8040,
GL_LUMINANCE12_EXT = 0x8041,
GL_LUMINANCE16_EXT = 0x8042,
GL_LUMINANCE4_ALPHA4_EXT = 0x8043,
GL_LUMINANCE6_ALPHA2_EXT = 0x8044,
GL_LUMINANCE8_ALPHA8_EXT = 0x8045,
GL_LUMINANCE12_ALPHA4_EXT = 0x8046,
GL_LUMINANCE12_ALPHA12_EXT = 0x8047,
GL_LUMINANCE16_ALPHA16_EXT = 0x8048,
GL_INTENSITY_EXT = 0x8049,
GL_INTENSITY4_EXT = 0x804A,
GL_INTENSITY8_EXT = 0x804B,
GL_INTENSITY12_EXT = 0x804C,
GL_INTENSITY16_EXT = 0x804D,
GL_RGB2_EXT = 0x804E,
GL_RGB4_EXT = 0x804F,
GL_RGB5_EXT = 0x8050,
GL_RGB8_EXT = 0x8051,
GL_RGB10_EXT = 0x8052,
GL_RGB12_EXT = 0x8053,
GL_RGB16_EXT = 0x8054,
GL_RGBA2_EXT = 0x8055,
GL_RGBA4_EXT = 0x8056,
GL_RGB5_A1_EXT = 0x8057,
GL_RGBA8_EXT = 0x8058,
GL_RGB10_A2_EXT = 0x8059,
GL_RGBA12_EXT = 0x805A,
GL_RGBA16_EXT = 0x805B,
GL_TEXTURE_RED_SIZE_EXT = 0x805C,
GL_TEXTURE_GREEN_SIZE_EXT = 0x805D,
GL_TEXTURE_BLUE_SIZE_EXT = 0x805E,
GL_TEXTURE_ALPHA_SIZE_EXT = 0x805F,
GL_TEXTURE_LUMINANCE_SIZE_EXT = 0x8060,
GL_TEXTURE_INTENSITY_SIZE_EXT = 0x8061,
GL_REPLACE_EXT = 0x8062,
GL_PROXY_TEXTURE_1D_EXT = 0x8063,
GL_PROXY_TEXTURE_2D_EXT = 0x8064,
GL_PACK_SKIP_IMAGES_EXT = 0x806B,
GL_PACK_IMAGE_HEIGHT_EXT = 0x806C,
GL_UNPACK_SKIP_IMAGES_EXT = 0x806D,
GL_UNPACK_IMAGE_HEIGHT_EXT = 0x806E,
GL_TEXTURE_3D_EXT = 0x806F,
GL_PROXY_TEXTURE_3D_EXT = 0x8070,
GL_TEXTURE_DEPTH_EXT = 0x8071,
GL_TEXTURE_WRAP_R_EXT = 0x8072,
GL_MAX_3D_TEXTURE_SIZE_EXT = 0x8073,
GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 0x884E,
GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = 0x88FF,
GL_TEXTURE_1D_ARRAY_EXT = 0x8C18,
GL_PROXY_TEXTURE_1D_ARRAY_EXT = 0x8C19,
GL_TEXTURE_2D_ARRAY_EXT = 0x8C1A,
GL_PROXY_TEXTURE_2D_ARRAY_EXT = 0x8C1B,
GL_TEXTURE_BINDING_1D_ARRAY_EXT = 0x8C1C,
GL_TEXTURE_BINDING_2D_ARRAY_EXT = 0x8C1D,
GL_TEXTURE_BUFFER_EXT = 0x8C2A,
GL_MAX_TEXTURE_BUFFER_SIZE_EXT = 0x8C2B,
GL_TEXTURE_BINDING_BUFFER_EXT = 0x8C2C,
GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 0x8C2D,
GL_TEXTURE_BUFFER_FORMAT_EXT = 0x8C2E,
GL_COMPRESSED_LUMINANCE_LATC1_EXT = 0x8C70,
GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 0x8C71,
GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C72,
GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C73,
GL_COMPRESSED_RED_RGTC1_EXT = 0x8DBB,
GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8DBC,
GL_COMPRESSED_RED_GREEN_RGTC2_EXT = 0x8DBD,
GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBE,
GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0,
GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1,
GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2,
GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3,
GL_NORMAL_MAP_EXT = 0x8511,
GL_REFLECTION_MAP_EXT = 0x8512,
GL_TEXTURE_CUBE_MAP_EXT = 0x8513,
GL_TEXTURE_BINDING_CUBE_MAP_EXT = 0x8514,
GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 0x8515,
GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 0x8516,
GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 0x8517,
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 0x8518,
GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 0x8519,
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 0x851A,
GL_PROXY_TEXTURE_CUBE_MAP_EXT = 0x851B,
GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 0x851C,
GL_CLAMP_TO_EDGE_EXT = 0x812F,
GL_COMBINE_EXT = 0x8570,
GL_COMBINE_RGB_EXT = 0x8571,
GL_COMBINE_ALPHA_EXT = 0x8572,
GL_RGB_SCALE_EXT = 0x8573,
GL_ADD_SIGNED_EXT = 0x8574,
GL_INTERPOLATE_EXT = 0x8575,
GL_CONSTANT_EXT = 0x8576,
GL_PRIMARY_COLOR_EXT = 0x8577,
GL_PREVIOUS_EXT = 0x8578,
GL_SOURCE0_RGB_EXT = 0x8580,
GL_SOURCE1_RGB_EXT = 0x8581,
GL_SOURCE2_RGB_EXT = 0x8582,
GL_SOURCE0_ALPHA_EXT = 0x8588,
GL_SOURCE1_ALPHA_EXT = 0x8589,
GL_SOURCE2_ALPHA_EXT = 0x858A,
GL_OPERAND0_RGB_EXT = 0x8590,
GL_OPERAND1_RGB_EXT = 0x8591,
GL_OPERAND2_RGB_EXT = 0x8592,
GL_OPERAND0_ALPHA_EXT = 0x8598,
GL_OPERAND1_ALPHA_EXT = 0x8599,
GL_OPERAND2_ALPHA_EXT = 0x859A,
GL_DOT3_RGB_EXT = 0x8740,
GL_DOT3_RGBA_EXT = 0x8741,
GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE,
GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF,
GL_TEXTURE_REDUCTION_MODE_EXT = 0x9366,
GL_WEIGHTED_AVERAGE_EXT = 0x9367,
GL_RGBA32UI_EXT = 0x8D70,
GL_RGB32UI_EXT = 0x8D71,
GL_ALPHA32UI_EXT = 0x8D72,
GL_INTENSITY32UI_EXT = 0x8D73,
GL_LUMINANCE32UI_EXT = 0x8D74,
GL_LUMINANCE_ALPHA32UI_EXT = 0x8D75,
GL_RGBA16UI_EXT = 0x8D76,
GL_RGB16UI_EXT = 0x8D77,
GL_ALPHA16UI_EXT = 0x8D78,
GL_INTENSITY16UI_EXT = 0x8D79,
GL_LUMINANCE16UI_EXT = 0x8D7A,
GL_LUMINANCE_ALPHA16UI_EXT = 0x8D7B,
GL_RGBA8UI_EXT = 0x8D7C,
GL_RGB8UI_EXT = 0x8D7D,
GL_ALPHA8UI_EXT = 0x8D7E,
GL_INTENSITY8UI_EXT = 0x8D7F,
GL_LUMINANCE8UI_EXT = 0x8D80,
GL_LUMINANCE_ALPHA8UI_EXT = 0x8D81,
GL_RGBA32I_EXT = 0x8D82,
GL_RGB32I_EXT = 0x8D83,
GL_ALPHA32I_EXT = 0x8D84,
GL_INTENSITY32I_EXT = 0x8D85,
GL_LUMINANCE32I_EXT = 0x8D86,
GL_LUMINANCE_ALPHA32I_EXT = 0x8D87,
GL_RGBA16I_EXT = 0x8D88,
GL_RGB16I_EXT = 0x8D89,
GL_ALPHA16I_EXT = 0x8D8A,
GL_INTENSITY16I_EXT = 0x8D8B,
GL_LUMINANCE16I_EXT = 0x8D8C,
GL_LUMINANCE_ALPHA16I_EXT = 0x8D8D,
GL_RGBA8I_EXT = 0x8D8E,
GL_RGB8I_EXT = 0x8D8F,
GL_ALPHA8I_EXT = 0x8D90,
GL_INTENSITY8I_EXT = 0x8D91,
GL_LUMINANCE8I_EXT = 0x8D92,
GL_LUMINANCE_ALPHA8I_EXT = 0x8D93,
GL_RED_INTEGER_EXT = 0x8D94,
GL_GREEN_INTEGER_EXT = 0x8D95,
GL_BLUE_INTEGER_EXT = 0x8D96,
GL_ALPHA_INTEGER_EXT = 0x8D97,
GL_RGB_INTEGER_EXT = 0x8D98,
GL_RGBA_INTEGER_EXT = 0x8D99,
GL_BGR_INTEGER_EXT = 0x8D9A,
GL_BGRA_INTEGER_EXT = 0x8D9B,
GL_LUMINANCE_INTEGER_EXT = 0x8D9C,
GL_LUMINANCE_ALPHA_INTEGER_EXT = 0x8D9D,
GL_RGBA_INTEGER_MODE_EXT = 0x8D9E,
GL_MAX_TEXTURE_LOD_BIAS_EXT = 0x84FD,
GL_TEXTURE_FILTER_CONTROL_EXT = 0x8500,
GL_TEXTURE_LOD_BIAS_EXT = 0x8501,
GL_MIRROR_CLAMP_EXT = 0x8742,
GL_MIRROR_CLAMP_TO_EDGE_EXT = 0x8743,
GL_MIRROR_CLAMP_TO_BORDER_EXT = 0x8912,
GL_TEXTURE_PRIORITY_EXT = 0x8066,
GL_TEXTURE_RESIDENT_EXT = 0x8067,
GL_TEXTURE_1D_BINDING_EXT = 0x8068,
GL_TEXTURE_2D_BINDING_EXT = 0x8069,
GL_TEXTURE_3D_BINDING_EXT = 0x806A,
GL_PERTURB_EXT = 0x85AE,
GL_TEXTURE_NORMAL_EXT = 0x85AF,
GL_TEXTURE_RECTANGLE_EXT = 0x84F5,
GL_TEXTURE_BINDING_RECTANGLE_EXT = 0x84F6,
GL_PROXY_TEXTURE_RECTANGLE_EXT = 0x84F7,
GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT = 0x84F8,
GL_SRGB_EXT = 0x8C40,
GL_SRGB8_EXT = 0x8C41,
GL_SRGB_ALPHA_EXT = 0x8C42,
GL_SRGB8_ALPHA8_EXT = 0x8C43,
GL_SLUMINANCE_ALPHA_EXT = 0x8C44,
GL_SLUMINANCE8_ALPHA8_EXT = 0x8C45,
GL_SLUMINANCE_EXT = 0x8C46,
GL_SLUMINANCE8_EXT = 0x8C47,
GL_COMPRESSED_SRGB_EXT = 0x8C48,
GL_COMPRESSED_SRGB_ALPHA_EXT = 0x8C49,
GL_COMPRESSED_SLUMINANCE_EXT = 0x8C4A,
GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = 0x8C4B,
GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C,
GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D,
GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E,
GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F,
GL_TEXTURE_SRGB_DECODE_EXT = 0x8A48,
GL_DECODE_EXT = 0x8A49,
GL_SKIP_DECODE_EXT = 0x8A4A,
GL_RGB9_E5_EXT = 0x8C3D,
GL_UNSIGNED_INT_5_9_9_9_REV_EXT = 0x8C3E,
GL_TEXTURE_SHARED_SIZE_EXT = 0x8C3F,
//GL_RED_SNORM = 0x8F90,
//GL_RG_SNORM = 0x8F91,
//GL_RGB_SNORM = 0x8F92,
//GL_RGBA_SNORM = 0x8F93,
//GL_R8_SNORM = 0x8F94,
//GL_RG8_SNORM = 0x8F95,
//GL_RGB8_SNORM = 0x8F96,
//GL_RGBA8_SNORM = 0x8F97,
//GL_R16_SNORM = 0x8F98,
//GL_RG16_SNORM = 0x8F99,
//GL_RGB16_SNORM = 0x8F9A,
//GL_RGBA16_SNORM = 0x8F9B,
//GL_SIGNED_NORMALIZED = 0x8F9C,
GL_ALPHA_SNORM = 0x9010,
GL_LUMINANCE_SNORM = 0x9011,
GL_LUMINANCE_ALPHA_SNORM = 0x9012,
GL_INTENSITY_SNORM = 0x9013,
GL_ALPHA8_SNORM = 0x9014,
GL_LUMINANCE8_SNORM = 0x9015,
GL_LUMINANCE8_ALPHA8_SNORM = 0x9016,
GL_INTENSITY8_SNORM = 0x9017,
GL_ALPHA16_SNORM = 0x9018,
GL_LUMINANCE16_SNORM = 0x9019,
GL_LUMINANCE16_ALPHA16_SNORM = 0x901A,
GL_INTENSITY16_SNORM = 0x901B,
GL_TEXTURE_SWIZZLE_R_EXT = 0x8E42,
GL_TEXTURE_SWIZZLE_G_EXT = 0x8E43,
GL_TEXTURE_SWIZZLE_B_EXT = 0x8E44,
GL_TEXTURE_SWIZZLE_A_EXT = 0x8E45,
GL_TEXTURE_SWIZZLE_RGBA_EXT = 0x8E46,
GL_TIME_ELAPSED_EXT = 0x88BF,
GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = 0x8C76,
GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = 0x8C7F,
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = 0x8C80,
GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = 0x8C83,
GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = 0x8C84,
GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = 0x8C85,
GL_PRIMITIVES_GENERATED_EXT = 0x8C87,
GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = 0x8C88,
GL_RASTERIZER_DISCARD_EXT = 0x8C89,
GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = 0x8C8A,
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = 0x8C8B,
GL_INTERLEAVED_ATTRIBS_EXT = 0x8C8C,
GL_SEPARATE_ATTRIBS_EXT = 0x8C8D,
GL_TRANSFORM_FEEDBACK_BUFFER_EXT = 0x8C8E,
GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = 0x8C8F,
GL_DOUBLE_EXT = 0x140A,
GL_VERTEX_ARRAY_EXT = 0x8074,
GL_NORMAL_ARRAY_EXT = 0x8075,
GL_COLOR_ARRAY_EXT = 0x8076,
GL_INDEX_ARRAY_EXT = 0x8077,
GL_TEXTURE_COORD_ARRAY_EXT = 0x8078,
GL_EDGE_FLAG_ARRAY_EXT = 0x8079,
GL_VERTEX_ARRAY_SIZE_EXT = 0x807A,
GL_VERTEX_ARRAY_TYPE_EXT = 0x807B,
GL_VERTEX_ARRAY_STRIDE_EXT = 0x807C,
GL_VERTEX_ARRAY_COUNT_EXT = 0x807D,
GL_NORMAL_ARRAY_TYPE_EXT = 0x807E,
GL_NORMAL_ARRAY_STRIDE_EXT = 0x807F,
GL_NORMAL_ARRAY_COUNT_EXT = 0x8080,
GL_COLOR_ARRAY_SIZE_EXT = 0x8081,
GL_COLOR_ARRAY_TYPE_EXT = 0x8082,
GL_COLOR_ARRAY_STRIDE_EXT = 0x8083,
GL_COLOR_ARRAY_COUNT_EXT = 0x8084,
GL_INDEX_ARRAY_TYPE_EXT = 0x8085,
GL_INDEX_ARRAY_STRIDE_EXT = 0x8086,
GL_INDEX_ARRAY_COUNT_EXT = 0x8087,
GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 0x8088,
GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 0x8089,
GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x808A,
GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B,
GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 0x808C,
GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D,
GL_VERTEX_ARRAY_POINTER_EXT = 0x808E,
GL_NORMAL_ARRAY_POINTER_EXT = 0x808F,
GL_COLOR_ARRAY_POINTER_EXT = 0x8090,
GL_INDEX_ARRAY_POINTER_EXT = 0x8091,
GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 0x8092,
GL_EDGE_FLAG_ARRAY_POINTER_EXT = 0x8093,
//GL_BGRA = 0x80E1,
GL_DOUBLE_MAT2_EXT = 0x8F46,
GL_DOUBLE_MAT3_EXT = 0x8F47,
GL_DOUBLE_MAT4_EXT = 0x8F48,
GL_DOUBLE_MAT2x3_EXT = 0x8F49,
GL_DOUBLE_MAT2x4_EXT = 0x8F4A,
GL_DOUBLE_MAT3x2_EXT = 0x8F4B,
GL_DOUBLE_MAT3x4_EXT = 0x8F4C,
GL_DOUBLE_MAT4x2_EXT = 0x8F4D,
GL_DOUBLE_MAT4x3_EXT = 0x8F4E,
GL_DOUBLE_VEC2_EXT = 0x8FFC,
GL_DOUBLE_VEC3_EXT = 0x8FFD,
GL_DOUBLE_VEC4_EXT = 0x8FFE,
GL_VERTEX_SHADER_EXT = 0x8780,
GL_VERTEX_SHADER_BINDING_EXT = 0x8781,
GL_OP_INDEX_EXT = 0x8782,
GL_OP_NEGATE_EXT = 0x8783,
GL_OP_DOT3_EXT = 0x8784,
GL_OP_DOT4_EXT = 0x8785,
GL_OP_MUL_EXT = 0x8786,
GL_OP_ADD_EXT = 0x8787,
GL_OP_MADD_EXT = 0x8788,
GL_OP_FRAC_EXT = 0x8789,
GL_OP_MAX_EXT = 0x878A,
GL_OP_MIN_EXT = 0x878B,
GL_OP_SET_GE_EXT = 0x878C,
GL_OP_SET_LT_EXT = 0x878D,
GL_OP_CLAMP_EXT = 0x878E,
GL_OP_FLOOR_EXT = 0x878F,
GL_OP_ROUND_EXT = 0x8790,
GL_OP_EXP_BASE_2_EXT = 0x8791,
GL_OP_LOG_BASE_2_EXT = 0x8792,
GL_OP_POWER_EXT = 0x8793,
GL_OP_RECIP_EXT = 0x8794,
GL_OP_RECIP_SQRT_EXT = 0x8795,
GL_OP_SUB_EXT = 0x8796,
GL_OP_CROSS_PRODUCT_EXT = 0x8797,
GL_OP_MULTIPLY_MATRIX_EXT = 0x8798,
GL_OP_MOV_EXT = 0x8799,
GL_OUTPUT_VERTEX_EXT = 0x879A,
GL_OUTPUT_COLOR0_EXT = 0x879B,
GL_OUTPUT_COLOR1_EXT = 0x879C,
GL_OUTPUT_TEXTURE_COORD0_EXT = 0x879D,
GL_OUTPUT_TEXTURE_COORD1_EXT = 0x879E,
GL_OUTPUT_TEXTURE_COORD2_EXT = 0x879F,
GL_OUTPUT_TEXTURE_COORD3_EXT = 0x87A0,
GL_OUTPUT_TEXTURE_COORD4_EXT = 0x87A1,
GL_OUTPUT_TEXTURE_COORD5_EXT = 0x87A2,
GL_OUTPUT_TEXTURE_COORD6_EXT = 0x87A3,
GL_OUTPUT_TEXTURE_COORD7_EXT = 0x87A4,
GL_OUTPUT_TEXTURE_COORD8_EXT = 0x87A5,
GL_OUTPUT_TEXTURE_COORD9_EXT = 0x87A6,
GL_OUTPUT_TEXTURE_COORD10_EXT = 0x87A7,
GL_OUTPUT_TEXTURE_COORD11_EXT = 0x87A8,
GL_OUTPUT_TEXTURE_COORD12_EXT = 0x87A9,
GL_OUTPUT_TEXTURE_COORD13_EXT = 0x87AA,
GL_OUTPUT_TEXTURE_COORD14_EXT = 0x87AB,
GL_OUTPUT_TEXTURE_COORD15_EXT = 0x87AC,
GL_OUTPUT_TEXTURE_COORD16_EXT = 0x87AD,
GL_OUTPUT_TEXTURE_COORD17_EXT = 0x87AE,
GL_OUTPUT_TEXTURE_COORD18_EXT = 0x87AF,
GL_OUTPUT_TEXTURE_COORD19_EXT = 0x87B0,
GL_OUTPUT_TEXTURE_COORD20_EXT = 0x87B1,
GL_OUTPUT_TEXTURE_COORD21_EXT = 0x87B2,
GL_OUTPUT_TEXTURE_COORD22_EXT = 0x87B3,
GL_OUTPUT_TEXTURE_COORD23_EXT = 0x87B4,
GL_OUTPUT_TEXTURE_COORD24_EXT = 0x87B5,
GL_OUTPUT_TEXTURE_COORD25_EXT = 0x87B6,
GL_OUTPUT_TEXTURE_COORD26_EXT = 0x87B7,
GL_OUTPUT_TEXTURE_COORD27_EXT = 0x87B8,
GL_OUTPUT_TEXTURE_COORD28_EXT = 0x87B9,
GL_OUTPUT_TEXTURE_COORD29_EXT = 0x87BA,
GL_OUTPUT_TEXTURE_COORD30_EXT = 0x87BB,
GL_OUTPUT_TEXTURE_COORD31_EXT = 0x87BC,
GL_OUTPUT_FOG_EXT = 0x87BD,
GL_SCALAR_EXT = 0x87BE,
GL_VECTOR_EXT = 0x87BF,
GL_MATRIX_EXT = 0x87C0,
GL_VARIANT_EXT = 0x87C1,
GL_INVARIANT_EXT = 0x87C2,
GL_LOCAL_CONSTANT_EXT = 0x87C3,
GL_LOCAL_EXT = 0x87C4,
GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87C5,
GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 0x87C6,
GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x87C7,
GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87C8,
GL_MAX_VERTEX_SHADER_LOCALS_EXT = 0x87C9,
GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CA,
GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x87CB,
GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x87CC,
GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87CD,
GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x87CE,
GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CF,
GL_VERTEX_SHADER_VARIANTS_EXT = 0x87D0,
GL_VERTEX_SHADER_INVARIANTS_EXT = 0x87D1,
GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87D2,
GL_VERTEX_SHADER_LOCALS_EXT = 0x87D3,
GL_VERTEX_SHADER_OPTIMIZED_EXT = 0x87D4,
GL_X_EXT = 0x87D5,
GL_Y_EXT = 0x87D6,
GL_Z_EXT = 0x87D7,
GL_W_EXT = 0x87D8,
GL_NEGATIVE_X_EXT = 0x87D9,
GL_NEGATIVE_Y_EXT = 0x87DA,
GL_NEGATIVE_Z_EXT = 0x87DB,
GL_NEGATIVE_W_EXT = 0x87DC,
GL_ZERO_EXT = 0x87DD,
GL_ONE_EXT = 0x87DE,
GL_NEGATIVE_ONE_EXT = 0x87DF,
GL_NORMALIZED_RANGE_EXT = 0x87E0,
GL_FULL_RANGE_EXT = 0x87E1,
GL_CURRENT_VERTEX_EXT = 0x87E2,
GL_MVP_MATRIX_EXT = 0x87E3,
GL_VARIANT_VALUE_EXT = 0x87E4,
GL_VARIANT_DATATYPE_EXT = 0x87E5,
GL_VARIANT_ARRAY_STRIDE_EXT = 0x87E6,
GL_VARIANT_ARRAY_TYPE_EXT = 0x87E7,
GL_VARIANT_ARRAY_EXT = 0x87E8,
GL_VARIANT_ARRAY_POINTER_EXT = 0x87E9,
GL_INVARIANT_VALUE_EXT = 0x87EA,
GL_INVARIANT_DATATYPE_EXT = 0x87EB,
GL_LOCAL_CONSTANT_VALUE_EXT = 0x87EC,
GL_LOCAL_CONSTANT_DATATYPE_EXT = 0x87ED,
GL_MODELVIEW0_STACK_DEPTH_EXT = 0x0BA3,
GL_MODELVIEW0_MATRIX_EXT = 0x0BA6,
GL_MODELVIEW0_EXT = 0x1700,
GL_MODELVIEW1_STACK_DEPTH_EXT = 0x8502,
GL_MODELVIEW1_MATRIX_EXT = 0x8506,
GL_VERTEX_WEIGHTING_EXT = 0x8509,
GL_MODELVIEW1_EXT = 0x850A,
GL_CURRENT_VERTEX_WEIGHT_EXT = 0x850B,
GL_VERTEX_WEIGHT_ARRAY_EXT = 0x850C,
GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x850D,
GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x850E,
GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x850F,
GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x8510,
GL_SYNC_X11_FENCE_EXT = 0x90E1,
GL_CULL_VERTEX_IBM = 103050,
GL_RASTER_POSITION_UNCLIPPED_IBM = 103010,
GL_ALL_STATIC_DATA_IBM = 103060,
GL_STATIC_VERTEX_ARRAY_IBM = 103061,
GL_MIRRORED_REPEAT_IBM = 0x8370,
GL_VERTEX_ARRAY_LIST_IBM = 103070,
GL_NORMAL_ARRAY_LIST_IBM = 103071,
GL_COLOR_ARRAY_LIST_IBM = 103072,
GL_INDEX_ARRAY_LIST_IBM = 103073,
GL_TEXTURE_COORD_ARRAY_LIST_IBM = 103074,
GL_EDGE_FLAG_ARRAY_LIST_IBM = 103075,
GL_FOG_COORDINATE_ARRAY_LIST_IBM = 103076,
GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 103077,
GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 103080,
GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 103081,
GL_COLOR_ARRAY_LIST_STRIDE_IBM = 103082,
GL_INDEX_ARRAY_LIST_STRIDE_IBM = 103083,
GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084,
GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085,
GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086,
GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087,
GL_RED_MIN_CLAMP_INGR = 0x8560,
GL_GREEN_MIN_CLAMP_INGR = 0x8561,
GL_BLUE_MIN_CLAMP_INGR = 0x8562,
GL_ALPHA_MIN_CLAMP_INGR = 0x8563,
GL_RED_MAX_CLAMP_INGR = 0x8564,
GL_GREEN_MAX_CLAMP_INGR = 0x8565,
GL_BLUE_MAX_CLAMP_INGR = 0x8566,
GL_ALPHA_MAX_CLAMP_INGR = 0x8567,
GL_INTERLACE_READ_INGR = 0x8568,
GL_LAYOUT_DEFAULT_INTEL = 0,
GL_LAYOUT_LINEAR_INTEL = 1,
GL_LAYOUT_LINEAR_CPU_CACHED_INTEL = 2,
GL_TEXTURE_MEMORY_LAYOUT_INTEL = 0x83FF,
GL_PARALLEL_ARRAYS_INTEL = 0x83F4,
GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F5,
GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F6,
GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F7,
GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F8,
GL_PERFQUERY_SINGLE_CONTEXT_INTEL = 0x0000,
GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = 0x0001,
GL_PERFQUERY_DONOT_FLUSH_INTEL = 0x83F9,
GL_PERFQUERY_FLUSH_INTEL = 0x83FA,
GL_PERFQUERY_WAIT_INTEL = 0x83FB,
GL_PERFQUERY_COUNTER_EVENT_INTEL = 0x94F0,
GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = 0x94F1,
GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = 0x94F2,
GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = 0x94F3,
GL_PERFQUERY_COUNTER_RAW_INTEL = 0x94F4,
GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = 0x94F5,
GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = 0x94F8,
GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = 0x94F9,
GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = 0x94FA,
GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = 0x94FB,
GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = 0x94FC,
GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = 0x94FD,
GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = 0x94FE,
GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = 0x94FF,
GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = 0x9500,
GL_BLEND_ADVANCED_COHERENT_KHR = 0x9285,
GL_MULTIPLY_KHR = 0x9294,
GL_SCREEN_KHR = 0x9295,
GL_OVERLAY_KHR = 0x9296,
GL_DARKEN_KHR = 0x9297,
GL_LIGHTEN_KHR = 0x9298,
GL_COLORDODGE_KHR = 0x9299,
GL_COLORBURN_KHR = 0x929A,
GL_HARDLIGHT_KHR = 0x929B,
GL_SOFTLIGHT_KHR = 0x929C,
GL_DIFFERENCE_KHR = 0x929E,
GL_EXCLUSION_KHR = 0x92A0,
GL_HSL_HUE_KHR = 0x92AD,
GL_HSL_SATURATION_KHR = 0x92AE,
GL_HSL_COLOR_KHR = 0x92AF,
GL_HSL_LUMINOSITY_KHR = 0x92B0,
GL_CONTEXT_RELEASE_BEHAVIOR = 0x82FB,
GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82FC,
GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002,
//GL_STACK_OVERFLOW = 0x0503,
//GL_STACK_UNDERFLOW = 0x0504,
GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242,
GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243,
GL_DEBUG_CALLBACK_FUNCTION = 0x8244,
GL_DEBUG_CALLBACK_USER_PARAM = 0x8245,
GL_DEBUG_SOURCE_API = 0x8246,
GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247,
GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248,
GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249,
GL_DEBUG_SOURCE_APPLICATION = 0x824A,
GL_DEBUG_SOURCE_OTHER = 0x824B,
GL_DEBUG_TYPE_ERROR = 0x824C,
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D,
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E,
GL_DEBUG_TYPE_PORTABILITY = 0x824F,
GL_DEBUG_TYPE_PERFORMANCE = 0x8250,
GL_DEBUG_TYPE_OTHER = 0x8251,
GL_DEBUG_TYPE_MARKER = 0x8268,
GL_DEBUG_TYPE_PUSH_GROUP = 0x8269,
GL_DEBUG_TYPE_POP_GROUP = 0x826A,
GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B,
GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C,
GL_DEBUG_GROUP_STACK_DEPTH = 0x826D,
GL_BUFFER = 0x82E0,
GL_SHADER = 0x82E1,
GL_PROGRAM = 0x82E2,
GL_QUERY = 0x82E3,
GL_PROGRAM_PIPELINE = 0x82E4,
GL_SAMPLER = 0x82E6,
GL_DISPLAY_LIST = 0x82E7,
GL_MAX_LABEL_LENGTH = 0x82E8,
GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143,
GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144,
GL_DEBUG_LOGGED_MESSAGES = 0x9145,
GL_DEBUG_SEVERITY_HIGH = 0x9146,
GL_DEBUG_SEVERITY_MEDIUM = 0x9147,
GL_DEBUG_SEVERITY_LOW = 0x9148,
GL_DEBUG_OUTPUT = 0x92E0,
GL_CONTEXT_LOST = 0x0507,
GL_LOSE_CONTEXT_ON_RESET = 0x8252,
GL_GUILTY_CONTEXT_RESET = 0x8253,
GL_INNOCENT_CONTEXT_RESET = 0x8254,
GL_UNKNOWN_CONTEXT_RESET = 0x8255,
GL_RESET_NOTIFICATION_STRATEGY = 0x8256,
GL_NO_RESET_NOTIFICATION = 0x8261,
GL_CONTEXT_ROBUST_ACCESS = 0x90F3,
GL_COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0,
GL_COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1,
GL_COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2,
GL_COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3,
GL_COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4,
GL_COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5,
GL_COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6,
GL_COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7,
GL_COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8,
GL_COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9,
GL_COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BA,
GL_COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB,
GL_COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC,
GL_COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD,
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0,
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1,
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2,
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3,
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4,
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5,
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6,
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7,
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8,
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9,
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA,
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB,
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC,
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD,
//GL_COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0,
//GL_COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1,
//GL_COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2,
//GL_COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3,
//GL_COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4,
//GL_COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5,
//GL_COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6,
//GL_COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7,
//GL_COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8,
//GL_COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9,
//GL_COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BA,
//GL_COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB,
//GL_COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC,
//GL_COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD,
//GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0,
//GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1,
//GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2,
//GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3,
//GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4,
//GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5,
//GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6,
//GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7,
//GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8,
//GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9,
//GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA,
//GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB,
//GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC,
//GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD,
GL_KTX_FRONT_REGION = 0x0,
GL_KTX_BACK_REGION = 0x1,
GL_KTX_Z_REGION = 0x2,
GL_KTX_STENCIL_REGION = 0x3,
GL_TEXTURE_1D_STACK_MESAX = 0x8759,
GL_TEXTURE_2D_STACK_MESAX = 0x875A,
GL_PROXY_TEXTURE_1D_STACK_MESAX = 0x875B,
GL_PROXY_TEXTURE_2D_STACK_MESAX = 0x875C,
GL_TEXTURE_1D_STACK_BINDING_MESAX = 0x875D,
GL_TEXTURE_2D_STACK_BINDING_MESAX = 0x875E,
GL_PACK_INVERT_MESA = 0x8758,
GL_UNSIGNED_SHORT_8_8_MESA = 0x85BA,
GL_UNSIGNED_SHORT_8_8_REV_MESA = 0x85BB,
GL_YCBCR_MESA = 0x8757,
GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = 0x9047,
GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = 0x9048,
GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = 0x9049,
GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX = 0x904A,
GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = 0x904B,
GL_XOR_NV = 0x1506,
GL_RED_NV = 0x1903,
GL_GREEN_NV = 0x1904,
GL_BLUE_NV = 0x1905,
GL_BLEND_PREMULTIPLIED_SRC_NV = 0x9280,
GL_BLEND_OVERLAP_NV = 0x9281,
GL_UNCORRELATED_NV = 0x9282,
GL_DISJOINT_NV = 0x9283,
GL_CONJOINT_NV = 0x9284,
GL_BLEND_ADVANCED_COHERENT_NV = 0x9285,
GL_SRC_NV = 0x9286,
GL_DST_NV = 0x9287,
GL_SRC_OVER_NV = 0x9288,
GL_DST_OVER_NV = 0x9289,
GL_SRC_IN_NV = 0x928A,
GL_DST_IN_NV = 0x928B,
GL_SRC_OUT_NV = 0x928C,
GL_DST_OUT_NV = 0x928D,
GL_SRC_ATOP_NV = 0x928E,
GL_DST_ATOP_NV = 0x928F,
GL_PLUS_NV = 0x9291,
GL_PLUS_DARKER_NV = 0x9292,
GL_MULTIPLY_NV = 0x9294,
GL_SCREEN_NV = 0x9295,
GL_OVERLAY_NV = 0x9296,
GL_DARKEN_NV = 0x9297,
GL_LIGHTEN_NV = 0x9298,
GL_COLORDODGE_NV = 0x9299,
GL_COLORBURN_NV = 0x929A,
GL_HARDLIGHT_NV = 0x929B,
GL_SOFTLIGHT_NV = 0x929C,
GL_DIFFERENCE_NV = 0x929E,
GL_MINUS_NV = 0x929F,
GL_EXCLUSION_NV = 0x92A0,
GL_CONTRAST_NV = 0x92A1,
GL_INVERT_RGB_NV = 0x92A3,
GL_LINEARDODGE_NV = 0x92A4,
GL_LINEARBURN_NV = 0x92A5,
GL_VIVIDLIGHT_NV = 0x92A6,
GL_LINEARLIGHT_NV = 0x92A7,
GL_PINLIGHT_NV = 0x92A8,
GL_HARDMIX_NV = 0x92A9,
GL_HSL_HUE_NV = 0x92AD,
GL_HSL_SATURATION_NV = 0x92AE,
GL_HSL_COLOR_NV = 0x92AF,
GL_HSL_LUMINOSITY_NV = 0x92B0,
GL_PLUS_CLAMPED_NV = 0x92B1,
GL_PLUS_CLAMPED_ALPHA_NV = 0x92B2,
GL_MINUS_CLAMPED_NV = 0x92B3,
GL_INVERT_OVG_NV = 0x92B4,
GL_COMPUTE_PROGRAM_NV = 0x90FB,
GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = 0x90FC,
GL_QUERY_WAIT_NV = 0x8E13,
GL_QUERY_NO_WAIT_NV = 0x8E14,
GL_QUERY_BY_REGION_WAIT_NV = 0x8E15,
GL_QUERY_BY_REGION_NO_WAIT_NV = 0x8E16,
GL_CONSERVATIVE_RASTERIZATION_NV = 0x9346,
GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV = 0x9347,
GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = 0x9348,
GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = 0x9349,
GL_DEPTH_STENCIL_TO_RGBA_NV = 0x886E,
GL_DEPTH_STENCIL_TO_BGRA_NV = 0x886F,
GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = 0x90D0,
GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV = 0x90D1,
GL_DEPTH_COMPONENT32F_NV = 0x8DAB,
GL_DEPTH32F_STENCIL8_NV = 0x8DAC,
GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = 0x8DAD,
GL_DEPTH_BUFFER_FLOAT_MODE_NV = 0x8DAF,
GL_DEPTH_CLAMP_NV = 0x864F,
GL_SAMPLE_COUNT_BITS_NV = 0x8864,
GL_CURRENT_SAMPLE_COUNT_QUERY_NV = 0x8865,
GL_QUERY_RESULT_NV = 0x8866,
GL_QUERY_RESULT_AVAILABLE_NV = 0x8867,
GL_SAMPLE_COUNT_NV = 0x8914,
GL_EVAL_2D_NV = 0x86C0,
GL_EVAL_TRIANGULAR_2D_NV = 0x86C1,
GL_MAP_TESSELLATION_NV = 0x86C2,
GL_MAP_ATTRIB_U_ORDER_NV = 0x86C3,
GL_MAP_ATTRIB_V_ORDER_NV = 0x86C4,
GL_EVAL_FRACTIONAL_TESSELLATION_NV = 0x86C5,
GL_EVAL_VERTEX_ATTRIB0_NV = 0x86C6,
GL_EVAL_VERTEX_ATTRIB1_NV = 0x86C7,
GL_EVAL_VERTEX_ATTRIB2_NV = 0x86C8,
GL_EVAL_VERTEX_ATTRIB3_NV = 0x86C9,
GL_EVAL_VERTEX_ATTRIB4_NV = 0x86CA,
GL_EVAL_VERTEX_ATTRIB5_NV = 0x86CB,
GL_EVAL_VERTEX_ATTRIB6_NV = 0x86CC,
GL_EVAL_VERTEX_ATTRIB7_NV = 0x86CD,
GL_EVAL_VERTEX_ATTRIB8_NV = 0x86CE,
GL_EVAL_VERTEX_ATTRIB9_NV = 0x86CF,
GL_EVAL_VERTEX_ATTRIB10_NV = 0x86D0,
GL_EVAL_VERTEX_ATTRIB11_NV = 0x86D1,
GL_EVAL_VERTEX_ATTRIB12_NV = 0x86D2,
GL_EVAL_VERTEX_ATTRIB13_NV = 0x86D3,
GL_EVAL_VERTEX_ATTRIB14_NV = 0x86D4,
GL_EVAL_VERTEX_ATTRIB15_NV = 0x86D5,
GL_MAX_MAP_TESSELLATION_NV = 0x86D6,
GL_MAX_RATIONAL_EVAL_ORDER_NV = 0x86D7,
GL_SAMPLE_POSITION_NV = 0x8E50,
GL_SAMPLE_MASK_NV = 0x8E51,
GL_SAMPLE_MASK_VALUE_NV = 0x8E52,
GL_TEXTURE_BINDING_RENDERBUFFER_NV = 0x8E53,
GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = 0x8E54,
GL_TEXTURE_RENDERBUFFER_NV = 0x8E55,
GL_SAMPLER_RENDERBUFFER_NV = 0x8E56,
GL_INT_SAMPLER_RENDERBUFFER_NV = 0x8E57,
GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = 0x8E58,
GL_MAX_SAMPLE_MASK_WORDS_NV = 0x8E59,
GL_ALL_COMPLETED_NV = 0x84F2,
GL_FENCE_STATUS_NV = 0x84F3,
GL_FENCE_CONDITION_NV = 0x84F4,
GL_FILL_RECTANGLE_NV = 0x933C,
GL_FLOAT_R_NV = 0x8880,
GL_FLOAT_RG_NV = 0x8881,
GL_FLOAT_RGB_NV = 0x8882,
GL_FLOAT_RGBA_NV = 0x8883,
GL_FLOAT_R16_NV = 0x8884,
GL_FLOAT_R32_NV = 0x8885,
GL_FLOAT_RG16_NV = 0x8886,
GL_FLOAT_RG32_NV = 0x8887,
GL_FLOAT_RGB16_NV = 0x8888,
GL_FLOAT_RGB32_NV = 0x8889,
GL_FLOAT_RGBA16_NV = 0x888A,
GL_FLOAT_RGBA32_NV = 0x888B,
GL_TEXTURE_FLOAT_COMPONENTS_NV = 0x888C,
GL_FLOAT_CLEAR_COLOR_VALUE_NV = 0x888D,
GL_FLOAT_RGBA_MODE_NV = 0x888E,
GL_FOG_DISTANCE_MODE_NV = 0x855A,
GL_EYE_RADIAL_NV = 0x855B,
GL_EYE_PLANE_ABSOLUTE_NV = 0x855C,
GL_FRAGMENT_COVERAGE_TO_COLOR_NV = 0x92DD,
GL_FRAGMENT_COVERAGE_COLOR_NV = 0x92DE,
GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 0x8868,
GL_FRAGMENT_PROGRAM_NV = 0x8870,
GL_MAX_TEXTURE_COORDS_NV = 0x8871,
GL_MAX_TEXTURE_IMAGE_UNITS_NV = 0x8872,
GL_FRAGMENT_PROGRAM_BINDING_NV = 0x8873,
GL_PROGRAM_ERROR_STRING_NV = 0x8874,
GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 0x88F4,
GL_MAX_PROGRAM_CALL_DEPTH_NV = 0x88F5,
GL_MAX_PROGRAM_IF_DEPTH_NV = 0x88F6,
GL_MAX_PROGRAM_LOOP_DEPTH_NV = 0x88F7,
GL_MAX_PROGRAM_LOOP_COUNT_NV = 0x88F8,
//GL_COLOR_SAMPLES_NV = 0x8E20,
//GL_RASTER_MULTISAMPLE_EXT = 0x9327,
//GL_RASTER_SAMPLES_EXT = 0x9328,
//GL_MAX_RASTER_SAMPLES_EXT = 0x9329,
//GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = 0x932A,
//GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = 0x932B,
//GL_EFFECTIVE_RASTER_SAMPLES_EXT = 0x932C,
//GL_DEPTH_SAMPLES_NV = 0x932D,
//GL_STENCIL_SAMPLES_NV = 0x932E,
//GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = 0x932F,
//GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = 0x9330,
//GL_COVERAGE_MODULATION_TABLE_NV = 0x9331,
//GL_COVERAGE_MODULATION_NV = 0x9332,
//GL_COVERAGE_MODULATION_TABLE_SIZE_NV = 0x9333,
GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = 0x8CAB,
GL_RENDERBUFFER_COLOR_SAMPLES_NV = 0x8E10,
GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E11,
GL_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E12,
GL_GEOMETRY_PROGRAM_NV = 0x8C26,
GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = 0x8C27,
GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 0x8C28,
GL_MIN_PROGRAM_TEXEL_OFFSET_NV = 0x8904,
GL_MAX_PROGRAM_TEXEL_OFFSET_NV = 0x8905,
GL_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8906,
GL_PROGRAM_RESULT_COMPONENTS_NV = 0x8907,
GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8908,
GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = 0x8909,
GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = 0x8DA5,
GL_MAX_PROGRAM_GENERIC_RESULTS_NV = 0x8DA6,
GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = 0x8E5A,
GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5B,
GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5C,
GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = 0x8E5D,
GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5E,
GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5F,
GL_INT64_NV = 0x140E,
GL_UNSIGNED_INT64_NV = 0x140F,
GL_INT8_NV = 0x8FE0,
GL_INT8_VEC2_NV = 0x8FE1,
GL_INT8_VEC3_NV = 0x8FE2,
GL_INT8_VEC4_NV = 0x8FE3,
GL_INT16_NV = 0x8FE4,
GL_INT16_VEC2_NV = 0x8FE5,
GL_INT16_VEC3_NV = 0x8FE6,
GL_INT16_VEC4_NV = 0x8FE7,
GL_INT64_VEC2_NV = 0x8FE9,
GL_INT64_VEC3_NV = 0x8FEA,
GL_INT64_VEC4_NV = 0x8FEB,
GL_UNSIGNED_INT8_NV = 0x8FEC,
GL_UNSIGNED_INT8_VEC2_NV = 0x8FED,
GL_UNSIGNED_INT8_VEC3_NV = 0x8FEE,
GL_UNSIGNED_INT8_VEC4_NV = 0x8FEF,
GL_UNSIGNED_INT16_NV = 0x8FF0,
GL_UNSIGNED_INT16_VEC2_NV = 0x8FF1,
GL_UNSIGNED_INT16_VEC3_NV = 0x8FF2,
GL_UNSIGNED_INT16_VEC4_NV = 0x8FF3,
GL_UNSIGNED_INT64_VEC2_NV = 0x8FF5,
GL_UNSIGNED_INT64_VEC3_NV = 0x8FF6,
GL_UNSIGNED_INT64_VEC4_NV = 0x8FF7,
GL_FLOAT16_NV = 0x8FF8,
GL_FLOAT16_VEC2_NV = 0x8FF9,
GL_FLOAT16_VEC3_NV = 0x8FFA,
GL_FLOAT16_VEC4_NV = 0x8FFB,
GL_HALF_FLOAT_NV = 0x140B,
GL_MULTISAMPLES_NV = 0x9371,
GL_SUPERSAMPLE_SCALE_X_NV = 0x9372,
GL_SUPERSAMPLE_SCALE_Y_NV = 0x9373,
GL_CONFORMANT_NV = 0x9374,
GL_MAX_SHININESS_NV = 0x8504,
GL_MAX_SPOT_EXPONENT_NV = 0x8505,
//GL_COLOR_SAMPLES_NV = 0x8E20,
GL_MULTISAMPLE_FILTER_HINT_NV = 0x8534,
GL_PIXEL_COUNTER_BITS_NV = 0x8864,
GL_CURRENT_OCCLUSION_QUERY_ID_NV = 0x8865,
GL_PIXEL_COUNT_NV = 0x8866,
GL_PIXEL_COUNT_AVAILABLE_NV = 0x8867,
GL_DEPTH_STENCIL_NV = 0x84F9,
GL_UNSIGNED_INT_24_8_NV = 0x84FA,
GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = 0x8DA0,
GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = 0x8DA1,
GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA2,
GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA3,
GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA4,
GL_CLOSE_PATH_NV = 0x00,
GL_BOLD_BIT_NV = 0x01,
GL_GLYPH_WIDTH_BIT_NV = 0x01,
GL_GLYPH_HEIGHT_BIT_NV = 0x02,
GL_ITALIC_BIT_NV = 0x02,
GL_MOVE_TO_NV = 0x02,
GL_RELATIVE_MOVE_TO_NV = 0x03,
GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = 0x04,
GL_LINE_TO_NV = 0x04,
GL_RELATIVE_LINE_TO_NV = 0x05,
GL_HORIZONTAL_LINE_TO_NV = 0x06,
GL_RELATIVE_HORIZONTAL_LINE_TO_NV = 0x07,
GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = 0x08,
GL_VERTICAL_LINE_TO_NV = 0x08,
GL_RELATIVE_VERTICAL_LINE_TO_NV = 0x09,
GL_QUADRATIC_CURVE_TO_NV = 0x0A,
GL_RELATIVE_QUADRATIC_CURVE_TO_NV = 0x0B,
GL_CUBIC_CURVE_TO_NV = 0x0C,
GL_RELATIVE_CUBIC_CURVE_TO_NV = 0x0D,
GL_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0E,
GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0F,
GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 0x10,
GL_SMOOTH_CUBIC_CURVE_TO_NV = 0x10,
GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 0x11,
GL_SMALL_CCW_ARC_TO_NV = 0x12,
GL_RELATIVE_SMALL_CCW_ARC_TO_NV = 0x13,
GL_SMALL_CW_ARC_TO_NV = 0x14,
GL_RELATIVE_SMALL_CW_ARC_TO_NV = 0x15,
GL_LARGE_CCW_ARC_TO_NV = 0x16,
GL_RELATIVE_LARGE_CCW_ARC_TO_NV = 0x17,
GL_LARGE_CW_ARC_TO_NV = 0x18,
GL_RELATIVE_LARGE_CW_ARC_TO_NV = 0x19,
GL_CONIC_CURVE_TO_NV = 0x1A,
GL_RELATIVE_CONIC_CURVE_TO_NV = 0x1B,
GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = 0x20,
GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = 0x40,
GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 0x80,
GL_ROUNDED_RECT_NV = 0xE8,
GL_RELATIVE_ROUNDED_RECT_NV = 0xE9,
GL_ROUNDED_RECT2_NV = 0xEA,
GL_RELATIVE_ROUNDED_RECT2_NV = 0xEB,
GL_ROUNDED_RECT4_NV = 0xEC,
GL_RELATIVE_ROUNDED_RECT4_NV = 0xED,
GL_ROUNDED_RECT8_NV = 0xEE,
GL_RELATIVE_ROUNDED_RECT8_NV = 0xEF,
GL_RESTART_PATH_NV = 0xF0,
GL_DUP_FIRST_CUBIC_CURVE_TO_NV = 0xF2,
GL_DUP_LAST_CUBIC_CURVE_TO_NV = 0xF4,
GL_RECT_NV = 0xF6,
GL_RELATIVE_RECT_NV = 0xF7,
GL_CIRCULAR_CCW_ARC_TO_NV = 0xF8,
GL_CIRCULAR_CW_ARC_TO_NV = 0xFA,
GL_CIRCULAR_TANGENT_ARC_TO_NV = 0xFC,
GL_ARC_TO_NV = 0xFE,
GL_RELATIVE_ARC_TO_NV = 0xFF,
GL_GLYPH_HAS_KERNING_BIT_NV = 0x100,
GL_PRIMARY_COLOR_NV = 0x852C,
GL_SECONDARY_COLOR_NV = 0x852D,
//GL_PRIMARY_COLOR = 0x8577,
GL_PATH_FORMAT_SVG_NV = 0x9070,
GL_PATH_FORMAT_PS_NV = 0x9071,
GL_STANDARD_FONT_NAME_NV = 0x9072,
GL_SYSTEM_FONT_NAME_NV = 0x9073,
GL_FILE_NAME_NV = 0x9074,
GL_PATH_STROKE_WIDTH_NV = 0x9075,
GL_PATH_END_CAPS_NV = 0x9076,
GL_PATH_INITIAL_END_CAP_NV = 0x9077,
GL_PATH_TERMINAL_END_CAP_NV = 0x9078,
GL_PATH_JOIN_STYLE_NV = 0x9079,
GL_PATH_MITER_LIMIT_NV = 0x907A,
GL_PATH_DASH_CAPS_NV = 0x907B,
GL_PATH_INITIAL_DASH_CAP_NV = 0x907C,
GL_PATH_TERMINAL_DASH_CAP_NV = 0x907D,
GL_PATH_DASH_OFFSET_NV = 0x907E,
GL_PATH_CLIENT_LENGTH_NV = 0x907F,
GL_PATH_FILL_MODE_NV = 0x9080,
GL_PATH_FILL_MASK_NV = 0x9081,
GL_PATH_FILL_COVER_MODE_NV = 0x9082,
GL_PATH_STROKE_COVER_MODE_NV = 0x9083,
GL_PATH_STROKE_MASK_NV = 0x9084,
GL_PATH_STROKE_BOUND_NV = 0x9086,
GL_COUNT_UP_NV = 0x9088,
GL_COUNT_DOWN_NV = 0x9089,
GL_PATH_OBJECT_BOUNDING_BOX_NV = 0x908A,
GL_CONVEX_HULL_NV = 0x908B,
GL_BOUNDING_BOX_NV = 0x908D,
GL_TRANSLATE_X_NV = 0x908E,
GL_TRANSLATE_Y_NV = 0x908F,
GL_TRANSLATE_2D_NV = 0x9090,
GL_TRANSLATE_3D_NV = 0x9091,
GL_AFFINE_2D_NV = 0x9092,
GL_AFFINE_3D_NV = 0x9094,
GL_TRANSPOSE_AFFINE_2D_NV = 0x9096,
GL_TRANSPOSE_AFFINE_3D_NV = 0x9098,
GL_UTF8_NV = 0x909A,
GL_UTF16_NV = 0x909B,
GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = 0x909C,
GL_PATH_COMMAND_COUNT_NV = 0x909D,
GL_PATH_COORD_COUNT_NV = 0x909E,
GL_PATH_DASH_ARRAY_COUNT_NV = 0x909F,
GL_PATH_COMPUTED_LENGTH_NV = 0x90A0,
GL_PATH_FILL_BOUNDING_BOX_NV = 0x90A1,
GL_PATH_STROKE_BOUNDING_BOX_NV = 0x90A2,
GL_SQUARE_NV = 0x90A3,
GL_ROUND_NV = 0x90A4,
GL_TRIANGULAR_NV = 0x90A5,
GL_BEVEL_NV = 0x90A6,
GL_MITER_REVERT_NV = 0x90A7,
GL_MITER_TRUNCATE_NV = 0x90A8,
GL_SKIP_MISSING_GLYPH_NV = 0x90A9,
GL_USE_MISSING_GLYPH_NV = 0x90AA,
GL_PATH_ERROR_POSITION_NV = 0x90AB,
GL_PATH_FOG_GEN_MODE_NV = 0x90AC,
GL_ACCUM_ADJACENT_PAIRS_NV = 0x90AD,
GL_ADJACENT_PAIRS_NV = 0x90AE,
GL_FIRST_TO_REST_NV = 0x90AF,
GL_PATH_GEN_MODE_NV = 0x90B0,
GL_PATH_GEN_COEFF_NV = 0x90B1,
GL_PATH_GEN_COLOR_FORMAT_NV = 0x90B2,
GL_PATH_GEN_COMPONENTS_NV = 0x90B3,
GL_PATH_DASH_OFFSET_RESET_NV = 0x90B4,
GL_MOVE_TO_RESETS_NV = 0x90B5,
GL_MOVE_TO_CONTINUES_NV = 0x90B6,
GL_PATH_STENCIL_FUNC_NV = 0x90B7,
GL_PATH_STENCIL_REF_NV = 0x90B8,
GL_PATH_STENCIL_VALUE_MASK_NV = 0x90B9,
GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = 0x90BD,
GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = 0x90BE,
GL_PATH_COVER_DEPTH_FUNC_NV = 0x90BF,
GL_FONT_GLYPHS_AVAILABLE_NV = 0x9368,
GL_FONT_TARGET_UNAVAILABLE_NV = 0x9369,
GL_FONT_UNAVAILABLE_NV = 0x936A,
GL_FONT_UNINTELLIGIBLE_NV = 0x936B,
GL_STANDARD_FONT_FORMAT_NV = 0x936C,
GL_FRAGMENT_INPUT_NV = 0x936D,
GL_FONT_X_MIN_BOUNDS_BIT_NV = 0x00010000,
GL_FONT_Y_MIN_BOUNDS_BIT_NV = 0x00020000,
GL_FONT_X_MAX_BOUNDS_BIT_NV = 0x00040000,
GL_FONT_Y_MAX_BOUNDS_BIT_NV = 0x00080000,
GL_FONT_UNITS_PER_EM_BIT_NV = 0x00100000,
GL_FONT_ASCENDER_BIT_NV = 0x00200000,
GL_FONT_DESCENDER_BIT_NV = 0x00400000,
GL_FONT_HEIGHT_BIT_NV = 0x00800000,
GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = 0x01000000,
GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = 0x02000000,
GL_FONT_UNDERLINE_POSITION_BIT_NV = 0x04000000,
GL_FONT_UNDERLINE_THICKNESS_BIT_NV = 0x08000000,
GL_FONT_HAS_KERNING_BIT_NV = 0x10000000,
GL_FONT_NUM_GLYPH_INDICES_BIT_NV = 0x20000000,
GL_SHARED_EDGE_NV = 0xC0,
GL_WRITE_PIXEL_DATA_RANGE_NV = 0x8878,
GL_READ_PIXEL_DATA_RANGE_NV = 0x8879,
GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x887A,
GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x887B,
GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x887C,
GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 0x887D,
GL_POINT_SPRITE_NV = 0x8861,
GL_COORD_REPLACE_NV = 0x8862,
GL_POINT_SPRITE_R_MODE_NV = 0x8863,
GL_FRAME_NV = 0x8E26,
GL_FIELDS_NV = 0x8E27,
GL_CURRENT_TIME_NV = 0x8E28,
GL_NUM_FILL_STREAMS_NV = 0x8E29,
GL_PRESENT_TIME_NV = 0x8E2A,
GL_PRESENT_DURATION_NV = 0x8E2B,
GL_PRIMITIVE_RESTART_NV = 0x8558,
GL_PRIMITIVE_RESTART_INDEX_NV = 0x8559,
GL_REGISTER_COMBINERS_NV = 0x8522,
GL_VARIABLE_A_NV = 0x8523,
GL_VARIABLE_B_NV = 0x8524,
GL_VARIABLE_C_NV = 0x8525,
GL_VARIABLE_D_NV = 0x8526,
GL_VARIABLE_E_NV = 0x8527,
GL_VARIABLE_F_NV = 0x8528,
GL_VARIABLE_G_NV = 0x8529,
GL_CONSTANT_COLOR0_NV = 0x852A,
GL_CONSTANT_COLOR1_NV = 0x852B,
//GL_PRIMARY_COLOR_NV = 0x852C,
//GL_SECONDARY_COLOR_NV = 0x852D,
GL_SPARE0_NV = 0x852E,
GL_SPARE1_NV = 0x852F,
GL_DISCARD_NV = 0x8530,
GL_E_TIMES_F_NV = 0x8531,
GL_SPARE0_PLUS_SECONDARY_COLOR_NV = 0x8532,
GL_UNSIGNED_IDENTITY_NV = 0x8536,
GL_UNSIGNED_INVERT_NV = 0x8537,
GL_EXPAND_NORMAL_NV = 0x8538,
GL_EXPAND_NEGATE_NV = 0x8539,
GL_HALF_BIAS_NORMAL_NV = 0x853A,
GL_HALF_BIAS_NEGATE_NV = 0x853B,
GL_SIGNED_IDENTITY_NV = 0x853C,
GL_SIGNED_NEGATE_NV = 0x853D,
GL_SCALE_BY_TWO_NV = 0x853E,
GL_SCALE_BY_FOUR_NV = 0x853F,
GL_SCALE_BY_ONE_HALF_NV = 0x8540,
GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = 0x8541,
GL_COMBINER_INPUT_NV = 0x8542,
GL_COMBINER_MAPPING_NV = 0x8543,
GL_COMBINER_COMPONENT_USAGE_NV = 0x8544,
GL_COMBINER_AB_DOT_PRODUCT_NV = 0x8545,
GL_COMBINER_CD_DOT_PRODUCT_NV = 0x8546,
GL_COMBINER_MUX_SUM_NV = 0x8547,
GL_COMBINER_SCALE_NV = 0x8548,
GL_COMBINER_BIAS_NV = 0x8549,
GL_COMBINER_AB_OUTPUT_NV = 0x854A,
GL_COMBINER_CD_OUTPUT_NV = 0x854B,
GL_COMBINER_SUM_OUTPUT_NV = 0x854C,
GL_MAX_GENERAL_COMBINERS_NV = 0x854D,
GL_NUM_GENERAL_COMBINERS_NV = 0x854E,
GL_COLOR_SUM_CLAMP_NV = 0x854F,
GL_COMBINER0_NV = 0x8550,
GL_COMBINER1_NV = 0x8551,
GL_COMBINER2_NV = 0x8552,
GL_COMBINER3_NV = 0x8553,
GL_COMBINER4_NV = 0x8554,
GL_COMBINER5_NV = 0x8555,
GL_COMBINER6_NV = 0x8556,
GL_COMBINER7_NV = 0x8557,
GL_PER_STAGE_CONSTANTS_NV = 0x8535,
GL_SAMPLE_LOCATION_NV = 0x8E50,
GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = 0x933D,
GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = 0x933E,
GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = 0x933F,
GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = 0x9340,
GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = 0x9341,
GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = 0x9342,
GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = 0x9343,
GL_BUFFER_GPU_ADDRESS_NV = 0x8F1D,
GL_GPU_ADDRESS_NV = 0x8F34,
GL_MAX_SHADER_BUFFER_ADDRESS_NV = 0x8F35,
GL_WARP_SIZE_NV = 0x9339,
GL_WARPS_PER_SM_NV = 0x933A,
GL_SM_COUNT_NV = 0x933B,
GL_MAX_PROGRAM_PATCH_ATTRIBS_NV = 0x86D8,
GL_TESS_CONTROL_PROGRAM_NV = 0x891E,
GL_TESS_EVALUATION_PROGRAM_NV = 0x891F,
GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = 0x8C74,
GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = 0x8C75,
GL_EMBOSS_LIGHT_NV = 0x855D,
GL_EMBOSS_CONSTANT_NV = 0x855E,
GL_EMBOSS_MAP_NV = 0x855F,
GL_NORMAL_MAP_NV = 0x8511,
GL_REFLECTION_MAP_NV = 0x8512,
GL_COMBINE4_NV = 0x8503,
GL_SOURCE3_RGB_NV = 0x8583,
GL_SOURCE3_ALPHA_NV = 0x858B,
GL_OPERAND3_RGB_NV = 0x8593,
GL_OPERAND3_ALPHA_NV = 0x859B,
GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x888F,
GL_TEXTURE_COVERAGE_SAMPLES_NV = 0x9045,
GL_TEXTURE_COLOR_SAMPLES_NV = 0x9046,
GL_TEXTURE_RECTANGLE_NV = 0x84F5,
GL_TEXTURE_BINDING_RECTANGLE_NV = 0x84F6,
GL_PROXY_TEXTURE_RECTANGLE_NV = 0x84F7,
GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = 0x84F8,
GL_OFFSET_TEXTURE_RECTANGLE_NV = 0x864C,
GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x864D,
GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x864E,
GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x86D9,
GL_UNSIGNED_INT_S8_S8_8_8_NV = 0x86DA,
GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DB,
GL_DSDT_MAG_INTENSITY_NV = 0x86DC,
GL_SHADER_CONSISTENT_NV = 0x86DD,
GL_TEXTURE_SHADER_NV = 0x86DE,
GL_SHADER_OPERATION_NV = 0x86DF,
GL_CULL_MODES_NV = 0x86E0,
GL_OFFSET_TEXTURE_2D_MATRIX_NV = 0x86E1,
GL_OFFSET_TEXTURE_MATRIX_NV = 0x86E1,
GL_OFFSET_TEXTURE_2D_SCALE_NV = 0x86E2,
GL_OFFSET_TEXTURE_SCALE_NV = 0x86E2,
GL_OFFSET_TEXTURE_2D_BIAS_NV = 0x86E3,
GL_OFFSET_TEXTURE_BIAS_NV = 0x86E3,
GL_PREVIOUS_TEXTURE_INPUT_NV = 0x86E4,
GL_CONST_EYE_NV = 0x86E5,
GL_PASS_THROUGH_NV = 0x86E6,
GL_CULL_FRAGMENT_NV = 0x86E7,
GL_OFFSET_TEXTURE_2D_NV = 0x86E8,
GL_DEPENDENT_AR_TEXTURE_2D_NV = 0x86E9,
GL_DEPENDENT_GB_TEXTURE_2D_NV = 0x86EA,
GL_DOT_PRODUCT_NV = 0x86EC,
GL_DOT_PRODUCT_DEPTH_REPLACE_NV = 0x86ED,
GL_DOT_PRODUCT_TEXTURE_2D_NV = 0x86EE,
GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x86F0,
GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x86F1,
GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x86F2,
GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x86F3,
GL_HILO_NV = 0x86F4,
GL_DSDT_NV = 0x86F5,
GL_DSDT_MAG_NV = 0x86F6,
GL_DSDT_MAG_VIB_NV = 0x86F7,
GL_HILO16_NV = 0x86F8,
GL_SIGNED_HILO_NV = 0x86F9,
GL_SIGNED_HILO16_NV = 0x86FA,
GL_SIGNED_RGBA_NV = 0x86FB,
GL_SIGNED_RGBA8_NV = 0x86FC,
GL_SIGNED_RGB_NV = 0x86FE,
GL_SIGNED_RGB8_NV = 0x86FF,
GL_SIGNED_LUMINANCE_NV = 0x8701,
GL_SIGNED_LUMINANCE8_NV = 0x8702,
GL_SIGNED_LUMINANCE_ALPHA_NV = 0x8703,
GL_SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704,
GL_SIGNED_ALPHA_NV = 0x8705,
GL_SIGNED_ALPHA8_NV = 0x8706,
GL_SIGNED_INTENSITY_NV = 0x8707,
GL_SIGNED_INTENSITY8_NV = 0x8708,
GL_DSDT8_NV = 0x8709,
GL_DSDT8_MAG8_NV = 0x870A,
GL_DSDT8_MAG8_INTENSITY8_NV = 0x870B,
GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870C,
GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870D,
GL_HI_SCALE_NV = 0x870E,
GL_LO_SCALE_NV = 0x870F,
GL_DS_SCALE_NV = 0x8710,
GL_DT_SCALE_NV = 0x8711,
GL_MAGNITUDE_SCALE_NV = 0x8712,
GL_VIBRANCE_SCALE_NV = 0x8713,
GL_HI_BIAS_NV = 0x8714,
GL_LO_BIAS_NV = 0x8715,
GL_DS_BIAS_NV = 0x8716,
GL_DT_BIAS_NV = 0x8717,
GL_MAGNITUDE_BIAS_NV = 0x8718,
GL_VIBRANCE_BIAS_NV = 0x8719,
GL_TEXTURE_BORDER_VALUES_NV = 0x871A,
GL_TEXTURE_HI_SIZE_NV = 0x871B,
GL_TEXTURE_LO_SIZE_NV = 0x871C,
GL_TEXTURE_DS_SIZE_NV = 0x871D,
GL_TEXTURE_DT_SIZE_NV = 0x871E,
GL_TEXTURE_MAG_SIZE_NV = 0x871F,
//GL_UNSIGNED_INT_S8_S8_8_8_NV = 0x86DA,
//GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DB,
//GL_DSDT_MAG_INTENSITY_NV = 0x86DC,
GL_DOT_PRODUCT_TEXTURE_3D_NV = 0x86EF,
//GL_HILO_NV = 0x86F4,
//GL_DSDT_NV = 0x86F5,
//GL_DSDT_MAG_NV = 0x86F6,
//GL_DSDT_MAG_VIB_NV = 0x86F7,
//GL_HILO16_NV = 0x86F8,
//GL_SIGNED_HILO_NV = 0x86F9,
//GL_SIGNED_HILO16_NV = 0x86FA,
//GL_SIGNED_RGBA_NV = 0x86FB,
//GL_SIGNED_RGBA8_NV = 0x86FC,
//GL_SIGNED_RGB_NV = 0x86FE,
//GL_SIGNED_RGB8_NV = 0x86FF,
//GL_SIGNED_LUMINANCE_NV = 0x8701,
//GL_SIGNED_LUMINANCE8_NV = 0x8702,
//GL_SIGNED_LUMINANCE_ALPHA_NV = 0x8703,
//GL_SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704,
//GL_SIGNED_ALPHA_NV = 0x8705,
//GL_SIGNED_ALPHA8_NV = 0x8706,
//GL_SIGNED_INTENSITY_NV = 0x8707,
//GL_SIGNED_INTENSITY8_NV = 0x8708,
//GL_DSDT8_NV = 0x8709,
//GL_DSDT8_MAG8_NV = 0x870A,
//GL_DSDT8_MAG8_INTENSITY8_NV = 0x870B,
//GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870C,
//GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870D,
GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x8850,
GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x8851,
GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8852,
GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x8853,
GL_OFFSET_HILO_TEXTURE_2D_NV = 0x8854,
GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = 0x8855,
GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x8856,
GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8857,
GL_DEPENDENT_HILO_TEXTURE_2D_NV = 0x8858,
GL_DEPENDENT_RGB_TEXTURE_3D_NV = 0x8859,
GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x885A,
GL_DOT_PRODUCT_PASS_THROUGH_NV = 0x885B,
GL_DOT_PRODUCT_TEXTURE_1D_NV = 0x885C,
GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x885D,
GL_HILO8_NV = 0x885E,
GL_SIGNED_HILO8_NV = 0x885F,
GL_FORCE_BLUE_TO_ONE_NV = 0x8860,
GL_BACK_PRIMARY_COLOR_NV = 0x8C77,
GL_BACK_SECONDARY_COLOR_NV = 0x8C78,
GL_TEXTURE_COORD_NV = 0x8C79,
GL_CLIP_DISTANCE_NV = 0x8C7A,
GL_VERTEX_ID_NV = 0x8C7B,
GL_PRIMITIVE_ID_NV = 0x8C7C,
GL_GENERIC_ATTRIB_NV = 0x8C7D,
GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = 0x8C7E,
GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = 0x8C7F,
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = 0x8C80,
GL_ACTIVE_VARYINGS_NV = 0x8C81,
GL_ACTIVE_VARYING_MAX_LENGTH_NV = 0x8C82,
GL_TRANSFORM_FEEDBACK_VARYINGS_NV = 0x8C83,
GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = 0x8C84,
GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = 0x8C85,
GL_TRANSFORM_FEEDBACK_RECORD_NV = 0x8C86,
GL_PRIMITIVES_GENERATED_NV = 0x8C87,
GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = 0x8C88,
GL_RASTERIZER_DISCARD_NV = 0x8C89,
GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = 0x8C8A,
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = 0x8C8B,
GL_INTERLEAVED_ATTRIBS_NV = 0x8C8C,
GL_SEPARATE_ATTRIBS_NV = 0x8C8D,
GL_TRANSFORM_FEEDBACK_BUFFER_NV = 0x8C8E,
GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = 0x8C8F,
GL_TRANSFORM_FEEDBACK_NV = 0x8E22,
GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = 0x8E23,
GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = 0x8E24,
GL_TRANSFORM_FEEDBACK_BINDING_NV = 0x8E25,
GL_UNIFORM_BUFFER_UNIFIED_NV = 0x936E,
GL_UNIFORM_BUFFER_ADDRESS_NV = 0x936F,
GL_UNIFORM_BUFFER_LENGTH_NV = 0x9370,
GL_SURFACE_STATE_NV = 0x86EB,
GL_SURFACE_REGISTERED_NV = 0x86FD,
GL_SURFACE_MAPPED_NV = 0x8700,
GL_WRITE_DISCARD_NV = 0x88BE,
GL_VERTEX_ARRAY_RANGE_NV = 0x851D,
GL_VERTEX_ARRAY_RANGE_LENGTH_NV = 0x851E,
GL_VERTEX_ARRAY_RANGE_VALID_NV = 0x851F,
GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x8520,
GL_VERTEX_ARRAY_RANGE_POINTER_NV = 0x8521,
GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x8533,
//GL_INT64_NV = 0x140E,
//GL_UNSIGNED_INT64_NV = 0x140F,
GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 0x8F1E,
GL_ELEMENT_ARRAY_UNIFIED_NV = 0x8F1F,
GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 0x8F20,
GL_VERTEX_ARRAY_ADDRESS_NV = 0x8F21,
GL_NORMAL_ARRAY_ADDRESS_NV = 0x8F22,
GL_COLOR_ARRAY_ADDRESS_NV = 0x8F23,
GL_INDEX_ARRAY_ADDRESS_NV = 0x8F24,
GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = 0x8F25,
GL_EDGE_FLAG_ARRAY_ADDRESS_NV = 0x8F26,
GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = 0x8F27,
GL_FOG_COORD_ARRAY_ADDRESS_NV = 0x8F28,
GL_ELEMENT_ARRAY_ADDRESS_NV = 0x8F29,
GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = 0x8F2A,
GL_VERTEX_ARRAY_LENGTH_NV = 0x8F2B,
GL_NORMAL_ARRAY_LENGTH_NV = 0x8F2C,
GL_COLOR_ARRAY_LENGTH_NV = 0x8F2D,
GL_INDEX_ARRAY_LENGTH_NV = 0x8F2E,
GL_TEXTURE_COORD_ARRAY_LENGTH_NV = 0x8F2F,
GL_EDGE_FLAG_ARRAY_LENGTH_NV = 0x8F30,
GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = 0x8F31,
GL_FOG_COORD_ARRAY_LENGTH_NV = 0x8F32,
GL_ELEMENT_ARRAY_LENGTH_NV = 0x8F33,
GL_DRAW_INDIRECT_UNIFIED_NV = 0x8F40,
GL_DRAW_INDIRECT_ADDRESS_NV = 0x8F41,
GL_DRAW_INDIRECT_LENGTH_NV = 0x8F42,
GL_VERTEX_PROGRAM_NV = 0x8620,
GL_VERTEX_STATE_PROGRAM_NV = 0x8621,
GL_ATTRIB_ARRAY_SIZE_NV = 0x8623,
GL_ATTRIB_ARRAY_STRIDE_NV = 0x8624,
GL_ATTRIB_ARRAY_TYPE_NV = 0x8625,
GL_CURRENT_ATTRIB_NV = 0x8626,
GL_PROGRAM_LENGTH_NV = 0x8627,
GL_PROGRAM_STRING_NV = 0x8628,
GL_MODELVIEW_PROJECTION_NV = 0x8629,
GL_IDENTITY_NV = 0x862A,
GL_INVERSE_NV = 0x862B,
GL_TRANSPOSE_NV = 0x862C,
GL_INVERSE_TRANSPOSE_NV = 0x862D,
GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = 0x862E,
GL_MAX_TRACK_MATRICES_NV = 0x862F,
GL_MATRIX0_NV = 0x8630,
GL_MATRIX1_NV = 0x8631,
GL_MATRIX2_NV = 0x8632,
GL_MATRIX3_NV = 0x8633,
GL_MATRIX4_NV = 0x8634,
GL_MATRIX5_NV = 0x8635,
GL_MATRIX6_NV = 0x8636,
GL_MATRIX7_NV = 0x8637,
GL_CURRENT_MATRIX_STACK_DEPTH_NV = 0x8640,
GL_CURRENT_MATRIX_NV = 0x8641,
GL_VERTEX_PROGRAM_POINT_SIZE_NV = 0x8642,
GL_VERTEX_PROGRAM_TWO_SIDE_NV = 0x8643,
GL_PROGRAM_PARAMETER_NV = 0x8644,
GL_ATTRIB_ARRAY_POINTER_NV = 0x8645,
GL_PROGRAM_TARGET_NV = 0x8646,
GL_PROGRAM_RESIDENT_NV = 0x8647,
GL_TRACK_MATRIX_NV = 0x8648,
GL_TRACK_MATRIX_TRANSFORM_NV = 0x8649,
GL_VERTEX_PROGRAM_BINDING_NV = 0x864A,
GL_PROGRAM_ERROR_POSITION_NV = 0x864B,
GL_VERTEX_ATTRIB_ARRAY0_NV = 0x8650,
GL_VERTEX_ATTRIB_ARRAY1_NV = 0x8651,
GL_VERTEX_ATTRIB_ARRAY2_NV = 0x8652,
GL_VERTEX_ATTRIB_ARRAY3_NV = 0x8653,
GL_VERTEX_ATTRIB_ARRAY4_NV = 0x8654,
GL_VERTEX_ATTRIB_ARRAY5_NV = 0x8655,
GL_VERTEX_ATTRIB_ARRAY6_NV = 0x8656,
GL_VERTEX_ATTRIB_ARRAY7_NV = 0x8657,
GL_VERTEX_ATTRIB_ARRAY8_NV = 0x8658,
GL_VERTEX_ATTRIB_ARRAY9_NV = 0x8659,
GL_VERTEX_ATTRIB_ARRAY10_NV = 0x865A,
GL_VERTEX_ATTRIB_ARRAY11_NV = 0x865B,
GL_VERTEX_ATTRIB_ARRAY12_NV = 0x865C,
GL_VERTEX_ATTRIB_ARRAY13_NV = 0x865D,
GL_VERTEX_ATTRIB_ARRAY14_NV = 0x865E,
GL_VERTEX_ATTRIB_ARRAY15_NV = 0x865F,
GL_MAP1_VERTEX_ATTRIB0_4_NV = 0x8660,
GL_MAP1_VERTEX_ATTRIB1_4_NV = 0x8661,
GL_MAP1_VERTEX_ATTRIB2_4_NV = 0x8662,
GL_MAP1_VERTEX_ATTRIB3_4_NV = 0x8663,
GL_MAP1_VERTEX_ATTRIB4_4_NV = 0x8664,
GL_MAP1_VERTEX_ATTRIB5_4_NV = 0x8665,
GL_MAP1_VERTEX_ATTRIB6_4_NV = 0x8666,
GL_MAP1_VERTEX_ATTRIB7_4_NV = 0x8667,
GL_MAP1_VERTEX_ATTRIB8_4_NV = 0x8668,
GL_MAP1_VERTEX_ATTRIB9_4_NV = 0x8669,
GL_MAP1_VERTEX_ATTRIB10_4_NV = 0x866A,
GL_MAP1_VERTEX_ATTRIB11_4_NV = 0x866B,
GL_MAP1_VERTEX_ATTRIB12_4_NV = 0x866C,
GL_MAP1_VERTEX_ATTRIB13_4_NV = 0x866D,
GL_MAP1_VERTEX_ATTRIB14_4_NV = 0x866E,
GL_MAP1_VERTEX_ATTRIB15_4_NV = 0x866F,
GL_MAP2_VERTEX_ATTRIB0_4_NV = 0x8670,
GL_MAP2_VERTEX_ATTRIB1_4_NV = 0x8671,
GL_MAP2_VERTEX_ATTRIB2_4_NV = 0x8672,
GL_MAP2_VERTEX_ATTRIB3_4_NV = 0x8673,
GL_MAP2_VERTEX_ATTRIB4_4_NV = 0x8674,
GL_MAP2_VERTEX_ATTRIB5_4_NV = 0x8675,
GL_MAP2_VERTEX_ATTRIB6_4_NV = 0x8676,
GL_MAP2_VERTEX_ATTRIB7_4_NV = 0x8677,
GL_MAP2_VERTEX_ATTRIB8_4_NV = 0x8678,
GL_MAP2_VERTEX_ATTRIB9_4_NV = 0x8679,
GL_MAP2_VERTEX_ATTRIB10_4_NV = 0x867A,
GL_MAP2_VERTEX_ATTRIB11_4_NV = 0x867B,
GL_MAP2_VERTEX_ATTRIB12_4_NV = 0x867C,
GL_MAP2_VERTEX_ATTRIB13_4_NV = 0x867D,
GL_MAP2_VERTEX_ATTRIB14_4_NV = 0x867E,
GL_MAP2_VERTEX_ATTRIB15_4_NV = 0x867F,
//GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 0x88F4,
//GL_MAX_PROGRAM_CALL_DEPTH_NV = 0x88F5,
MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x8B4C,
GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = 0x88FD,
GL_VIDEO_BUFFER_NV = 0x9020,
GL_VIDEO_BUFFER_BINDING_NV = 0x9021,
GL_FIELD_UPPER_NV = 0x9022,
GL_FIELD_LOWER_NV = 0x9023,
GL_NUM_VIDEO_CAPTURE_STREAMS_NV = 0x9024,
GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = 0x9025,
GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = 0x9026,
GL_LAST_VIDEO_CAPTURE_STATUS_NV = 0x9027,
GL_VIDEO_BUFFER_PITCH_NV = 0x9028,
GL_VIDEO_COLOR_CONVERSION_MATRIX_NV = 0x9029,
GL_VIDEO_COLOR_CONVERSION_MAX_NV = 0x902A,
GL_VIDEO_COLOR_CONVERSION_MIN_NV = 0x902B,
GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = 0x902C,
GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = 0x902D,
GL_PARTIAL_SUCCESS_NV = 0x902E,
GL_SUCCESS_NV = 0x902F,
GL_FAILURE_NV = 0x9030,
GL_YCBYCR8_422_NV = 0x9031,
GL_YCBAYCR8A_4224_NV = 0x9032,
GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = 0x9033,
GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = 0x9034,
GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = 0x9035,
GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = 0x9036,
GL_Z4Y12Z4CB12Z4CR12_444_NV = 0x9037,
GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = 0x9038,
GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = 0x9039,
GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = 0x903A,
GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = 0x903B,
GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = 0x903C,
GL_PALETTE4_RGB8_OES = 0x8B90,
GL_PALETTE4_RGBA8_OES = 0x8B91,
GL_PALETTE4_R5_G6_B5_OES = 0x8B92,
GL_PALETTE4_RGBA4_OES = 0x8B93,
GL_PALETTE4_RGB5_A1_OES = 0x8B94,
GL_PALETTE8_RGB8_OES = 0x8B95,
GL_PALETTE8_RGBA8_OES = 0x8B96,
GL_PALETTE8_R5_G6_B5_OES = 0x8B97,
GL_PALETTE8_RGBA4_OES = 0x8B98,
GL_PALETTE8_RGB5_A1_OES = 0x8B99,
GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 0x8B9A,
GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 0x8B9B,
GL_INTERLACE_OML = 0x8980,
GL_INTERLACE_READ_OML = 0x8981,
GL_PACK_RESAMPLE_OML = 0x8984,
GL_UNPACK_RESAMPLE_OML = 0x8985,
GL_RESAMPLE_REPLICATE_OML = 0x8986,
GL_RESAMPLE_ZERO_FILL_OML = 0x8987,
GL_RESAMPLE_AVERAGE_OML = 0x8988,
GL_RESAMPLE_DECIMATE_OML = 0x8989,
GL_FORMAT_SUBSAMPLE_24_24_OML = 0x8982,
GL_FORMAT_SUBSAMPLE_244_244_OML = 0x8983,
GL_PREFER_DOUBLEBUFFER_HINT_PGI = 107000,
GL_CONSERVE_MEMORY_HINT_PGI = 107005,
GL_RECLAIM_MEMORY_HINT_PGI = 107006,
GL_NATIVE_GRAPHICS_HANDLE_PGI = 107010,
GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 107011,
GL_NATIVE_GRAPHICS_END_HINT_PGI = 107012,
GL_ALWAYS_FAST_HINT_PGI = 107020,
GL_ALWAYS_SOFT_HINT_PGI = 107021,
GL_ALLOW_DRAW_OBJ_HINT_PGI = 107022,
GL_ALLOW_DRAW_WIN_HINT_PGI = 107023,
GL_ALLOW_DRAW_FRG_HINT_PGI = 107024,
GL_ALLOW_DRAW_MEM_HINT_PGI = 107025,
GL_STRICT_DEPTHFUNC_HINT_PGI = 107030,
GL_STRICT_LIGHTING_HINT_PGI = 107031,
GL_STRICT_SCISSOR_HINT_PGI = 107032,
GL_FULL_STIPPLE_HINT_PGI = 107033,
GL_CLIP_NEAR_HINT_PGI = 107040,
GL_CLIP_FAR_HINT_PGI = 107041,
GL_WIDE_LINE_HINT_PGI = 107042,
GL_BACK_NORMALS_HINT_PGI = 107043,
GL_VERTEX23_BIT_PGI = 0x00000004,
GL_VERTEX4_BIT_PGI = 0x00000008,
GL_COLOR3_BIT_PGI = 0x00010000,
GL_COLOR4_BIT_PGI = 0x00020000,
GL_EDGEFLAG_BIT_PGI = 0x00040000,
GL_INDEX_BIT_PGI = 0x00080000,
GL_MAT_AMBIENT_BIT_PGI = 0x00100000,
GL_VERTEX_DATA_HINT_PGI = 107050,
GL_VERTEX_CONSISTENT_HINT_PGI = 107051,
GL_MATERIAL_SIDE_HINT_PGI = 107052,
GL_MAX_VERTEX_HINT_PGI = 107053,
GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 0x00200000,
GL_MAT_DIFFUSE_BIT_PGI = 0x00400000,
GL_MAT_EMISSION_BIT_PGI = 0x00800000,
GL_MAT_COLOR_INDEXES_BIT_PGI = 0x01000000,
GL_MAT_SHININESS_BIT_PGI = 0x02000000,
GL_MAT_SPECULAR_BIT_PGI = 0x04000000,
GL_NORMAL_BIT_PGI = 0x08000000,
GL_TEXCOORD1_BIT_PGI = 0x10000000,
GL_TEXCOORD2_BIT_PGI = 0x20000000,
GL_TEXCOORD3_BIT_PGI = 0x40000000,
GL_TEXCOORD4_BIT_PGI = 0x80000000,
GL_ERROR_REGAL = 0x9322,
GL_DEBUG_REGAL = 0x9323,
GL_LOG_REGAL = 0x9324,
GL_EMULATION_REGAL = 0x9325,
GL_DRIVER_REGAL = 0x9326,
GL_MISSING_REGAL = 0x9360,
GL_TRACE_REGAL = 0x9361,
GL_CACHE_REGAL = 0x9362,
GL_CODE_REGAL = 0x9363,
GL_STATISTICS_REGAL = 0x9364,
GL_LOG_ERROR_REGAL = 0x9319,
GL_LOG_WARNING_REGAL = 0x931A,
GL_LOG_INFO_REGAL = 0x931B,
GL_LOG_APP_REGAL = 0x931C,
GL_LOG_DRIVER_REGAL = 0x931D,
GL_LOG_INTERNAL_REGAL = 0x931E,
GL_LOG_DEBUG_REGAL = 0x931F,
GL_LOG_STATUS_REGAL = 0x9320,
GL_LOG_HTTP_REGAL = 0x9321,
GL_SCREEN_COORDINATES_REND = 0x8490,
GL_INVERTED_SCREEN_W_REND = 0x8491,
GL_RGB_S3TC = 0x83A0,
GL_RGB4_S3TC = 0x83A1,
GL_RGBA_S3TC = 0x83A2,
GL_RGBA4_S3TC = 0x83A3,
GL_RGBA_DXT5_S3TC = 0x83A4,
GL_RGBA4_DXT5_S3TC = 0x83A5,
GL_EXTENDED_RANGE_SGIS = 0x85A5,
GL_MIN_RED_SGIS = 0x85A6,
GL_MAX_RED_SGIS = 0x85A7,
GL_MIN_GREEN_SGIS = 0x85A8,
GL_MAX_GREEN_SGIS = 0x85A9,
GL_MIN_BLUE_SGIS = 0x85AA,
GL_MAX_BLUE_SGIS = 0x85AB,
GL_MIN_ALPHA_SGIS = 0x85AC,
GL_MAX_ALPHA_SGIS = 0x85AD,
GL_GENERATE_MIPMAP_SGIS = 0x8191,
GL_GENERATE_MIPMAP_HINT_SGIS = 0x8192,
GL_MULTISAMPLE_SGIS = 0x809D,
GL_SAMPLE_ALPHA_TO_MASK_SGIS = 0x809E,
GL_SAMPLE_ALPHA_TO_ONE_SGIS = 0x809F,
GL_SAMPLE_MASK_SGIS = 0x80A0,
GL_1PASS_SGIS = 0x80A1,
GL_2PASS_0_SGIS = 0x80A2,
GL_2PASS_1_SGIS = 0x80A3,
GL_4PASS_0_SGIS = 0x80A4,
GL_4PASS_1_SGIS = 0x80A5,
GL_4PASS_2_SGIS = 0x80A6,
GL_4PASS_3_SGIS = 0x80A7,
GL_SAMPLE_BUFFERS_SGIS = 0x80A8,
GL_SAMPLES_SGIS = 0x80A9,
GL_SAMPLE_MASK_VALUE_SGIS = 0x80AA,
GL_SAMPLE_MASK_INVERT_SGIS = 0x80AB,
GL_SAMPLE_PATTERN_SGIS = 0x80AC,
GL_EYE_DISTANCE_TO_POINT_SGIS = 0x81F0,
GL_OBJECT_DISTANCE_TO_POINT_SGIS = 0x81F1,
GL_EYE_DISTANCE_TO_LINE_SGIS = 0x81F2,
GL_OBJECT_DISTANCE_TO_LINE_SGIS = 0x81F3,
GL_EYE_POINT_SGIS = 0x81F4,
GL_OBJECT_POINT_SGIS = 0x81F5,
GL_EYE_LINE_SGIS = 0x81F6,
GL_OBJECT_LINE_SGIS = 0x81F7,
GL_CLAMP_TO_BORDER_SGIS = 0x812D,
GL_CLAMP_TO_EDGE_SGIS = 0x812F,
GL_TEXTURE_MIN_LOD_SGIS = 0x813A,
GL_TEXTURE_MAX_LOD_SGIS = 0x813B,
GL_TEXTURE_BASE_LEVEL_SGIS = 0x813C,
GL_TEXTURE_MAX_LEVEL_SGIS = 0x813D,
GL_ASYNC_MARKER_SGIX = 0x8329,
GL_ASYNC_HISTOGRAM_SGIX = 0x832C,
GL_MAX_ASYNC_HISTOGRAM_SGIX = 0x832D,
GL_ASYNC_TEX_IMAGE_SGIX = 0x835C,
GL_ASYNC_DRAW_PIXELS_SGIX = 0x835D,
GL_ASYNC_READ_PIXELS_SGIX = 0x835E,
GL_MAX_ASYNC_TEX_IMAGE_SGIX = 0x835F,
GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360,
GL_MAX_ASYNC_READ_PIXELS_SGIX = 0x8361,
GL_ALPHA_MIN_SGIX = 0x8320,
GL_ALPHA_MAX_SGIX = 0x8321,
GL_CONVOLUTION_HINT_SGIX = 0x8316,
GL_DEPTH_COMPONENT16_SGIX = 0x81A5,
GL_DEPTH_COMPONENT24_SGIX = 0x81A6,
GL_DEPTH_COMPONENT32_SGIX = 0x81A7,
GL_FOG_OFFSET_SGIX = 0x8198,
GL_FOG_OFFSET_VALUE_SGIX = 0x8199,
GL_FOG_PATCHY_FACTOR_SGIX = 0,
GL_FRAGMENT_FOG_SGIX = 0,
GL_TEXTURE_FOG_SGIX = 0,
GL_INTERLACE_SGIX = 0x8094,
GL_PACK_RESAMPLE_SGIX = 0x842E,
GL_UNPACK_RESAMPLE_SGIX = 0x842F,
GL_RESAMPLE_DECIMATE_SGIX = 0x8430,
GL_RESAMPLE_REPLICATE_SGIX = 0x8433,
GL_RESAMPLE_ZERO_FILL_SGIX = 0x8434,
GL_TEXTURE_COMPARE_SGIX = 0x819A,
GL_TEXTURE_COMPARE_OPERATOR_SGIX = 0x819B,
GL_TEXTURE_LEQUAL_R_SGIX = 0x819C,
GL_TEXTURE_GEQUAL_R_SGIX = 0x819D,
GL_SHADOW_AMBIENT_SGIX = 0x80BF,
GL_TEXTURE_MAX_CLAMP_S_SGIX = 0x8369,
GL_TEXTURE_MAX_CLAMP_T_SGIX = 0x836A,
GL_TEXTURE_MAX_CLAMP_R_SGIX = 0x836B,
GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E,
GL_RGB_SIGNED_SGIX = 0x85E0,
GL_RGBA_SIGNED_SGIX = 0x85E1,
GL_ALPHA_SIGNED_SGIX = 0x85E2,
GL_LUMINANCE_SIGNED_SGIX = 0x85E3,
GL_INTENSITY_SIGNED_SGIX = 0x85E4,
GL_LUMINANCE_ALPHA_SIGNED_SGIX = 0x85E5,
GL_RGB16_SIGNED_SGIX = 0x85E6,
GL_RGBA16_SIGNED_SGIX = 0x85E7,
GL_ALPHA16_SIGNED_SGIX = 0x85E8,
GL_LUMINANCE16_SIGNED_SGIX = 0x85E9,
GL_INTENSITY16_SIGNED_SGIX = 0x85EA,
GL_LUMINANCE16_ALPHA16_SIGNED_SGIX = 0x85EB,
GL_RGB_EXTENDED_RANGE_SGIX = 0x85EC,
GL_RGBA_EXTENDED_RANGE_SGIX = 0x85ED,
GL_ALPHA_EXTENDED_RANGE_SGIX = 0x85EE,
GL_LUMINANCE_EXTENDED_RANGE_SGIX = 0x85EF,
GL_INTENSITY_EXTENDED_RANGE_SGIX = 0x85F0,
GL_LUMINANCE_ALPHA_EXTENDED_RANGE_SGIX = 0x85F1,
GL_RGB16_EXTENDED_RANGE_SGIX = 0x85F2,
GL_RGBA16_EXTENDED_RANGE_SGIX = 0x85F3,
GL_ALPHA16_EXTENDED_RANGE_SGIX = 0x85F4,
GL_LUMINANCE16_EXTENDED_RANGE_SGIX = 0x85F5,
GL_INTENSITY16_EXTENDED_RANGE_SGIX = 0x85F6,
GL_LUMINANCE16_ALPHA16_EXTENDED_RANGE_SGIX = 0x85F7,
GL_MIN_LUMINANCE_SGIS = 0x85F8,
GL_MAX_LUMINANCE_SGIS = 0x85F9,
GL_MIN_INTENSITY_SGIS = 0x85FA,
GL_MAX_INTENSITY_SGIS = 0x85FB,
GL_POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179,
GL_POST_TEXTURE_FILTER_SCALE_SGIX = 0x817A,
GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B,
GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C,
GL_VERTEX_PRECLIP_SGIX = 0x83EE,
GL_VERTEX_PRECLIP_HINT_SGIX = 0x83EF,
//GL_VERTEX_PRECLIP_SGIX = 0x83EE,
//GL_VERTEX_PRECLIP_HINT_SGIX = 0x83EF,
GL_COLOR_MATRIX_SGI = 0x80B1,
GL_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2,
GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3,
GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4,
GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5,
GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6,
GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7,
GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8,
GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9,
GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA,
GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB,
GL_COLOR_TABLE_SGI = 0x80D0,
GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1,
GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2,
GL_PROXY_COLOR_TABLE_SGI = 0x80D3,
GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D4,
GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D5,
GL_COLOR_TABLE_SCALE_SGI = 0x80D6,
GL_COLOR_TABLE_BIAS_SGI = 0x80D7,
GL_COLOR_TABLE_FORMAT_SGI = 0x80D8,
GL_COLOR_TABLE_WIDTH_SGI = 0x80D9,
GL_COLOR_TABLE_RED_SIZE_SGI = 0x80DA,
GL_COLOR_TABLE_GREEN_SIZE_SGI = 0x80DB,
GL_COLOR_TABLE_BLUE_SIZE_SGI = 0x80DC,
GL_COLOR_TABLE_ALPHA_SIZE_SGI = 0x80DD,
GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = 0x80DE,
GL_COLOR_TABLE_INTENSITY_SIZE_SGI = 0x80DF,
GL_TEXTURE_COLOR_TABLE_SGI = 0x80BC,
GL_PROXY_TEXTURE_COLOR_TABLE_SGI = 0x80BD,
GL_UNPACK_CONSTANT_DATA_SUNX = 0x81D5,
GL_TEXTURE_CONSTANT_DATA_SUNX = 0x81D6,
GL_WRAP_BORDER_SUN = 0x81D4,
GL_GLOBAL_ALPHA_SUN = 0x81D9,
GL_GLOBAL_ALPHA_FACTOR_SUN = 0x81DA,
GL_QUAD_MESH_SUN = 0x8614,
GL_TRIANGLE_MESH_SUN = 0x8615,
GL_SLICE_ACCUM_SUN = 0x85CC,
GL_RESTART_SUN = 0x01,
GL_REPLACE_MIDDLE_SUN = 0x02,
GL_REPLACE_OLDEST_SUN = 0x03,
GL_TRIANGLE_LIST_SUN = 0x81D7,
GL_REPLACEMENT_CODE_SUN = 0x81D8,
GL_REPLACEMENT_CODE_ARRAY_SUN = 0x85C0,
GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = 0x85C1,
GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 0x85C2,
GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = 0x85C3,
GL_R1UI_V3F_SUN = 0x85C4,
GL_R1UI_C4UB_V3F_SUN = 0x85C5,
GL_R1UI_C3F_V3F_SUN = 0x85C6,
GL_R1UI_N3F_V3F_SUN = 0x85C7,
GL_R1UI_C4F_N3F_V3F_SUN = 0x85C8,
GL_R1UI_T2F_V3F_SUN = 0x85C9,
GL_R1UI_T2F_N3F_V3F_SUN = 0x85CA,
GL_R1UI_T2F_C4F_N3F_V3F_SUN = 0x85CB,
GL_PHONG_WIN = 0x80EA,
GL_PHONG_HINT_WIN = 0x80EB,
GL_FOG_SPECULAR_TEXTURE_WIN = 0x80EC,
};

extern void ( * glAccum) (GLenum op, GLfloat value) __asm__("__glewAccum");
extern void ( * glAlphaFunc) (GLenum func, GLclampf ref) __asm__("__glewAlphaFunc");
extern GLboolean ( * glAreTexturesResident) (GLsizei n, const GLuint *textures, GLboolean *residences) __asm__("__glewAreTexturesResident");
extern void ( * glArrayElement) (GLint i) __asm__("__glewArrayElement");
extern void ( * glBegin) (GLenum mode) __asm__("__glewBegin");
extern void ( * glBindTexture) (GLenum target, GLuint texture) __asm__("__glewBindTexture");
extern void ( * glBitmap) (GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap) __asm__("__glewBitmap");
extern void ( * glBlendFunc) (GLenum sfactor, GLenum dfactor) __asm__("__glewBlendFunc");
extern void ( * glCallList) (GLuint list) __asm__("__glewCallList");
extern void ( * glCallLists) (GLsizei n, GLenum type, const GLvoid *lists) __asm__("__glewCallLists");
extern void ( * glClear) (GLbitfield mask) __asm__("__glewClear");
extern void ( * glClearAccum) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) __asm__("__glewClearAccum");
extern void ( * glClearColor) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha) __asm__("__glewClearColor");
extern void ( * glClearDepth) (GLclampd depth) __asm__("__glewClearDepth");
extern void ( * glClearIndex) (GLfloat c) __asm__("__glewClearIndex");
extern void ( * glClearStencil) (GLint s) __asm__("__glewClearStencil");
extern void ( * glClipPlane) (GLenum plane, const GLdouble *equation) __asm__("__glewClipPlane");
extern void ( * glColor3b) (GLbyte red, GLbyte green, GLbyte blue) __asm__("__glewColor3b");
extern void ( * glColor3bv) (const GLbyte *v) __asm__("__glewColor3bv");
extern void ( * glColor3d) (GLdouble red, GLdouble green, GLdouble blue) __asm__("__glewColor3d");
extern void ( * glColor3dv) (const GLdouble *v) __asm__("__glewColor3dv");
extern void ( * glColor3f) (GLfloat red, GLfloat green, GLfloat blue) __asm__("__glewColor3f");
extern void ( * glColor3fv) (const GLfloat *v) __asm__("__glewColor3fv");
extern void ( * glColor3i) (GLint red, GLint green, GLint blue) __asm__("__glewColor3i");
extern void ( * glColor3iv) (const GLint *v) __asm__("__glewColor3iv");
extern void ( * glColor3s) (GLshort red, GLshort green, GLshort blue) __asm__("__glewColor3s");
extern void ( * glColor3sv) (const GLshort *v) __asm__("__glewColor3sv");
extern void ( * glColor3ub) (GLubyte red, GLubyte green, GLubyte blue) __asm__("__glewColor3ub");
extern void ( * glColor3ubv) (const GLubyte *v) __asm__("__glewColor3ubv");
extern void ( * glColor3ui) (GLuint red, GLuint green, GLuint blue) __asm__("__glewColor3ui");
extern void ( * glColor3uiv) (const GLuint *v) __asm__("__glewColor3uiv");
extern void ( * glColor3us) (GLushort red, GLushort green, GLushort blue) __asm__("__glewColor3us");
extern void ( * glColor3usv) (const GLushort *v) __asm__("__glewColor3usv");
extern void ( * glColor4b) (GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) __asm__("__glewColor4b");
extern void ( * glColor4bv) (const GLbyte *v) __asm__("__glewColor4bv");
extern void ( * glColor4d) (GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) __asm__("__glewColor4d");
extern void ( * glColor4dv) (const GLdouble *v) __asm__("__glewColor4dv");
extern void ( * glColor4f) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) __asm__("__glewColor4f");
extern void ( * glColor4fv) (const GLfloat *v) __asm__("__glewColor4fv");
extern void ( * glColor4i) (GLint red, GLint green, GLint blue, GLint alpha) __asm__("__glewColor4i");
extern void ( * glColor4iv) (const GLint *v) __asm__("__glewColor4iv");
extern void ( * glColor4s) (GLshort red, GLshort green, GLshort blue, GLshort alpha) __asm__("__glewColor4s");
extern void ( * glColor4sv) (const GLshort *v) __asm__("__glewColor4sv");
extern void ( * glColor4ub) (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) __asm__("__glewColor4ub");
extern void ( * glColor4ubv) (const GLubyte *v) __asm__("__glewColor4ubv");
extern void ( * glColor4ui) (GLuint red, GLuint green, GLuint blue, GLuint alpha) __asm__("__glewColor4ui");
extern void ( * glColor4uiv) (const GLuint *v) __asm__("__glewColor4uiv");
extern void ( * glColor4us) (GLushort red, GLushort green, GLushort blue, GLushort alpha) __asm__("__glewColor4us");
extern void ( * glColor4usv) (const GLushort *v) __asm__("__glewColor4usv");
extern void ( * glColorMask) (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) __asm__("__glewColorMask");
extern void ( * glColorMaterial) (GLenum face, GLenum mode) __asm__("__glewColorMaterial");
extern void ( * glColorPointer) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) __asm__("__glewColorPointer");
extern void ( * glCopyPixels) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum type) __asm__("__glewCopyPixels");
extern void ( * glCopyTexImage1D) (GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border) __asm__("__glewCopyTexImage1D");
extern void ( * glCopyTexImage2D) (GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) __asm__("__glewCopyTexImage2D");
extern void ( * glCopyTexSubImage1D) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) __asm__("__glewCopyTexSubImage1D");
extern void ( * glCopyTexSubImage2D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) __asm__("__glewCopyTexSubImage2D");
extern void ( * glCullFace) (GLenum mode) __asm__("__glewCullFace");
extern void ( * glDeleteLists) (GLuint list, GLsizei range) __asm__("__glewDeleteLists");
extern void ( * glDeleteTextures) (GLsizei n, const GLuint *textures) __asm__("__glewDeleteTextures");
extern void ( * glDepthFunc) (GLenum func) __asm__("__glewDepthFunc");
extern void ( * glDepthMask) (GLboolean flag) __asm__("__glewDepthMask");
extern void ( * glDepthRange) (GLclampd zNear, GLclampd zFar) __asm__("__glewDepthRange");
extern void ( * glDisable) (GLenum cap) __asm__("__glewDisable");
extern void ( * glDisableClientState) (GLenum array) __asm__("__glewDisableClientState");
extern void ( * glDrawArrays) (GLenum mode, GLint first, GLsizei count) __asm__("__glewDrawArrays");
extern void ( * glDrawBuffer) (GLenum mode) __asm__("__glewDrawBuffer");
extern void ( * glDrawElements) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices) __asm__("__glewDrawElements");
extern void ( * glDrawPixels) (GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels) __asm__("__glewDrawPixels");
extern void ( * glEdgeFlag) (GLboolean flag) __asm__("__glewEdgeFlag");
extern void ( * glEdgeFlagPointer) (GLsizei stride, const GLvoid *pointer) __asm__("__glewEdgeFlagPointer");
extern void ( * glEdgeFlagv) (const GLboolean *flag) __asm__("__glewEdgeFlagv");
extern void ( * glEnable) (GLenum cap) __asm__("__glewEnable");
extern void ( * glEnableClientState) (GLenum array) __asm__("__glewEnableClientState");
extern void ( * glEnd) (void) __asm__("__glewEnd");
extern void ( * glEndList) (void) __asm__("__glewEndList");
extern void ( * glEvalCoord1d) (GLdouble u) __asm__("__glewEvalCoord1d");
extern void ( * glEvalCoord1dv) (const GLdouble *u) __asm__("__glewEvalCoord1dv");
extern void ( * glEvalCoord1f) (GLfloat u) __asm__("__glewEvalCoord1f");
extern void ( * glEvalCoord1fv) (const GLfloat *u) __asm__("__glewEvalCoord1fv");
extern void ( * glEvalCoord2d) (GLdouble u, GLdouble v) __asm__("__glewEvalCoord2d");
extern void ( * glEvalCoord2dv) (const GLdouble *u) __asm__("__glewEvalCoord2dv");
extern void ( * glEvalCoord2f) (GLfloat u, GLfloat v) __asm__("__glewEvalCoord2f");
extern void ( * glEvalCoord2fv) (const GLfloat *u) __asm__("__glewEvalCoord2fv");
extern void ( * glEvalMesh1) (GLenum mode, GLint i1, GLint i2) __asm__("__glewEvalMesh1");
extern void ( * glEvalMesh2) (GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) __asm__("__glewEvalMesh2");
extern void ( * glEvalPoint1) (GLint i) __asm__("__glewEvalPoint1");
extern void ( * glEvalPoint2) (GLint i, GLint j) __asm__("__glewEvalPoint2");
extern void ( * glFeedbackBuffer) (GLsizei size, GLenum type, GLfloat *buffer) __asm__("__glewFeedbackBuffer");
extern void ( * glFinish) (void) __asm__("__glewFinish");
extern void ( * glFlush) (void) __asm__("__glewFlush");
extern void ( * glFogf) (GLenum pname, GLfloat param) __asm__("__glewFogf");
extern void ( * glFogfv) (GLenum pname, const GLfloat *params) __asm__("__glewFogfv");
extern void ( * glFogi) (GLenum pname, GLint param) __asm__("__glewFogi");
extern void ( * glFogiv) (GLenum pname, const GLint *params) __asm__("__glewFogiv");
extern void ( * glFrontFace) (GLenum mode) __asm__("__glewFrontFace");
extern void ( * glFrustum) (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) __asm__("__glewFrustum");
extern GLuint ( * glGenLists) (GLsizei range) __asm__("__glewGenLists");
extern void ( * glGenTextures) (GLsizei n, GLuint *textures) __asm__("__glewGenTextures");
extern void ( * glGetBooleanv) (GLenum pname, GLboolean *params) __asm__("__glewGetBooleanv");
extern void ( * glGetClipPlane) (GLenum plane, GLdouble *equation) __asm__("__glewGetClipPlane");
extern void ( * glGetDoublev) (GLenum pname, GLdouble *params) __asm__("__glewGetDoublev");
extern GLenum ( * glGetError) (void) __asm__("__glewGetError");
extern void ( * glGetFloatv) (GLenum pname, GLfloat *params) __asm__("__glewGetFloatv");
extern void ( * glGetIntegerv) (GLenum pname, GLint *params) __asm__("__glewGetIntegerv");
extern void ( * glGetLightfv) (GLenum light, GLenum pname, GLfloat *params) __asm__("__glewGetLightfv");
extern void ( * glGetLightiv) (GLenum light, GLenum pname, GLint *params) __asm__("__glewGetLightiv");
extern void ( * glGetMapdv) (GLenum target, GLenum query, GLdouble *v) __asm__("__glewGetMapdv");
extern void ( * glGetMapfv) (GLenum target, GLenum query, GLfloat *v) __asm__("__glewGetMapfv");
extern void ( * glGetMapiv) (GLenum target, GLenum query, GLint *v) __asm__("__glewGetMapiv");
extern void ( * glGetMaterialfv) (GLenum face, GLenum pname, GLfloat *params) __asm__("__glewGetMaterialfv");
extern void ( * glGetMaterialiv) (GLenum face, GLenum pname, GLint *params) __asm__("__glewGetMaterialiv");
extern void ( * glGetPixelMapfv) (GLenum map, GLfloat *values) __asm__("__glewGetPixelMapfv");
extern void ( * glGetPixelMapuiv) (GLenum map, GLuint *values) __asm__("__glewGetPixelMapuiv");
extern void ( * glGetPixelMapusv) (GLenum map, GLushort *values) __asm__("__glewGetPixelMapusv");
extern void ( * glGetPointerv) (GLenum pname, GLvoid* *params) __asm__("__glewGetPointerv");
extern void ( * glGetPolygonStipple) (GLubyte *mask) __asm__("__glewGetPolygonStipple");
extern GLubyte* ( * glGetString) (GLenum s) __asm__("__glewGetString");
extern void ( * glGetTexEnvfv) (GLenum target, GLenum pname, GLfloat *params) __asm__("__glewGetTexEnvfv");
extern void ( * glGetTexEnviv) (GLenum target, GLenum pname, GLint *params) __asm__("__glewGetTexEnviv");
extern void ( * glGetTexGendv) (GLenum coord, GLenum pname, GLdouble *params) __asm__("__glewGetTexGendv");
extern void ( * glGetTexGenfv) (GLenum coord, GLenum pname, GLfloat *params) __asm__("__glewGetTexGenfv");
extern void ( * glGetTexGeniv) (GLenum coord, GLenum pname, GLint *params) __asm__("__glewGetTexGeniv");
extern void ( * glGetTexImage) (GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels) __asm__("__glewGetTexImage");
extern void ( * glGetTexLevelParameterfv) (GLenum target, GLint level, GLenum pname, GLfloat *params) __asm__("__glewGetTexLevelParameterfv");
extern void ( * glGetTexLevelParameteriv) (GLenum target, GLint level, GLenum pname, GLint *params) __asm__("__glewGetTexLevelParameteriv");
extern void ( * glGetTexParameterfv) (GLenum target, GLenum pname, GLfloat *params) __asm__("__glewGetTexParameterfv");
extern void ( * glGetTexParameteriv) (GLenum target, GLenum pname, GLint *params) __asm__("__glewGetTexParameteriv");
extern void ( * glHint) (GLenum target, GLenum mode) __asm__("__glewHint");
extern void ( * glIndexMask) (GLuint mask) __asm__("__glewIndexMask");
extern void ( * glIndexPointer) (GLenum type, GLsizei stride, const GLvoid *pointer) __asm__("__glewIndexPointer");
extern void ( * glIndexd) (GLdouble c) __asm__("__glewIndexd");
extern void ( * glIndexdv) (const GLdouble *c) __asm__("__glewIndexdv");
extern void ( * glIndexf) (GLfloat c) __asm__("__glewIndexf");
extern void ( * glIndexfv) (const GLfloat *c) __asm__("__glewIndexfv");
extern void ( * glIndexi) (GLint c) __asm__("__glewIndexi");
extern void ( * glIndexiv) (const GLint *c) __asm__("__glewIndexiv");
extern void ( * glIndexs) (GLshort c) __asm__("__glewIndexs");
extern void ( * glIndexsv) (const GLshort *c) __asm__("__glewIndexsv");
extern void ( * glIndexub) (GLubyte c) __asm__("__glewIndexub");
extern void ( * glIndexubv) (const GLubyte *c) __asm__("__glewIndexubv");
extern void ( * glInitNames) (void) __asm__("__glewInitNames");
extern void ( * glInterleavedArrays) (GLenum format, GLsizei stride, const GLvoid *pointer) __asm__("__glewInterleavedArrays");
extern GLboolean ( * glIsEnabled) (GLenum cap) __asm__("__glewIsEnabled");
extern GLboolean ( * glIsList) (GLuint list) __asm__("__glewIsList");
extern GLboolean ( * glIsTexture) (GLuint texture) __asm__("__glewIsTexture");
extern void ( * glLightModelf) (GLenum pname, GLfloat param) __asm__("__glewLightModelf");
extern void ( * glLightModelfv) (GLenum pname, const GLfloat *params) __asm__("__glewLightModelfv");
extern void ( * glLightModeli) (GLenum pname, GLint param) __asm__("__glewLightModeli");
extern void ( * glLightModeliv) (GLenum pname, const GLint *params) __asm__("__glewLightModeliv");
extern void ( * glLightf) (GLenum light, GLenum pname, GLfloat param) __asm__("__glewLightf");
extern void ( * glLightfv) (GLenum light, GLenum pname, const GLfloat *params) __asm__("__glewLightfv");
extern void ( * glLighti) (GLenum light, GLenum pname, GLint param) __asm__("__glewLighti");
extern void ( * glLightiv) (GLenum light, GLenum pname, const GLint *params) __asm__("__glewLightiv");
extern void ( * glLineStipple) (GLint factor, GLushort pattern) __asm__("__glewLineStipple");
extern void ( * glLineWidth) (GLfloat width) __asm__("__glewLineWidth");
extern void ( * glListBase) (GLuint base) __asm__("__glewListBase");
extern void ( * glLoadIdentity) (void) __asm__("__glewLoadIdentity");
extern void ( * glLoadMatrixd) (const GLdouble *m) __asm__("__glewLoadMatrixd");
extern void ( * glLoadMatrixf) (const GLfloat *m) __asm__("__glewLoadMatrixf");
extern void ( * glLoadName) (GLuint name) __asm__("__glewLoadName");
extern void ( * glLogicOp) (GLenum opcode) __asm__("__glewLogicOp");
extern void ( * glMap1d) (GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points) __asm__("__glewMap1d");
extern void ( * glMap1f) (GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points) __asm__("__glewMap1f");
extern void ( * glMap2d) (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points) __asm__("__glewMap2d");
extern void ( * glMap2f) (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points) __asm__("__glewMap2f");
extern void ( * glMapGrid1d) (GLint un, GLdouble u1, GLdouble u2) __asm__("__glewMapGrid1d");
extern void ( * glMapGrid1f) (GLint un, GLfloat u1, GLfloat u2) __asm__("__glewMapGrid1f");
extern void ( * glMapGrid2d) (GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) __asm__("__glewMapGrid2d");
extern void ( * glMapGrid2f) (GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) __asm__("__glewMapGrid2f");
extern void ( * glMaterialf) (GLenum face, GLenum pname, GLfloat param) __asm__("__glewMaterialf");
extern void ( * glMaterialfv) (GLenum face, GLenum pname, const GLfloat *params) __asm__("__glewMaterialfv");
extern void ( * glMateriali) (GLenum face, GLenum pname, GLint param) __asm__("__glewMateriali");
extern void ( * glMaterialiv) (GLenum face, GLenum pname, const GLint *params) __asm__("__glewMaterialiv");
extern void ( * glMatrixMode) (GLenum mode) __asm__("__glewMatrixMode");
extern void ( * glMultMatrixd) (const GLdouble *m) __asm__("__glewMultMatrixd");
extern void ( * glMultMatrixf) (const GLfloat *m) __asm__("__glewMultMatrixf");
extern void ( * glNewList) (GLuint list, GLenum mode) __asm__("__glewNewList");
extern void ( * glNormal3b) (GLbyte nx, GLbyte ny, GLbyte nz) __asm__("__glewNormal3b");
extern void ( * glNormal3bv) (const GLbyte *v) __asm__("__glewNormal3bv");
extern void ( * glNormal3d) (GLdouble nx, GLdouble ny, GLdouble nz) __asm__("__glewNormal3d");
extern void ( * glNormal3dv) (const GLdouble *v) __asm__("__glewNormal3dv");
extern void ( * glNormal3f) (GLfloat nx, GLfloat ny, GLfloat nz) __asm__("__glewNormal3f");
extern void ( * glNormal3fv) (const GLfloat *v) __asm__("__glewNormal3fv");
extern void ( * glNormal3i) (GLint nx, GLint ny, GLint nz) __asm__("__glewNormal3i");
extern void ( * glNormal3iv) (const GLint *v) __asm__("__glewNormal3iv");
extern void ( * glNormal3s) (GLshort nx, GLshort ny, GLshort nz) __asm__("__glewNormal3s");
extern void ( * glNormal3sv) (const GLshort *v) __asm__("__glewNormal3sv");
extern void ( * glNormalPointer) (GLenum type, GLsizei stride, const GLvoid *pointer) __asm__("__glewNormalPointer");
extern void ( * glOrtho) (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) __asm__("__glewOrtho");
extern void ( * glPassThrough) (GLfloat token) __asm__("__glewPassThrough");
extern void ( * glPixelMapfv) (GLenum map, GLsizei mapsize, const GLfloat *values) __asm__("__glewPixelMapfv");
extern void ( * glPixelMapuiv) (GLenum map, GLsizei mapsize, const GLuint *values) __asm__("__glewPixelMapuiv");
extern void ( * glPixelMapusv) (GLenum map, GLsizei mapsize, const GLushort *values) __asm__("__glewPixelMapusv");
extern void ( * glPixelStoref) (GLenum pname, GLfloat param) __asm__("__glewPixelStoref");
extern void ( * glPixelStorei) (GLenum pname, GLint param) __asm__("__glewPixelStorei");
extern void ( * glPixelTransferf) (GLenum pname, GLfloat param) __asm__("__glewPixelTransferf");
extern void ( * glPixelTransferi) (GLenum pname, GLint param) __asm__("__glewPixelTransferi");
extern void ( * glPixelZoom) (GLfloat xfactor, GLfloat yfactor) __asm__("__glewPixelZoom");
extern void ( * glPointSize) (GLfloat size) __asm__("__glewPointSize");
extern void ( * glPolygonMode) (GLenum face, GLenum mode) __asm__("__glewPolygonMode");
extern void ( * glPolygonOffset) (GLfloat factor, GLfloat units) __asm__("__glewPolygonOffset");
extern void ( * glPolygonStipple) (const GLubyte *mask) __asm__("__glewPolygonStipple");
extern void ( * glPopAttrib) (void) __asm__("__glewPopAttrib");
extern void ( * glPopClientAttrib) (void) __asm__("__glewPopClientAttrib");
extern void ( * glPopMatrix) (void) __asm__("__glewPopMatrix");
extern void ( * glPopName) (void) __asm__("__glewPopName");
extern void ( * glPrioritizeTextures) (GLsizei n, const GLuint *textures, const GLclampf *priorities) __asm__("__glewPrioritizeTextures");
extern void ( * glPushAttrib) (GLbitfield mask) __asm__("__glewPushAttrib");
extern void ( * glPushClientAttrib) (GLbitfield mask) __asm__("__glewPushClientAttrib");
extern void ( * glPushMatrix) (void) __asm__("__glewPushMatrix");
extern void ( * glPushName) (GLuint name) __asm__("__glewPushName");
extern void ( * glRasterPos2d) (GLdouble x, GLdouble y) __asm__("__glewRasterPos2d");
extern void ( * glRasterPos2dv) (const GLdouble *v) __asm__("__glewRasterPos2dv");
extern void ( * glRasterPos2f) (GLfloat x, GLfloat y) __asm__("__glewRasterPos2f");
extern void ( * glRasterPos2fv) (const GLfloat *v) __asm__("__glewRasterPos2fv");
extern void ( * glRasterPos2i) (GLint x, GLint y) __asm__("__glewRasterPos2i");
extern void ( * glRasterPos2iv) (const GLint *v) __asm__("__glewRasterPos2iv");
extern void ( * glRasterPos2s) (GLshort x, GLshort y) __asm__("__glewRasterPos2s");
extern void ( * glRasterPos2sv) (const GLshort *v) __asm__("__glewRasterPos2sv");
extern void ( * glRasterPos3d) (GLdouble x, GLdouble y, GLdouble z) __asm__("__glewRasterPos3d");
extern void ( * glRasterPos3dv) (const GLdouble *v) __asm__("__glewRasterPos3dv");
extern void ( * glRasterPos3f) (GLfloat x, GLfloat y, GLfloat z) __asm__("__glewRasterPos3f");
extern void ( * glRasterPos3fv) (const GLfloat *v) __asm__("__glewRasterPos3fv");
extern void ( * glRasterPos3i) (GLint x, GLint y, GLint z) __asm__("__glewRasterPos3i");
extern void ( * glRasterPos3iv) (const GLint *v) __asm__("__glewRasterPos3iv");
extern void ( * glRasterPos3s) (GLshort x, GLshort y, GLshort z) __asm__("__glewRasterPos3s");
extern void ( * glRasterPos3sv) (const GLshort *v) __asm__("__glewRasterPos3sv");
extern void ( * glRasterPos4d) (GLdouble x, GLdouble y, GLdouble z, GLdouble w) __asm__("__glewRasterPos4d");
extern void ( * glRasterPos4dv) (const GLdouble *v) __asm__("__glewRasterPos4dv");
extern void ( * glRasterPos4f) (GLfloat x, GLfloat y, GLfloat z, GLfloat w) __asm__("__glewRasterPos4f");
extern void ( * glRasterPos4fv) (const GLfloat *v) __asm__("__glewRasterPos4fv");
extern void ( * glRasterPos4i) (GLint x, GLint y, GLint z, GLint w) __asm__("__glewRasterPos4i");
extern void ( * glRasterPos4iv) (const GLint *v) __asm__("__glewRasterPos4iv");
extern void ( * glRasterPos4s) (GLshort x, GLshort y, GLshort z, GLshort w) __asm__("__glewRasterPos4s");
extern void ( * glRasterPos4sv) (const GLshort *v) __asm__("__glewRasterPos4sv");
extern void ( * glReadBuffer) (GLenum mode) __asm__("__glewReadBuffer");
extern void ( * glReadPixels) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels) __asm__("__glewReadPixels");
extern void ( * glRectd) (GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) __asm__("__glewRectd");
extern void ( * glRectdv) (const GLdouble *v1, const GLdouble *v2) __asm__("__glewRectdv");
extern void ( * glRectf) (GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) __asm__("__glewRectf");
extern void ( * glRectfv) (const GLfloat *v1, const GLfloat *v2) __asm__("__glewRectfv");
extern void ( * glRecti) (GLint x1, GLint y1, GLint x2, GLint y2) __asm__("__glewRecti");
extern void ( * glRectiv) (const GLint *v1, const GLint *v2) __asm__("__glewRectiv");
extern void ( * glRects) (GLshort x1, GLshort y1, GLshort x2, GLshort y2) __asm__("__glewRects");
extern void ( * glRectsv) (const GLshort *v1, const GLshort *v2) __asm__("__glewRectsv");
extern GLint ( * glRenderMode) (GLenum mode) __asm__("__glewRenderMode");
extern void ( * glRotated) (GLdouble angle, GLdouble x, GLdouble y, GLdouble z) __asm__("__glewRotated");
extern void ( * glRotatef) (GLfloat angle, GLfloat x, GLfloat y, GLfloat z) __asm__("__glewRotatef");
extern void ( * glScaled) (GLdouble x, GLdouble y, GLdouble z) __asm__("__glewScaled");
extern void ( * glScalef) (GLfloat x, GLfloat y, GLfloat z) __asm__("__glewScalef");
extern void ( * glScissor) (GLint x, GLint y, GLsizei width, GLsizei height) __asm__("__glewScissor");
extern void ( * glSelectBuffer) (GLsizei size, GLuint *buffer) __asm__("__glewSelectBuffer");
extern void ( * glShadeModel) (GLenum mode) __asm__("__glewShadeModel");
extern void ( * glStencilFunc) (GLenum func, GLint ref, GLuint mask) __asm__("__glewStencilFunc");
extern void ( * glStencilMask) (GLuint mask) __asm__("__glewStencilMask");
extern void ( * glStencilOp) (GLenum fail, GLenum zfail, GLenum zpass) __asm__("__glewStencilOp");
extern void ( * glTexCoord1d) (GLdouble s) __asm__("__glewTexCoord1d");
extern void ( * glTexCoord1dv) (const GLdouble *v) __asm__("__glewTexCoord1dv");
extern void ( * glTexCoord1f) (GLfloat s) __asm__("__glewTexCoord1f");
extern void ( * glTexCoord1fv) (const GLfloat *v) __asm__("__glewTexCoord1fv");
extern void ( * glTexCoord1i) (GLint s) __asm__("__glewTexCoord1i");
extern void ( * glTexCoord1iv) (const GLint *v) __asm__("__glewTexCoord1iv");
extern void ( * glTexCoord1s) (GLshort s) __asm__("__glewTexCoord1s");
extern void ( * glTexCoord1sv) (const GLshort *v) __asm__("__glewTexCoord1sv");
extern void ( * glTexCoord2d) (GLdouble s, GLdouble t) __asm__("__glewTexCoord2d");
extern void ( * glTexCoord2dv) (const GLdouble *v) __asm__("__glewTexCoord2dv");
extern void ( * glTexCoord2f) (GLfloat s, GLfloat t) __asm__("__glewTexCoord2f");
extern void ( * glTexCoord2fv) (const GLfloat *v) __asm__("__glewTexCoord2fv");
extern void ( * glTexCoord2i) (GLint s, GLint t) __asm__("__glewTexCoord2i");
extern void ( * glTexCoord2iv) (const GLint *v) __asm__("__glewTexCoord2iv");
extern void ( * glTexCoord2s) (GLshort s, GLshort t) __asm__("__glewTexCoord2s");
extern void ( * glTexCoord2sv) (const GLshort *v) __asm__("__glewTexCoord2sv");
extern void ( * glTexCoord3d) (GLdouble s, GLdouble t, GLdouble r) __asm__("__glewTexCoord3d");
extern void ( * glTexCoord3dv) (const GLdouble *v) __asm__("__glewTexCoord3dv");
extern void ( * glTexCoord3f) (GLfloat s, GLfloat t, GLfloat r) __asm__("__glewTexCoord3f");
extern void ( * glTexCoord3fv) (const GLfloat *v) __asm__("__glewTexCoord3fv");
extern void ( * glTexCoord3i) (GLint s, GLint t, GLint r) __asm__("__glewTexCoord3i");
extern void ( * glTexCoord3iv) (const GLint *v) __asm__("__glewTexCoord3iv");
extern void ( * glTexCoord3s) (GLshort s, GLshort t, GLshort r) __asm__("__glewTexCoord3s");
extern void ( * glTexCoord3sv) (const GLshort *v) __asm__("__glewTexCoord3sv");
extern void ( * glTexCoord4d) (GLdouble s, GLdouble t, GLdouble r, GLdouble q) __asm__("__glewTexCoord4d");
extern void ( * glTexCoord4dv) (const GLdouble *v) __asm__("__glewTexCoord4dv");
extern void ( * glTexCoord4f) (GLfloat s, GLfloat t, GLfloat r, GLfloat q) __asm__("__glewTexCoord4f");
extern void ( * glTexCoord4fv) (const GLfloat *v) __asm__("__glewTexCoord4fv");
extern void ( * glTexCoord4i) (GLint s, GLint t, GLint r, GLint q) __asm__("__glewTexCoord4i");
extern void ( * glTexCoord4iv) (const GLint *v) __asm__("__glewTexCoord4iv");
extern void ( * glTexCoord4s) (GLshort s, GLshort t, GLshort r, GLshort q) __asm__("__glewTexCoord4s");
extern void ( * glTexCoord4sv) (const GLshort *v) __asm__("__glewTexCoord4sv");
extern void ( * glTexCoordPointer) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) __asm__("__glewTexCoordPointer");
extern void ( * glTexEnvf) (GLenum target, GLenum pname, GLfloat param) __asm__("__glewTexEnvf");
extern void ( * glTexEnvfv) (GLenum target, GLenum pname, const GLfloat *params) __asm__("__glewTexEnvfv");
extern void ( * glTexEnvi) (GLenum target, GLenum pname, GLint param) __asm__("__glewTexEnvi");
extern void ( * glTexEnviv) (GLenum target, GLenum pname, const GLint *params) __asm__("__glewTexEnviv");
extern void ( * glTexGend) (GLenum coord, GLenum pname, GLdouble param) __asm__("__glewTexGend");
extern void ( * glTexGendv) (GLenum coord, GLenum pname, const GLdouble *params) __asm__("__glewTexGendv");
extern void ( * glTexGenf) (GLenum coord, GLenum pname, GLfloat param) __asm__("__glewTexGenf");
extern void ( * glTexGenfv) (GLenum coord, GLenum pname, const GLfloat *params) __asm__("__glewTexGenfv");
extern void ( * glTexGeni) (GLenum coord, GLenum pname, GLint param) __asm__("__glewTexGeni");
extern void ( * glTexGeniv) (GLenum coord, GLenum pname, const GLint *params) __asm__("__glewTexGeniv");
extern void ( * glTexImage1D) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels) __asm__("__glewTexImage1D");
extern void ( * glTexImage2D) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels) __asm__("__glewTexImage2D");
extern void ( * glTexParameterf) (GLenum target, GLenum pname, GLfloat param) __asm__("__glewTexParameterf");
extern void ( * glTexParameterfv) (GLenum target, GLenum pname, const GLfloat *params) __asm__("__glewTexParameterfv");
extern void ( * glTexParameteri) (GLenum target, GLenum pname, GLint param) __asm__("__glewTexParameteri");
extern void ( * glTexParameteriv) (GLenum target, GLenum pname, const GLint *params) __asm__("__glewTexParameteriv");
extern void ( * glTexSubImage1D) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels) __asm__("__glewTexSubImage1D");
extern void ( * glTexSubImage2D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels) __asm__("__glewTexSubImage2D");
extern void ( * glTranslated) (GLdouble x, GLdouble y, GLdouble z) __asm__("__glewTranslated");
extern void ( * glTranslatef) (GLfloat x, GLfloat y, GLfloat z) __asm__("__glewTranslatef");
extern void ( * glVertex2d) (GLdouble x, GLdouble y) __asm__("__glewVertex2d");
extern void ( * glVertex2dv) (const GLdouble *v) __asm__("__glewVertex2dv");
extern void ( * glVertex2f) (GLfloat x, GLfloat y) __asm__("__glewVertex2f");
extern void ( * glVertex2fv) (const GLfloat *v) __asm__("__glewVertex2fv");
extern void ( * glVertex2i) (GLint x, GLint y) __asm__("__glewVertex2i");
extern void ( * glVertex2iv) (const GLint *v) __asm__("__glewVertex2iv");
extern void ( * glVertex2s) (GLshort x, GLshort y) __asm__("__glewVertex2s");
extern void ( * glVertex2sv) (const GLshort *v) __asm__("__glewVertex2sv");
extern void ( * glVertex3d) (GLdouble x, GLdouble y, GLdouble z) __asm__("__glewVertex3d");
extern void ( * glVertex3dv) (const GLdouble *v) __asm__("__glewVertex3dv");
extern void ( * glVertex3f) (GLfloat x, GLfloat y, GLfloat z) __asm__("__glewVertex3f");
extern void ( * glVertex3fv) (const GLfloat *v) __asm__("__glewVertex3fv");
extern void ( * glVertex3i) (GLint x, GLint y, GLint z) __asm__("__glewVertex3i");
extern void ( * glVertex3iv) (const GLint *v) __asm__("__glewVertex3iv");
extern void ( * glVertex3s) (GLshort x, GLshort y, GLshort z) __asm__("__glewVertex3s");
extern void ( * glVertex3sv) (const GLshort *v) __asm__("__glewVertex3sv");
extern void ( * glVertex4d) (GLdouble x, GLdouble y, GLdouble z, GLdouble w) __asm__("__glewVertex4d");
extern void ( * glVertex4dv) (const GLdouble *v) __asm__("__glewVertex4dv");
extern void ( * glVertex4f) (GLfloat x, GLfloat y, GLfloat z, GLfloat w) __asm__("__glewVertex4f");
extern void ( * glVertex4fv) (const GLfloat *v) __asm__("__glewVertex4fv");
extern void ( * glVertex4i) (GLint x, GLint y, GLint z, GLint w) __asm__("__glewVertex4i");
extern void ( * glVertex4iv) (const GLint *v) __asm__("__glewVertex4iv");
extern void ( * glVertex4s) (GLshort x, GLshort y, GLshort z, GLshort w) __asm__("__glewVertex4s");
extern void ( * glVertex4sv) (const GLshort *v) __asm__("__glewVertex4sv");
extern void ( * glVertexPointer) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) __asm__("__glewVertexPointer");
extern void ( * glViewport) (GLint x, GLint y, GLsizei width, GLsizei height) __asm__("__glewViewport");
extern void ( * glCopyTexSubImage3D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) __asm__("__glewCopyTexSubImage3D");
extern void ( * glDrawRangeElements) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices) __asm__("__glewDrawRangeElements");
extern void ( * glTexImage3D) (GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) __asm__("__glewTexImage3D");
extern void ( * glTexSubImage3D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) __asm__("__glewTexSubImage3D");
extern void ( * glActiveTexture) (GLenum texture) __asm__("__glewActiveTexture");
extern void ( * glClientActiveTexture) (GLenum texture) __asm__("__glewClientActiveTexture");
extern void ( * glCompressedTexImage1D) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data) __asm__("__glewCompressedTexImage1D");
extern void ( * glCompressedTexImage2D) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data) __asm__("__glewCompressedTexImage2D");
extern void ( * glCompressedTexImage3D) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data) __asm__("__glewCompressedTexImage3D");
extern void ( * glCompressedTexSubImage1D) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data) __asm__("__glewCompressedTexSubImage1D");
extern void ( * glCompressedTexSubImage2D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) __asm__("__glewCompressedTexSubImage2D");
extern void ( * glCompressedTexSubImage3D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) __asm__("__glewCompressedTexSubImage3D");
extern void ( * glGetCompressedTexImage) (GLenum target, GLint lod, void *img) __asm__("__glewGetCompressedTexImage");
extern void ( * glLoadTransposeMatrixd) (const GLdouble m[16]) __asm__("__glewLoadTransposeMatrixd");
extern void ( * glLoadTransposeMatrixf) (const GLfloat m[16]) __asm__("__glewLoadTransposeMatrixf");
extern void ( * glMultTransposeMatrixd) (const GLdouble m[16]) __asm__("__glewMultTransposeMatrixd");
extern void ( * glMultTransposeMatrixf) (const GLfloat m[16]) __asm__("__glewMultTransposeMatrixf");
extern void ( * glMultiTexCoord1d) (GLenum target, GLdouble s) __asm__("__glewMultiTexCoord1d");
extern void ( * glMultiTexCoord1dv) (GLenum target, const GLdouble *v) __asm__("__glewMultiTexCoord1dv");
extern void ( * glMultiTexCoord1f) (GLenum target, GLfloat s) __asm__("__glewMultiTexCoord1f");
extern void ( * glMultiTexCoord1fv) (GLenum target, const GLfloat *v) __asm__("__glewMultiTexCoord1fv");
extern void ( * glMultiTexCoord1i) (GLenum target, GLint s) __asm__("__glewMultiTexCoord1i");
extern void ( * glMultiTexCoord1iv) (GLenum target, const GLint *v) __asm__("__glewMultiTexCoord1iv");
extern void ( * glMultiTexCoord1s) (GLenum target, GLshort s) __asm__("__glewMultiTexCoord1s");
extern void ( * glMultiTexCoord1sv) (GLenum target, const GLshort *v) __asm__("__glewMultiTexCoord1sv");
extern void ( * glMultiTexCoord2d) (GLenum target, GLdouble s, GLdouble t) __asm__("__glewMultiTexCoord2d");
extern void ( * glMultiTexCoord2dv) (GLenum target, const GLdouble *v) __asm__("__glewMultiTexCoord2dv");
extern void ( * glMultiTexCoord2f) (GLenum target, GLfloat s, GLfloat t) __asm__("__glewMultiTexCoord2f");
extern void ( * glMultiTexCoord2fv) (GLenum target, const GLfloat *v) __asm__("__glewMultiTexCoord2fv");
extern void ( * glMultiTexCoord2i) (GLenum target, GLint s, GLint t) __asm__("__glewMultiTexCoord2i");
extern void ( * glMultiTexCoord2iv) (GLenum target, const GLint *v) __asm__("__glewMultiTexCoord2iv");
extern void ( * glMultiTexCoord2s) (GLenum target, GLshort s, GLshort t) __asm__("__glewMultiTexCoord2s");
extern void ( * glMultiTexCoord2sv) (GLenum target, const GLshort *v) __asm__("__glewMultiTexCoord2sv");
extern void ( * glMultiTexCoord3d) (GLenum target, GLdouble s, GLdouble t, GLdouble r) __asm__("__glewMultiTexCoord3d");
extern void ( * glMultiTexCoord3dv) (GLenum target, const GLdouble *v) __asm__("__glewMultiTexCoord3dv");
extern void ( * glMultiTexCoord3f) (GLenum target, GLfloat s, GLfloat t, GLfloat r) __asm__("__glewMultiTexCoord3f");
extern void ( * glMultiTexCoord3fv) (GLenum target, const GLfloat *v) __asm__("__glewMultiTexCoord3fv");
extern void ( * glMultiTexCoord3i) (GLenum target, GLint s, GLint t, GLint r) __asm__("__glewMultiTexCoord3i");
extern void ( * glMultiTexCoord3iv) (GLenum target, const GLint *v) __asm__("__glewMultiTexCoord3iv");
extern void ( * glMultiTexCoord3s) (GLenum target, GLshort s, GLshort t, GLshort r) __asm__("__glewMultiTexCoord3s");
extern void ( * glMultiTexCoord3sv) (GLenum target, const GLshort *v) __asm__("__glewMultiTexCoord3sv");
extern void ( * glMultiTexCoord4d) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) __asm__("__glewMultiTexCoord4d");
extern void ( * glMultiTexCoord4dv) (GLenum target, const GLdouble *v) __asm__("__glewMultiTexCoord4dv");
extern void ( * glMultiTexCoord4f) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) __asm__("__glewMultiTexCoord4f");
extern void ( * glMultiTexCoord4fv) (GLenum target, const GLfloat *v) __asm__("__glewMultiTexCoord4fv");
extern void ( * glMultiTexCoord4i) (GLenum target, GLint s, GLint t, GLint r, GLint q) __asm__("__glewMultiTexCoord4i");
extern void ( * glMultiTexCoord4iv) (GLenum target, const GLint *v) __asm__("__glewMultiTexCoord4iv");
extern void ( * glMultiTexCoord4s) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) __asm__("__glewMultiTexCoord4s");
extern void ( * glMultiTexCoord4sv) (GLenum target, const GLshort *v) __asm__("__glewMultiTexCoord4sv");
extern void ( * glSampleCoverage) (GLclampf value, GLboolean invert) __asm__("__glewSampleCoverage");
extern void ( * glBlendColor) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha) __asm__("__glewBlendColor");
extern void ( * glBlendEquation) (GLenum mode) __asm__("__glewBlendEquation");
extern void ( * glBlendFuncSeparate) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) __asm__("__glewBlendFuncSeparate");
extern void ( * glFogCoordPointer) (GLenum type, GLsizei stride, const void *pointer) __asm__("__glewFogCoordPointer");
extern void ( * glFogCoordd) (GLdouble coord) __asm__("__glewFogCoordd");
extern void ( * glFogCoorddv) (const GLdouble *coord) __asm__("__glewFogCoorddv");
extern void ( * glFogCoordf) (GLfloat coord) __asm__("__glewFogCoordf");
extern void ( * glFogCoordfv) (const GLfloat *coord) __asm__("__glewFogCoordfv");
extern void ( * glMultiDrawArrays) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount) __asm__("__glewMultiDrawArrays");
extern void ( * glMultiDrawElements) (GLenum mode, const GLsizei *count, GLenum type, const void *const* indices, GLsizei drawcount) __asm__("__glewMultiDrawElements");
extern void ( * glPointParameterf) (GLenum pname, GLfloat param) __asm__("__glewPointParameterf");
extern void ( * glPointParameterfv) (GLenum pname, const GLfloat *params) __asm__("__glewPointParameterfv");
extern void ( * glPointParameteri) (GLenum pname, GLint param) __asm__("__glewPointParameteri");
extern void ( * glPointParameteriv) (GLenum pname, const GLint *params) __asm__("__glewPointParameteriv");
extern void ( * glSecondaryColor3b) (GLbyte red, GLbyte green, GLbyte blue) __asm__("__glewSecondaryColor3b");
extern void ( * glSecondaryColor3bv) (const GLbyte *v) __asm__("__glewSecondaryColor3bv");
extern void ( * glSecondaryColor3d) (GLdouble red, GLdouble green, GLdouble blue) __asm__("__glewSecondaryColor3d");
extern void ( * glSecondaryColor3dv) (const GLdouble *v) __asm__("__glewSecondaryColor3dv");
extern void ( * glSecondaryColor3f) (GLfloat red, GLfloat green, GLfloat blue) __asm__("__glewSecondaryColor3f");
extern void ( * glSecondaryColor3fv) (const GLfloat *v) __asm__("__glewSecondaryColor3fv");
extern void ( * glSecondaryColor3i) (GLint red, GLint green, GLint blue) __asm__("__glewSecondaryColor3i");
extern void ( * glSecondaryColor3iv) (const GLint *v) __asm__("__glewSecondaryColor3iv");
extern void ( * glSecondaryColor3s) (GLshort red, GLshort green, GLshort blue) __asm__("__glewSecondaryColor3s");
extern void ( * glSecondaryColor3sv) (const GLshort *v) __asm__("__glewSecondaryColor3sv");
extern void ( * glSecondaryColor3ub) (GLubyte red, GLubyte green, GLubyte blue) __asm__("__glewSecondaryColor3ub");
extern void ( * glSecondaryColor3ubv) (const GLubyte *v) __asm__("__glewSecondaryColor3ubv");
extern void ( * glSecondaryColor3ui) (GLuint red, GLuint green, GLuint blue) __asm__("__glewSecondaryColor3ui");
extern void ( * glSecondaryColor3uiv) (const GLuint *v) __asm__("__glewSecondaryColor3uiv");
extern void ( * glSecondaryColor3us) (GLushort red, GLushort green, GLushort blue) __asm__("__glewSecondaryColor3us");
extern void ( * glSecondaryColor3usv) (const GLushort *v) __asm__("__glewSecondaryColor3usv");
extern void ( * glSecondaryColorPointer) (GLint size, GLenum type, GLsizei stride, const void *pointer) __asm__("__glewSecondaryColorPointer");
extern void ( * glWindowPos2d) (GLdouble x, GLdouble y) __asm__("__glewWindowPos2d");
extern void ( * glWindowPos2dv) (const GLdouble *p) __asm__("__glewWindowPos2dv");
extern void ( * glWindowPos2f) (GLfloat x, GLfloat y) __asm__("__glewWindowPos2f");
extern void ( * glWindowPos2fv) (const GLfloat *p) __asm__("__glewWindowPos2fv");
extern void ( * glWindowPos2i) (GLint x, GLint y) __asm__("__glewWindowPos2i");
extern void ( * glWindowPos2iv) (const GLint *p) __asm__("__glewWindowPos2iv");
extern void ( * glWindowPos2s) (GLshort x, GLshort y) __asm__("__glewWindowPos2s");
extern void ( * glWindowPos2sv) (const GLshort *p) __asm__("__glewWindowPos2sv");
extern void ( * glWindowPos3d) (GLdouble x, GLdouble y, GLdouble z) __asm__("__glewWindowPos3d");
extern void ( * glWindowPos3dv) (const GLdouble *p) __asm__("__glewWindowPos3dv");
extern void ( * glWindowPos3f) (GLfloat x, GLfloat y, GLfloat z) __asm__("__glewWindowPos3f");
extern void ( * glWindowPos3fv) (const GLfloat *p) __asm__("__glewWindowPos3fv");
extern void ( * glWindowPos3i) (GLint x, GLint y, GLint z) __asm__("__glewWindowPos3i");
extern void ( * glWindowPos3iv) (const GLint *p) __asm__("__glewWindowPos3iv");
extern void ( * glWindowPos3s) (GLshort x, GLshort y, GLshort z) __asm__("__glewWindowPos3s");
extern void ( * glWindowPos3sv) (const GLshort *p) __asm__("__glewWindowPos3sv");
extern void ( * glBeginQuery) (GLenum target, GLuint id) __asm__("__glewBeginQuery");
extern void ( * glBindBuffer) (GLenum target, GLuint buffer) __asm__("__glewBindBuffer");
extern void ( * glBufferData) (GLenum target, GLsizeiptr size, const void* data, GLenum usage) __asm__("__glewBufferData");
extern void ( * glBufferSubData) (GLenum target, GLintptr offset, GLsizeiptr size, const void* data) __asm__("__glewBufferSubData");
extern void ( * glDeleteBuffers) (GLsizei n, const GLuint* buffers) __asm__("__glewDeleteBuffers");
extern void ( * glDeleteQueries) (GLsizei n, const GLuint* ids) __asm__("__glewDeleteQueries");
extern void ( * glEndQuery) (GLenum target) __asm__("__glewEndQuery");
extern void ( * glGenBuffers) (GLsizei n, GLuint* buffers) __asm__("__glewGenBuffers");
extern void ( * glGenQueries) (GLsizei n, GLuint* ids) __asm__("__glewGenQueries");
extern void ( * glGetBufferParameteriv) (GLenum target, GLenum pname, GLint* params) __asm__("__glewGetBufferParameteriv");
extern void ( * glGetBufferPointerv) (GLenum target, GLenum pname, void** params) __asm__("__glewGetBufferPointerv");
extern void ( * glGetBufferSubData) (GLenum target, GLintptr offset, GLsizeiptr size, void* data) __asm__("__glewGetBufferSubData");
extern void ( * glGetQueryObjectiv) (GLuint id, GLenum pname, GLint* params) __asm__("__glewGetQueryObjectiv");
extern void ( * glGetQueryObjectuiv) (GLuint id, GLenum pname, GLuint* params) __asm__("__glewGetQueryObjectuiv");
extern void ( * glGetQueryiv) (GLenum target, GLenum pname, GLint* params) __asm__("__glewGetQueryiv");
extern GLboolean ( * glIsBuffer) (GLuint buffer) __asm__("__glewIsBuffer");
extern GLboolean ( * glIsQuery) (GLuint id) __asm__("__glewIsQuery");
extern void* ( * glMapBuffer) (GLenum target, GLenum access) __asm__("__glewMapBuffer");
extern GLboolean ( * glUnmapBuffer) (GLenum target) __asm__("__glewUnmapBuffer");
extern void ( * glAttachShader) (GLuint program, GLuint shader) __asm__("__glewAttachShader");
extern void ( * glBindAttribLocation) (GLuint program, GLuint index, const GLchar* name) __asm__("__glewBindAttribLocation");
extern void ( * glBlendEquationSeparate) (GLenum modeRGB, GLenum modeAlpha) __asm__("__glewBlendEquationSeparate");
extern void ( * glCompileShader) (GLuint shader) __asm__("__glewCompileShader");
extern GLuint ( * glCreateProgram) (void) __asm__("__glewCreateProgram");
extern GLuint ( * glCreateShader) (GLenum type) __asm__("__glewCreateShader");
extern void ( * glDeleteProgram) (GLuint program) __asm__("__glewDeleteProgram");
extern void ( * glDeleteShader) (GLuint shader) __asm__("__glewDeleteShader");
extern void ( * glDetachShader) (GLuint program, GLuint shader) __asm__("__glewDetachShader");
extern void ( * glDisableVertexAttribArray) (GLuint index) __asm__("__glewDisableVertexAttribArray");
extern void ( * glDrawBuffers) (GLsizei n, const GLenum* bufs) __asm__("__glewDrawBuffers");
extern void ( * glEnableVertexAttribArray) (GLuint index) __asm__("__glewEnableVertexAttribArray");
extern void ( * glGetActiveAttrib) (GLuint program, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLchar* name) __asm__("__glewGetActiveAttrib");
extern void ( * glGetActiveUniform) (GLuint program, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLchar* name) __asm__("__glewGetActiveUniform");
extern void ( * glGetAttachedShaders) (GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders) __asm__("__glewGetAttachedShaders");
extern GLint ( * glGetAttribLocation) (GLuint program, const GLchar* name) __asm__("__glewGetAttribLocation");
extern void ( * glGetProgramInfoLog) (GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog) __asm__("__glewGetProgramInfoLog");
extern void ( * glGetProgramiv) (GLuint program, GLenum pname, GLint* param) __asm__("__glewGetProgramiv");
extern void ( * glGetShaderInfoLog) (GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog) __asm__("__glewGetShaderInfoLog");
extern void ( * glGetShaderSource) (GLuint obj, GLsizei maxLength, GLsizei* length, GLchar* source) __asm__("__glewGetShaderSource");
extern void ( * glGetShaderiv) (GLuint shader, GLenum pname, GLint* param) __asm__("__glewGetShaderiv");
extern GLint ( * glGetUniformLocation) (GLuint program, const GLchar* name) __asm__("__glewGetUniformLocation");
extern void ( * glGetUniformfv) (GLuint program, GLint location, GLfloat* params) __asm__("__glewGetUniformfv");
extern void ( * glGetUniformiv) (GLuint program, GLint location, GLint* params) __asm__("__glewGetUniformiv");
extern void ( * glGetVertexAttribPointerv) (GLuint index, GLenum pname, void** pointer) __asm__("__glewGetVertexAttribPointerv");
extern void ( * glGetVertexAttribdv) (GLuint index, GLenum pname, GLdouble* params) __asm__("__glewGetVertexAttribdv");
extern void ( * glGetVertexAttribfv) (GLuint index, GLenum pname, GLfloat* params) __asm__("__glewGetVertexAttribfv");
extern void ( * glGetVertexAttribiv) (GLuint index, GLenum pname, GLint* params) __asm__("__glewGetVertexAttribiv");
extern GLboolean ( * glIsProgram) (GLuint program) __asm__("__glewIsProgram");
extern GLboolean ( * glIsShader) (GLuint shader) __asm__("__glewIsShader");
extern void ( * glLinkProgram) (GLuint program) __asm__("__glewLinkProgram");
extern void ( * glShaderSource) (GLuint shader, GLsizei count, const GLchar *const* string, const GLint* length) __asm__("__glewShaderSource");
extern void ( * glStencilFuncSeparate) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask) __asm__("__glewStencilFuncSeparate");
extern void ( * glStencilMaskSeparate) (GLenum face, GLuint mask) __asm__("__glewStencilMaskSeparate");
extern void ( * glStencilOpSeparate) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) __asm__("__glewStencilOpSeparate");
extern void ( * glUniform1f) (GLint location, GLfloat v0) __asm__("__glewUniform1f");
extern void ( * glUniform1fv) (GLint location, GLsizei count, const GLfloat* value) __asm__("__glewUniform1fv");
extern void ( * glUniform1i) (GLint location, GLint v0) __asm__("__glewUniform1i");
extern void ( * glUniform1iv) (GLint location, GLsizei count, const GLint* value) __asm__("__glewUniform1iv");
extern void ( * glUniform2f) (GLint location, GLfloat v0, GLfloat v1) __asm__("__glewUniform2f");
extern void ( * glUniform2fv) (GLint location, GLsizei count, const GLfloat* value) __asm__("__glewUniform2fv");
extern void ( * glUniform2i) (GLint location, GLint v0, GLint v1) __asm__("__glewUniform2i");
extern void ( * glUniform2iv) (GLint location, GLsizei count, const GLint* value) __asm__("__glewUniform2iv");
extern void ( * glUniform3f) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2) __asm__("__glewUniform3f");
extern void ( * glUniform3fv) (GLint location, GLsizei count, const GLfloat* value) __asm__("__glewUniform3fv");
extern void ( * glUniform3i) (GLint location, GLint v0, GLint v1, GLint v2) __asm__("__glewUniform3i");
extern void ( * glUniform3iv) (GLint location, GLsizei count, const GLint* value) __asm__("__glewUniform3iv");
extern void ( * glUniform4f) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) __asm__("__glewUniform4f");
extern void ( * glUniform4fv) (GLint location, GLsizei count, const GLfloat* value) __asm__("__glewUniform4fv");
extern void ( * glUniform4i) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3) __asm__("__glewUniform4i");
extern void ( * glUniform4iv) (GLint location, GLsizei count, const GLint* value) __asm__("__glewUniform4iv");
extern void ( * glUniformMatrix2fv) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) __asm__("__glewUniformMatrix2fv");
extern void ( * glUniformMatrix3fv) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) __asm__("__glewUniformMatrix3fv");
extern void ( * glUniformMatrix4fv) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) __asm__("__glewUniformMatrix4fv");
extern void ( * glUseProgram) (GLuint program) __asm__("__glewUseProgram");
extern void ( * glValidateProgram) (GLuint program) __asm__("__glewValidateProgram");
extern void ( * glVertexAttrib1d) (GLuint index, GLdouble x) __asm__("__glewVertexAttrib1d");
extern void ( * glVertexAttrib1dv) (GLuint index, const GLdouble* v) __asm__("__glewVertexAttrib1dv");
extern void ( * glVertexAttrib1f) (GLuint index, GLfloat x) __asm__("__glewVertexAttrib1f");
extern void ( * glVertexAttrib1fv) (GLuint index, const GLfloat* v) __asm__("__glewVertexAttrib1fv");
extern void ( * glVertexAttrib1s) (GLuint index, GLshort x) __asm__("__glewVertexAttrib1s");
extern void ( * glVertexAttrib1sv) (GLuint index, const GLshort* v) __asm__("__glewVertexAttrib1sv");
extern void ( * glVertexAttrib2d) (GLuint index, GLdouble x, GLdouble y) __asm__("__glewVertexAttrib2d");
extern void ( * glVertexAttrib2dv) (GLuint index, const GLdouble* v) __asm__("__glewVertexAttrib2dv");
extern void ( * glVertexAttrib2f) (GLuint index, GLfloat x, GLfloat y) __asm__("__glewVertexAttrib2f");
extern void ( * glVertexAttrib2fv) (GLuint index, const GLfloat* v) __asm__("__glewVertexAttrib2fv");
extern void ( * glVertexAttrib2s) (GLuint index, GLshort x, GLshort y) __asm__("__glewVertexAttrib2s");
extern void ( * glVertexAttrib2sv) (GLuint index, const GLshort* v) __asm__("__glewVertexAttrib2sv");
extern void ( * glVertexAttrib3d) (GLuint index, GLdouble x, GLdouble y, GLdouble z) __asm__("__glewVertexAttrib3d");
extern void ( * glVertexAttrib3dv) (GLuint index, const GLdouble* v) __asm__("__glewVertexAttrib3dv");
extern void ( * glVertexAttrib3f) (GLuint index, GLfloat x, GLfloat y, GLfloat z) __asm__("__glewVertexAttrib3f");
extern void ( * glVertexAttrib3fv) (GLuint index, const GLfloat* v) __asm__("__glewVertexAttrib3fv");
extern void ( * glVertexAttrib3s) (GLuint index, GLshort x, GLshort y, GLshort z) __asm__("__glewVertexAttrib3s");
extern void ( * glVertexAttrib3sv) (GLuint index, const GLshort* v) __asm__("__glewVertexAttrib3sv");
extern void ( * glVertexAttrib4Nbv) (GLuint index, const GLbyte* v) __asm__("__glewVertexAttrib4Nbv");
extern void ( * glVertexAttrib4Niv) (GLuint index, const GLint* v) __asm__("__glewVertexAttrib4Niv");
extern void ( * glVertexAttrib4Nsv) (GLuint index, const GLshort* v) __asm__("__glewVertexAttrib4Nsv");
extern void ( * glVertexAttrib4Nub) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) __asm__("__glewVertexAttrib4Nub");
extern void ( * glVertexAttrib4Nubv) (GLuint index, const GLubyte* v) __asm__("__glewVertexAttrib4Nubv");
extern void ( * glVertexAttrib4Nuiv) (GLuint index, const GLuint* v) __asm__("__glewVertexAttrib4Nuiv");
extern void ( * glVertexAttrib4Nusv) (GLuint index, const GLushort* v) __asm__("__glewVertexAttrib4Nusv");
extern void ( * glVertexAttrib4bv) (GLuint index, const GLbyte* v) __asm__("__glewVertexAttrib4bv");
extern void ( * glVertexAttrib4d) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) __asm__("__glewVertexAttrib4d");
extern void ( * glVertexAttrib4dv) (GLuint index, const GLdouble* v) __asm__("__glewVertexAttrib4dv");
extern void ( * glVertexAttrib4f) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) __asm__("__glewVertexAttrib4f");
extern void ( * glVertexAttrib4fv) (GLuint index, const GLfloat* v) __asm__("__glewVertexAttrib4fv");
extern void ( * glVertexAttrib4iv) (GLuint index, const GLint* v) __asm__("__glewVertexAttrib4iv");
extern void ( * glVertexAttrib4s) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) __asm__("__glewVertexAttrib4s");
extern void ( * glVertexAttrib4sv) (GLuint index, const GLshort* v) __asm__("__glewVertexAttrib4sv");
extern void ( * glVertexAttrib4ubv) (GLuint index, const GLubyte* v) __asm__("__glewVertexAttrib4ubv");
extern void ( * glVertexAttrib4uiv) (GLuint index, const GLuint* v) __asm__("__glewVertexAttrib4uiv");
extern void ( * glVertexAttrib4usv) (GLuint index, const GLushort* v) __asm__("__glewVertexAttrib4usv");
extern void ( * glVertexAttribPointer) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer) __asm__("__glewVertexAttribPointer");
extern void ( * glUniformMatrix2x3fv) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) __asm__("__glewUniformMatrix2x3fv");
extern void ( * glUniformMatrix2x4fv) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) __asm__("__glewUniformMatrix2x4fv");
extern void ( * glUniformMatrix3x2fv) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) __asm__("__glewUniformMatrix3x2fv");
extern void ( * glUniformMatrix3x4fv) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) __asm__("__glewUniformMatrix3x4fv");
extern void ( * glUniformMatrix4x2fv) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) __asm__("__glewUniformMatrix4x2fv");
extern void ( * glUniformMatrix4x3fv) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) __asm__("__glewUniformMatrix4x3fv");
extern void ( * glBeginConditionalRender) (GLuint id, GLenum mode) __asm__("__glewBeginConditionalRender");
extern void ( * glBeginTransformFeedback) (GLenum primitiveMode) __asm__("__glewBeginTransformFeedback");
extern void ( * glBindFragDataLocation) (GLuint program, GLuint colorNumber, const GLchar* name) __asm__("__glewBindFragDataLocation");
extern void ( * glClampColor) (GLenum target, GLenum clamp) __asm__("__glewClampColor");
extern void ( * glClearBufferfi) (GLenum buffer, GLint drawBuffer, GLfloat depth, GLint stencil) __asm__("__glewClearBufferfi");
extern void ( * glClearBufferfv) (GLenum buffer, GLint drawBuffer, const GLfloat* value) __asm__("__glewClearBufferfv");
extern void ( * glClearBufferiv) (GLenum buffer, GLint drawBuffer, const GLint* value) __asm__("__glewClearBufferiv");
extern void ( * glClearBufferuiv) (GLenum buffer, GLint drawBuffer, const GLuint* value) __asm__("__glewClearBufferuiv");
extern void ( * glColorMaski) (GLuint buf, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) __asm__("__glewColorMaski");
extern void ( * glDisablei) (GLenum cap, GLuint index) __asm__("__glewDisablei");
extern void ( * glEnablei) (GLenum cap, GLuint index) __asm__("__glewEnablei");
extern void ( * glEndConditionalRender) (void) __asm__("__glewEndConditionalRender");
extern void ( * glEndTransformFeedback) (void) __asm__("__glewEndTransformFeedback");
extern void ( * glGetBooleani_v) (GLenum pname, GLuint index, GLboolean* data) __asm__("__glewGetBooleani_v");
extern GLint ( * glGetFragDataLocation) (GLuint program, const GLchar* name) __asm__("__glewGetFragDataLocation");
extern const GLubyte* ( * glGetStringi) (GLenum name, GLuint index) __asm__("__glewGetStringi");
extern void ( * glGetTexParameterIiv) (GLenum target, GLenum pname, GLint* params) __asm__("__glewGetTexParameterIiv");
extern void ( * glGetTexParameterIuiv) (GLenum target, GLenum pname, GLuint* params) __asm__("__glewGetTexParameterIuiv");
extern void ( * glGetTransformFeedbackVarying) (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) __asm__("__glewGetTransformFeedbackVarying");
extern void ( * glGetUniformuiv) (GLuint program, GLint location, GLuint* params) __asm__("__glewGetUniformuiv");
extern void ( * glGetVertexAttribIiv) (GLuint index, GLenum pname, GLint* params) __asm__("__glewGetVertexAttribIiv");
extern void ( * glGetVertexAttribIuiv) (GLuint index, GLenum pname, GLuint* params) __asm__("__glewGetVertexAttribIuiv");
extern GLboolean ( * glIsEnabledi) (GLenum cap, GLuint index) __asm__("__glewIsEnabledi");
extern void ( * glTexParameterIiv) (GLenum target, GLenum pname, const GLint* params) __asm__("__glewTexParameterIiv");
extern void ( * glTexParameterIuiv) (GLenum target, GLenum pname, const GLuint* params) __asm__("__glewTexParameterIuiv");
extern void ( * glTransformFeedbackVaryings) (GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode) __asm__("__glewTransformFeedbackVaryings");
extern void ( * glUniform1ui) (GLint location, GLuint v0) __asm__("__glewUniform1ui");
extern void ( * glUniform1uiv) (GLint location, GLsizei count, const GLuint* value) __asm__("__glewUniform1uiv");
extern void ( * glUniform2ui) (GLint location, GLuint v0, GLuint v1) __asm__("__glewUniform2ui");
extern void ( * glUniform2uiv) (GLint location, GLsizei count, const GLuint* value) __asm__("__glewUniform2uiv");
extern void ( * glUniform3ui) (GLint location, GLuint v0, GLuint v1, GLuint v2) __asm__("__glewUniform3ui");
extern void ( * glUniform3uiv) (GLint location, GLsizei count, const GLuint* value) __asm__("__glewUniform3uiv");
extern void ( * glUniform4ui) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) __asm__("__glewUniform4ui");
extern void ( * glUniform4uiv) (GLint location, GLsizei count, const GLuint* value) __asm__("__glewUniform4uiv");
extern void ( * glVertexAttribI1i) (GLuint index, GLint v0) __asm__("__glewVertexAttribI1i");
extern void ( * glVertexAttribI1iv) (GLuint index, const GLint* v0) __asm__("__glewVertexAttribI1iv");
extern void ( * glVertexAttribI1ui) (GLuint index, GLuint v0) __asm__("__glewVertexAttribI1ui");
extern void ( * glVertexAttribI1uiv) (GLuint index, const GLuint* v0) __asm__("__glewVertexAttribI1uiv");
extern void ( * glVertexAttribI2i) (GLuint index, GLint v0, GLint v1) __asm__("__glewVertexAttribI2i");
extern void ( * glVertexAttribI2iv) (GLuint index, const GLint* v0) __asm__("__glewVertexAttribI2iv");
extern void ( * glVertexAttribI2ui) (GLuint index, GLuint v0, GLuint v1) __asm__("__glewVertexAttribI2ui");
extern void ( * glVertexAttribI2uiv) (GLuint index, const GLuint* v0) __asm__("__glewVertexAttribI2uiv");
extern void ( * glVertexAttribI3i) (GLuint index, GLint v0, GLint v1, GLint v2) __asm__("__glewVertexAttribI3i");
extern void ( * glVertexAttribI3iv) (GLuint index, const GLint* v0) __asm__("__glewVertexAttribI3iv");
extern void ( * glVertexAttribI3ui) (GLuint index, GLuint v0, GLuint v1, GLuint v2) __asm__("__glewVertexAttribI3ui");
extern void ( * glVertexAttribI3uiv) (GLuint index, const GLuint* v0) __asm__("__glewVertexAttribI3uiv");
extern void ( * glVertexAttribI4bv) (GLuint index, const GLbyte* v0) __asm__("__glewVertexAttribI4bv");
extern void ( * glVertexAttribI4i) (GLuint index, GLint v0, GLint v1, GLint v2, GLint v3) __asm__("__glewVertexAttribI4i");
extern void ( * glVertexAttribI4iv) (GLuint index, const GLint* v0) __asm__("__glewVertexAttribI4iv");
extern void ( * glVertexAttribI4sv) (GLuint index, const GLshort* v0) __asm__("__glewVertexAttribI4sv");
extern void ( * glVertexAttribI4ubv) (GLuint index, const GLubyte* v0) __asm__("__glewVertexAttribI4ubv");
extern void ( * glVertexAttribI4ui) (GLuint index, GLuint v0, GLuint v1, GLuint v2, GLuint v3) __asm__("__glewVertexAttribI4ui");
extern void ( * glVertexAttribI4uiv) (GLuint index, const GLuint* v0) __asm__("__glewVertexAttribI4uiv");
extern void ( * glVertexAttribI4usv) (GLuint index, const GLushort* v0) __asm__("__glewVertexAttribI4usv");
extern void ( * glVertexAttribIPointer) (GLuint index, GLint size, GLenum type, GLsizei stride, const void*pointer) __asm__("__glewVertexAttribIPointer");
extern void ( * glDrawArraysInstanced) (GLenum mode, GLint first, GLsizei count, GLsizei primcount) __asm__("__glewDrawArraysInstanced");
extern void ( * glDrawElementsInstanced) (GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount) __asm__("__glewDrawElementsInstanced");
extern void ( * glPrimitiveRestartIndex) (GLuint buffer) __asm__("__glewPrimitiveRestartIndex");
extern void ( * glTexBuffer) (GLenum target, GLenum internalFormat, GLuint buffer) __asm__("__glewTexBuffer");
extern void ( * glFramebufferTexture) (GLenum target, GLenum attachment, GLuint texture, GLint level) __asm__("__glewFramebufferTexture");
extern void ( * glGetBufferParameteri64v) (GLenum target, GLenum value, GLint64 * data) __asm__("__glewGetBufferParameteri64v");
extern void ( * glGetInteger64i_v) (GLenum pname, GLuint index, GLint64 * data) __asm__("__glewGetInteger64i_v");
extern void ( * glVertexAttribDivisor) (GLuint index, GLuint divisor) __asm__("__glewVertexAttribDivisor");
extern void ( * glBlendEquationSeparatei) (GLuint buf, GLenum modeRGB, GLenum modeAlpha) __asm__("__glewBlendEquationSeparatei");
extern void ( * glBlendEquationi) (GLuint buf, GLenum mode) __asm__("__glewBlendEquationi");
extern void ( * glBlendFuncSeparatei) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) __asm__("__glewBlendFuncSeparatei");
extern void ( * glBlendFunci) (GLuint buf, GLenum src, GLenum dst) __asm__("__glewBlendFunci");
extern void ( * glMinSampleShading) (GLclampf value) __asm__("__glewMinSampleShading");
extern GLenum ( * glGetGraphicsResetStatus) (void) __asm__("__glewGetGraphicsResetStatus");
extern void ( * glTbufferMask3DFX) (GLuint mask) __asm__("__glewTbufferMask3DFX");
extern void ( * glDebugMessageCallbackAMD) (GLDEBUGPROCAMD callback, void *userParam) __asm__("__glewDebugMessageCallbackAMD");
extern void ( * glDebugMessageEnableAMD) (GLenum category, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled) __asm__("__glewDebugMessageEnableAMD");
extern void ( * glDebugMessageInsertAMD) (GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar* buf) __asm__("__glewDebugMessageInsertAMD");
extern GLuint ( * glGetDebugMessageLogAMD) (GLuint count, GLsizei bufsize, GLenum* categories, GLuint* severities, GLuint* ids, GLsizei* lengths, GLchar* message) __asm__("__glewGetDebugMessageLogAMD");
extern void ( * glBlendEquationIndexedAMD) (GLuint buf, GLenum mode) __asm__("__glewBlendEquationIndexedAMD");
extern void ( * glBlendEquationSeparateIndexedAMD) (GLuint buf, GLenum modeRGB, GLenum modeAlpha) __asm__("__glewBlendEquationSeparateIndexedAMD");
extern void ( * glBlendFuncIndexedAMD) (GLuint buf, GLenum src, GLenum dst) __asm__("__glewBlendFuncIndexedAMD");
extern void ( * glBlendFuncSeparateIndexedAMD) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) __asm__("__glewBlendFuncSeparateIndexedAMD");
extern void ( * glVertexAttribParameteriAMD) (GLuint index, GLenum pname, GLint param) __asm__("__glewVertexAttribParameteriAMD");
extern void ( * glMultiDrawArraysIndirectAMD) (GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride) __asm__("__glewMultiDrawArraysIndirectAMD");
extern void ( * glMultiDrawElementsIndirectAMD) (GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride) __asm__("__glewMultiDrawElementsIndirectAMD");
extern void ( * glDeleteNamesAMD) (GLenum identifier, GLuint num, const GLuint* names) __asm__("__glewDeleteNamesAMD");
extern void ( * glGenNamesAMD) (GLenum identifier, GLuint num, GLuint* names) __asm__("__glewGenNamesAMD");
extern GLboolean ( * glIsNameAMD) (GLenum identifier, GLuint name) __asm__("__glewIsNameAMD");
extern void ( * glQueryObjectParameteruiAMD) (GLenum target, GLuint id, GLenum pname, GLuint param) __asm__("__glewQueryObjectParameteruiAMD");
extern void ( * glBeginPerfMonitorAMD) (GLuint monitor) __asm__("__glewBeginPerfMonitorAMD");
extern void ( * glDeletePerfMonitorsAMD) (GLsizei n, GLuint* monitors) __asm__("__glewDeletePerfMonitorsAMD");
extern void ( * glEndPerfMonitorAMD) (GLuint monitor) __asm__("__glewEndPerfMonitorAMD");
extern void ( * glGenPerfMonitorsAMD) (GLsizei n, GLuint* monitors) __asm__("__glewGenPerfMonitorsAMD");
extern void ( * glGetPerfMonitorCounterDataAMD) (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint* data, GLint *bytesWritten) __asm__("__glewGetPerfMonitorCounterDataAMD");
extern void ( * glGetPerfMonitorCounterInfoAMD) (GLuint group, GLuint counter, GLenum pname, void *data) __asm__("__glewGetPerfMonitorCounterInfoAMD");
extern void ( * glGetPerfMonitorCounterStringAMD) (GLuint group, GLuint counter, GLsizei bufSize, GLsizei* length, GLchar *counterString) __asm__("__glewGetPerfMonitorCounterStringAMD");
extern void ( * glGetPerfMonitorCountersAMD) (GLuint group, GLint* numCounters, GLint *maxActiveCounters, GLsizei countersSize, GLuint *counters) __asm__("__glewGetPerfMonitorCountersAMD");
extern void ( * glGetPerfMonitorGroupStringAMD) (GLuint group, GLsizei bufSize, GLsizei* length, GLchar *groupString) __asm__("__glewGetPerfMonitorGroupStringAMD");
extern void ( * glGetPerfMonitorGroupsAMD) (GLint* numGroups, GLsizei groupsSize, GLuint *groups) __asm__("__glewGetPerfMonitorGroupsAMD");
extern void ( * glSelectPerfMonitorCountersAMD) (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint* counterList) __asm__("__glewSelectPerfMonitorCountersAMD");
extern void ( * glSetMultisamplefvAMD) (GLenum pname, GLuint index, const GLfloat* val) __asm__("__glewSetMultisamplefvAMD");
extern void ( * glTexStorageSparseAMD) (GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) __asm__("__glewTexStorageSparseAMD");
extern void ( * glTextureStorageSparseAMD) (GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) __asm__("__glewTextureStorageSparseAMD");
extern void ( * glStencilOpValueAMD) (GLenum face, GLuint value) __asm__("__glewStencilOpValueAMD");
extern void ( * glTessellationFactorAMD) (GLfloat factor) __asm__("__glewTessellationFactorAMD");
extern void ( * glTessellationModeAMD) (GLenum mode) __asm__("__glewTessellationModeAMD");
extern void ( * glBlitFramebufferANGLE) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) __asm__("__glewBlitFramebufferANGLE");
extern void ( * glRenderbufferStorageMultisampleANGLE) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) __asm__("__glewRenderbufferStorageMultisampleANGLE");
extern void ( * glDrawArraysInstancedANGLE) (GLenum mode, GLint first, GLsizei count, GLsizei primcount) __asm__("__glewDrawArraysInstancedANGLE");
extern void ( * glDrawElementsInstancedANGLE) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount) __asm__("__glewDrawElementsInstancedANGLE");
extern void ( * glVertexAttribDivisorANGLE) (GLuint index, GLuint divisor) __asm__("__glewVertexAttribDivisorANGLE");
extern void ( * glBeginQueryANGLE) (GLenum target, GLuint id) __asm__("__glewBeginQueryANGLE");
extern void ( * glDeleteQueriesANGLE) (GLsizei n, const GLuint* ids) __asm__("__glewDeleteQueriesANGLE");
extern void ( * glEndQueryANGLE) (GLenum target) __asm__("__glewEndQueryANGLE");
extern void ( * glGenQueriesANGLE) (GLsizei n, GLuint* ids) __asm__("__glewGenQueriesANGLE");
extern void ( * glGetQueryObjecti64vANGLE) (GLuint id, GLenum pname, GLint64* params) __asm__("__glewGetQueryObjecti64vANGLE");
extern void ( * glGetQueryObjectivANGLE) (GLuint id, GLenum pname, GLint* params) __asm__("__glewGetQueryObjectivANGLE");
extern void ( * glGetQueryObjectui64vANGLE) (GLuint id, GLenum pname, GLuint64* params) __asm__("__glewGetQueryObjectui64vANGLE");
extern void ( * glGetQueryObjectuivANGLE) (GLuint id, GLenum pname, GLuint* params) __asm__("__glewGetQueryObjectuivANGLE");
extern void ( * glGetQueryivANGLE) (GLenum target, GLenum pname, GLint* params) __asm__("__glewGetQueryivANGLE");
extern GLboolean ( * glIsQueryANGLE) (GLuint id) __asm__("__glewIsQueryANGLE");
extern void ( * glQueryCounterANGLE) (GLuint id, GLenum target) __asm__("__glewQueryCounterANGLE");
extern void ( * glGetTranslatedShaderSourceANGLE) (GLuint shader, GLsizei bufsize, GLsizei* length, GLchar* source) __asm__("__glewGetTranslatedShaderSourceANGLE");
extern void ( * glDrawElementArrayAPPLE) (GLenum mode, GLint first, GLsizei count) __asm__("__glewDrawElementArrayAPPLE");
extern void ( * glDrawRangeElementArrayAPPLE) (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count) __asm__("__glewDrawRangeElementArrayAPPLE");
extern void ( * glElementPointerAPPLE) (GLenum type, const void *pointer) __asm__("__glewElementPointerAPPLE");
extern void ( * glMultiDrawElementArrayAPPLE) (GLenum mode, const GLint* first, const GLsizei *count, GLsizei primcount) __asm__("__glewMultiDrawElementArrayAPPLE");
extern void ( * glMultiDrawRangeElementArrayAPPLE) (GLenum mode, GLuint start, GLuint end, const GLint* first, const GLsizei *count, GLsizei primcount) __asm__("__glewMultiDrawRangeElementArrayAPPLE");
extern void ( * glDeleteFencesAPPLE) (GLsizei n, const GLuint* fences) __asm__("__glewDeleteFencesAPPLE");
extern void ( * glFinishFenceAPPLE) (GLuint fence) __asm__("__glewFinishFenceAPPLE");
extern void ( * glFinishObjectAPPLE) (GLenum object, GLint name) __asm__("__glewFinishObjectAPPLE");
extern void ( * glGenFencesAPPLE) (GLsizei n, GLuint* fences) __asm__("__glewGenFencesAPPLE");
extern GLboolean ( * glIsFenceAPPLE) (GLuint fence) __asm__("__glewIsFenceAPPLE");
extern void ( * glSetFenceAPPLE) (GLuint fence) __asm__("__glewSetFenceAPPLE");
extern GLboolean ( * glTestFenceAPPLE) (GLuint fence) __asm__("__glewTestFenceAPPLE");
extern GLboolean ( * glTestObjectAPPLE) (GLenum object, GLuint name) __asm__("__glewTestObjectAPPLE");
extern void ( * glBufferParameteriAPPLE) (GLenum target, GLenum pname, GLint param) __asm__("__glewBufferParameteriAPPLE");
extern void ( * glFlushMappedBufferRangeAPPLE) (GLenum target, GLintptr offset, GLsizeiptr size) __asm__("__glewFlushMappedBufferRangeAPPLE");
extern void ( * glGetObjectParameterivAPPLE) (GLenum objectType, GLuint name, GLenum pname, GLint* params) __asm__("__glewGetObjectParameterivAPPLE");
extern GLenum ( * glObjectPurgeableAPPLE) (GLenum objectType, GLuint name, GLenum option) __asm__("__glewObjectPurgeableAPPLE");
extern GLenum ( * glObjectUnpurgeableAPPLE) (GLenum objectType, GLuint name, GLenum option) __asm__("__glewObjectUnpurgeableAPPLE");
extern void ( * glGetTexParameterPointervAPPLE) (GLenum target, GLenum pname, void **params) __asm__("__glewGetTexParameterPointervAPPLE");
extern void ( * glTextureRangeAPPLE) (GLenum target, GLsizei length, void *pointer) __asm__("__glewTextureRangeAPPLE");
extern void ( * glBindVertexArrayAPPLE) (GLuint array) __asm__("__glewBindVertexArrayAPPLE");
extern void ( * glDeleteVertexArraysAPPLE) (GLsizei n, const GLuint* arrays) __asm__("__glewDeleteVertexArraysAPPLE");
extern void ( * glGenVertexArraysAPPLE) (GLsizei n, const GLuint* arrays) __asm__("__glewGenVertexArraysAPPLE");
extern GLboolean ( * glIsVertexArrayAPPLE) (GLuint array) __asm__("__glewIsVertexArrayAPPLE");
extern void ( * glFlushVertexArrayRangeAPPLE) (GLsizei length, void *pointer) __asm__("__glewFlushVertexArrayRangeAPPLE");
extern void ( * glVertexArrayParameteriAPPLE) (GLenum pname, GLint param) __asm__("__glewVertexArrayParameteriAPPLE");
extern void ( * glVertexArrayRangeAPPLE) (GLsizei length, void *pointer) __asm__("__glewVertexArrayRangeAPPLE");
extern void ( * glDisableVertexAttribAPPLE) (GLuint index, GLenum pname) __asm__("__glewDisableVertexAttribAPPLE");
extern void ( * glEnableVertexAttribAPPLE) (GLuint index, GLenum pname) __asm__("__glewEnableVertexAttribAPPLE");
extern GLboolean ( * glIsVertexAttribEnabledAPPLE) (GLuint index, GLenum pname) __asm__("__glewIsVertexAttribEnabledAPPLE");
extern void ( * glMapVertexAttrib1dAPPLE) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points) __asm__("__glewMapVertexAttrib1dAPPLE");
extern void ( * glMapVertexAttrib1fAPPLE) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points) __asm__("__glewMapVertexAttrib1fAPPLE");
extern void ( * glMapVertexAttrib2dAPPLE) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points) __asm__("__glewMapVertexAttrib2dAPPLE");
extern void ( * glMapVertexAttrib2fAPPLE) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points) __asm__("__glewMapVertexAttrib2fAPPLE");
extern void ( * glClearDepthf) (GLclampf d) __asm__("__glewClearDepthf");
extern void ( * glDepthRangef) (GLclampf n, GLclampf f) __asm__("__glewDepthRangef");
extern void ( * glGetShaderPrecisionFormat) (GLenum shadertype, GLenum precisiontype, GLint* range, GLint *precision) __asm__("__glewGetShaderPrecisionFormat");
extern void ( * glReleaseShaderCompiler) (void) __asm__("__glewReleaseShaderCompiler");
extern void ( * glShaderBinary) (GLsizei count, const GLuint* shaders, GLenum binaryformat, const void*binary, GLsizei length) __asm__("__glewShaderBinary");
extern void ( * glMemoryBarrierByRegion) (GLbitfield barriers) __asm__("__glewMemoryBarrierByRegion");
extern void ( * glDrawArraysInstancedBaseInstance) (GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance) __asm__("__glewDrawArraysInstancedBaseInstance");
extern void ( * glDrawElementsInstancedBaseInstance) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, GLuint baseinstance) __asm__("__glewDrawElementsInstancedBaseInstance");
extern void ( * glDrawElementsInstancedBaseVertexBaseInstance) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, GLint basevertex, GLuint baseinstance) __asm__("__glewDrawElementsInstancedBaseVertexBaseInstance");
extern GLuint64 ( * glGetImageHandleARB) (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) __asm__("__glewGetImageHandleARB");
extern GLuint64 ( * glGetTextureHandleARB) (GLuint texture) __asm__("__glewGetTextureHandleARB");
extern GLuint64 ( * glGetTextureSamplerHandleARB) (GLuint texture, GLuint sampler) __asm__("__glewGetTextureSamplerHandleARB");
extern void ( * glGetVertexAttribLui64vARB) (GLuint index, GLenum pname, GLuint64EXT* params) __asm__("__glewGetVertexAttribLui64vARB");
extern GLboolean ( * glIsImageHandleResidentARB) (GLuint64 handle) __asm__("__glewIsImageHandleResidentARB");
extern GLboolean ( * glIsTextureHandleResidentARB) (GLuint64 handle) __asm__("__glewIsTextureHandleResidentARB");
extern void ( * glMakeImageHandleNonResidentARB) (GLuint64 handle) __asm__("__glewMakeImageHandleNonResidentARB");
extern void ( * glMakeImageHandleResidentARB) (GLuint64 handle, GLenum access) __asm__("__glewMakeImageHandleResidentARB");
extern void ( * glMakeTextureHandleNonResidentARB) (GLuint64 handle) __asm__("__glewMakeTextureHandleNonResidentARB");
extern void ( * glMakeTextureHandleResidentARB) (GLuint64 handle) __asm__("__glewMakeTextureHandleResidentARB");
extern void ( * glProgramUniformHandleui64ARB) (GLuint program, GLint location, GLuint64 value) __asm__("__glewProgramUniformHandleui64ARB");
extern void ( * glProgramUniformHandleui64vARB) (GLuint program, GLint location, GLsizei count, const GLuint64* values) __asm__("__glewProgramUniformHandleui64vARB");
extern void ( * glUniformHandleui64ARB) (GLint location, GLuint64 value) __asm__("__glewUniformHandleui64ARB");
extern void ( * glUniformHandleui64vARB) (GLint location, GLsizei count, const GLuint64* value) __asm__("__glewUniformHandleui64vARB");
extern void ( * glVertexAttribL1ui64ARB) (GLuint index, GLuint64EXT x) __asm__("__glewVertexAttribL1ui64ARB");
extern void ( * glVertexAttribL1ui64vARB) (GLuint index, const GLuint64EXT* v) __asm__("__glewVertexAttribL1ui64vARB");
extern void ( * glBindFragDataLocationIndexed) (GLuint program, GLuint colorNumber, GLuint index, const GLchar * name) __asm__("__glewBindFragDataLocationIndexed");
extern GLint ( * glGetFragDataIndex) (GLuint program, const GLchar * name) __asm__("__glewGetFragDataIndex");
extern void ( * glBufferStorage) (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags) __asm__("__glewBufferStorage");
extern void ( * glNamedBufferStorageEXT) (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags) __asm__("__glewNamedBufferStorageEXT");
extern GLsync ( * glCreateSyncFromCLeventARB) (cl_context context, cl_event event, GLbitfield flags) __asm__("__glewCreateSyncFromCLeventARB");
extern void ( * glClearBufferData) (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data) __asm__("__glewClearBufferData");
extern void ( * glClearBufferSubData) (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) __asm__("__glewClearBufferSubData");
extern void ( * glClearNamedBufferDataEXT) (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data) __asm__("__glewClearNamedBufferDataEXT");
extern void ( * glClearNamedBufferSubDataEXT) (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) __asm__("__glewClearNamedBufferSubDataEXT");
extern void ( * glClearTexImage) (GLuint texture, GLint level, GLenum format, GLenum type, const void *data) __asm__("__glewClearTexImage");
extern void ( * glClearTexSubImage) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data) __asm__("__glewClearTexSubImage");
extern void ( * glClipControl) (GLenum origin, GLenum depth) __asm__("__glewClipControl");
extern void ( * glClampColorARB) (GLenum target, GLenum clamp) __asm__("__glewClampColorARB");
extern void ( * glDispatchCompute) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) __asm__("__glewDispatchCompute");
extern void ( * glDispatchComputeIndirect) (GLintptr indirect) __asm__("__glewDispatchComputeIndirect");
extern void ( * glDispatchComputeGroupSizeARB) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z) __asm__("__glewDispatchComputeGroupSizeARB");
extern void ( * glCopyBufferSubData) (GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size) __asm__("__glewCopyBufferSubData");
extern void ( * glCopyImageSubData) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) __asm__("__glewCopyImageSubData");
extern void ( * glDebugMessageCallbackARB) (GLDEBUGPROCARB callback, const void *userParam) __asm__("__glewDebugMessageCallbackARB");
extern void ( * glDebugMessageControlARB) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled) __asm__("__glewDebugMessageControlARB");
extern void ( * glDebugMessageInsertARB) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf) __asm__("__glewDebugMessageInsertARB");
extern GLuint ( * glGetDebugMessageLogARB) (GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog) __asm__("__glewGetDebugMessageLogARB");
extern void ( * glBindTextureUnit) (GLuint unit, GLuint texture) __asm__("__glewBindTextureUnit");
extern void ( * glBlitNamedFramebuffer) (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) __asm__("__glewBlitNamedFramebuffer");
extern GLenum ( * glCheckNamedFramebufferStatus) (GLuint framebuffer, GLenum target) __asm__("__glewCheckNamedFramebufferStatus");
extern void ( * glClearNamedBufferData) (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data) __asm__("__glewClearNamedBufferData");
extern void ( * glClearNamedBufferSubData) (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) __asm__("__glewClearNamedBufferSubData");
extern void ( * glClearNamedFramebufferfi) (GLuint framebuffer, GLenum buffer, GLfloat depth, GLint stencil) __asm__("__glewClearNamedFramebufferfi");
extern void ( * glClearNamedFramebufferfv) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat* value) __asm__("__glewClearNamedFramebufferfv");
extern void ( * glClearNamedFramebufferiv) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint* value) __asm__("__glewClearNamedFramebufferiv");
extern void ( * glClearNamedFramebufferuiv) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint* value) __asm__("__glewClearNamedFramebufferuiv");
extern void ( * glCompressedTextureSubImage1D) (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data) __asm__("__glewCompressedTextureSubImage1D");
extern void ( * glCompressedTextureSubImage2D) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) __asm__("__glewCompressedTextureSubImage2D");
extern void ( * glCompressedTextureSubImage3D) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) __asm__("__glewCompressedTextureSubImage3D");
extern void ( * glCopyNamedBufferSubData) (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) __asm__("__glewCopyNamedBufferSubData");
extern void ( * glCopyTextureSubImage1D) (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) __asm__("__glewCopyTextureSubImage1D");
extern void ( * glCopyTextureSubImage2D) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) __asm__("__glewCopyTextureSubImage2D");
extern void ( * glCopyTextureSubImage3D) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) __asm__("__glewCopyTextureSubImage3D");
extern void ( * glCreateBuffers) (GLsizei n, GLuint* buffers) __asm__("__glewCreateBuffers");
extern void ( * glCreateFramebuffers) (GLsizei n, GLuint* framebuffers) __asm__("__glewCreateFramebuffers");
extern void ( * glCreateProgramPipelines) (GLsizei n, GLuint* pipelines) __asm__("__glewCreateProgramPipelines");
extern void ( * glCreateQueries) (GLenum target, GLsizei n, GLuint* ids) __asm__("__glewCreateQueries");
extern void ( * glCreateRenderbuffers) (GLsizei n, GLuint* renderbuffers) __asm__("__glewCreateRenderbuffers");
extern void ( * glCreateSamplers) (GLsizei n, GLuint* samplers) __asm__("__glewCreateSamplers");
extern void ( * glCreateTextures) (GLenum target, GLsizei n, GLuint* textures) __asm__("__glewCreateTextures");
extern void ( * glCreateTransformFeedbacks) (GLsizei n, GLuint* ids) __asm__("__glewCreateTransformFeedbacks");
extern void ( * glCreateVertexArrays) (GLsizei n, GLuint* arrays) __asm__("__glewCreateVertexArrays");
extern void ( * glDisableVertexArrayAttrib) (GLuint vaobj, GLuint index) __asm__("__glewDisableVertexArrayAttrib");
extern void ( * glEnableVertexArrayAttrib) (GLuint vaobj, GLuint index) __asm__("__glewEnableVertexArrayAttrib");
extern void ( * glFlushMappedNamedBufferRange) (GLuint buffer, GLintptr offset, GLsizeiptr length) __asm__("__glewFlushMappedNamedBufferRange");
extern void ( * glGenerateTextureMipmap) (GLuint texture) __asm__("__glewGenerateTextureMipmap");
extern void ( * glGetCompressedTextureImage) (GLuint texture, GLint level, GLsizei bufSize, void *pixels) __asm__("__glewGetCompressedTextureImage");
extern void ( * glGetNamedBufferParameteri64v) (GLuint buffer, GLenum pname, GLint64* params) __asm__("__glewGetNamedBufferParameteri64v");
extern void ( * glGetNamedBufferParameteriv) (GLuint buffer, GLenum pname, GLint* params) __asm__("__glewGetNamedBufferParameteriv");
extern void ( * glGetNamedBufferPointerv) (GLuint buffer, GLenum pname, void** params) __asm__("__glewGetNamedBufferPointerv");
extern void ( * glGetNamedBufferSubData) (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data) __asm__("__glewGetNamedBufferSubData");
extern void ( * glGetNamedFramebufferAttachmentParameteriv) (GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params) __asm__("__glewGetNamedFramebufferAttachmentParameteriv");
extern void ( * glGetNamedFramebufferParameteriv) (GLuint framebuffer, GLenum pname, GLint* param) __asm__("__glewGetNamedFramebufferParameteriv");
extern void ( * glGetNamedRenderbufferParameteriv) (GLuint renderbuffer, GLenum pname, GLint* params) __asm__("__glewGetNamedRenderbufferParameteriv");
extern void ( * glGetQueryBufferObjecti64v) (GLuint id,GLuint buffer,GLenum pname,GLintptr offset) __asm__("__glewGetQueryBufferObjecti64v");
extern void ( * glGetQueryBufferObjectiv) (GLuint id,GLuint buffer,GLenum pname,GLintptr offset) __asm__("__glewGetQueryBufferObjectiv");
extern void ( * glGetQueryBufferObjectui64v) (GLuint id,GLuint buffer,GLenum pname,GLintptr offset) __asm__("__glewGetQueryBufferObjectui64v");
extern void ( * glGetQueryBufferObjectuiv) (GLuint id,GLuint buffer,GLenum pname,GLintptr offset) __asm__("__glewGetQueryBufferObjectuiv");
extern void ( * glGetTextureImage) (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels) __asm__("__glewGetTextureImage");
extern void ( * glGetTextureLevelParameterfv) (GLuint texture, GLint level, GLenum pname, GLfloat* params) __asm__("__glewGetTextureLevelParameterfv");
extern void ( * glGetTextureLevelParameteriv) (GLuint texture, GLint level, GLenum pname, GLint* params) __asm__("__glewGetTextureLevelParameteriv");
extern void ( * glGetTextureParameterIiv) (GLuint texture, GLenum pname, GLint* params) __asm__("__glewGetTextureParameterIiv");
extern void ( * glGetTextureParameterIuiv) (GLuint texture, GLenum pname, GLuint* params) __asm__("__glewGetTextureParameterIuiv");
extern void ( * glGetTextureParameterfv) (GLuint texture, GLenum pname, GLfloat* params) __asm__("__glewGetTextureParameterfv");
extern void ( * glGetTextureParameteriv) (GLuint texture, GLenum pname, GLint* params) __asm__("__glewGetTextureParameteriv");
extern void ( * glGetTransformFeedbacki64_v) (GLuint xfb, GLenum pname, GLuint index, GLint64* param) __asm__("__glewGetTransformFeedbacki64_v");
extern void ( * glGetTransformFeedbacki_v) (GLuint xfb, GLenum pname, GLuint index, GLint* param) __asm__("__glewGetTransformFeedbacki_v");
extern void ( * glGetTransformFeedbackiv) (GLuint xfb, GLenum pname, GLint* param) __asm__("__glewGetTransformFeedbackiv");
extern void ( * glGetVertexArrayIndexed64iv) (GLuint vaobj, GLuint index, GLenum pname, GLint64* param) __asm__("__glewGetVertexArrayIndexed64iv");
extern void ( * glGetVertexArrayIndexediv) (GLuint vaobj, GLuint index, GLenum pname, GLint* param) __asm__("__glewGetVertexArrayIndexediv");
extern void ( * glGetVertexArrayiv) (GLuint vaobj, GLenum pname, GLint* param) __asm__("__glewGetVertexArrayiv");
extern void ( * glInvalidateNamedFramebufferData) (GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments) __asm__("__glewInvalidateNamedFramebufferData");
extern void ( * glInvalidateNamedFramebufferSubData) (GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height) __asm__("__glewInvalidateNamedFramebufferSubData");
extern void * ( * glMapNamedBuffer) (GLuint buffer, GLenum access) __asm__("__glewMapNamedBuffer");
extern void * ( * glMapNamedBufferRange) (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) __asm__("__glewMapNamedBufferRange");
extern void ( * glNamedBufferData) (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage) __asm__("__glewNamedBufferData");
extern void ( * glNamedBufferStorage) (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags) __asm__("__glewNamedBufferStorage");
extern void ( * glNamedBufferSubData) (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data) __asm__("__glewNamedBufferSubData");
extern void ( * glNamedFramebufferDrawBuffer) (GLuint framebuffer, GLenum mode) __asm__("__glewNamedFramebufferDrawBuffer");
extern void ( * glNamedFramebufferDrawBuffers) (GLuint framebuffer, GLsizei n, const GLenum* bufs) __asm__("__glewNamedFramebufferDrawBuffers");
extern void ( * glNamedFramebufferParameteri) (GLuint framebuffer, GLenum pname, GLint param) __asm__("__glewNamedFramebufferParameteri");
extern void ( * glNamedFramebufferReadBuffer) (GLuint framebuffer, GLenum mode) __asm__("__glewNamedFramebufferReadBuffer");
extern void ( * glNamedFramebufferRenderbuffer) (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) __asm__("__glewNamedFramebufferRenderbuffer");
extern void ( * glNamedFramebufferTexture) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) __asm__("__glewNamedFramebufferTexture");
extern void ( * glNamedFramebufferTextureLayer) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) __asm__("__glewNamedFramebufferTextureLayer");
extern void ( * glNamedRenderbufferStorage) (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) __asm__("__glewNamedRenderbufferStorage");
extern void ( * glNamedRenderbufferStorageMultisample) (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) __asm__("__glewNamedRenderbufferStorageMultisample");
extern void ( * glTextureBuffer) (GLuint texture, GLenum internalformat, GLuint buffer) __asm__("__glewTextureBuffer");
extern void ( * glTextureBufferRange) (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) __asm__("__glewTextureBufferRange");
extern void ( * glTextureParameterIiv) (GLuint texture, GLenum pname, const GLint* params) __asm__("__glewTextureParameterIiv");
extern void ( * glTextureParameterIuiv) (GLuint texture, GLenum pname, const GLuint* params) __asm__("__glewTextureParameterIuiv");
extern void ( * glTextureParameterf) (GLuint texture, GLenum pname, GLfloat param) __asm__("__glewTextureParameterf");
extern void ( * glTextureParameterfv) (GLuint texture, GLenum pname, const GLfloat* param) __asm__("__glewTextureParameterfv");
extern void ( * glTextureParameteri) (GLuint texture, GLenum pname, GLint param) __asm__("__glewTextureParameteri");
extern void ( * glTextureParameteriv) (GLuint texture, GLenum pname, const GLint* param) __asm__("__glewTextureParameteriv");
extern void ( * glTextureStorage1D) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width) __asm__("__glewTextureStorage1D");
extern void ( * glTextureStorage2D) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) __asm__("__glewTextureStorage2D");
extern void ( * glTextureStorage2DMultisample) (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) __asm__("__glewTextureStorage2DMultisample");
extern void ( * glTextureStorage3D) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) __asm__("__glewTextureStorage3D");
extern void ( * glTextureStorage3DMultisample) (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) __asm__("__glewTextureStorage3DMultisample");
extern void ( * glTextureSubImage1D) (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) __asm__("__glewTextureSubImage1D");
extern void ( * glTextureSubImage2D) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) __asm__("__glewTextureSubImage2D");
extern void ( * glTextureSubImage3D) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) __asm__("__glewTextureSubImage3D");
extern void ( * glTransformFeedbackBufferBase) (GLuint xfb, GLuint index, GLuint buffer) __asm__("__glewTransformFeedbackBufferBase");
extern void ( * glTransformFeedbackBufferRange) (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) __asm__("__glewTransformFeedbackBufferRange");
extern GLboolean ( * glUnmapNamedBuffer) (GLuint buffer) __asm__("__glewUnmapNamedBuffer");
extern void ( * glVertexArrayAttribBinding) (GLuint vaobj, GLuint attribindex, GLuint bindingindex) __asm__("__glewVertexArrayAttribBinding");
extern void ( * glVertexArrayAttribFormat) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) __asm__("__glewVertexArrayAttribFormat");
extern void ( * glVertexArrayAttribIFormat) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) __asm__("__glewVertexArrayAttribIFormat");
extern void ( * glVertexArrayAttribLFormat) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) __asm__("__glewVertexArrayAttribLFormat");
extern void ( * glVertexArrayBindingDivisor) (GLuint vaobj, GLuint bindingindex, GLuint divisor) __asm__("__glewVertexArrayBindingDivisor");
extern void ( * glVertexArrayElementBuffer) (GLuint vaobj, GLuint buffer) __asm__("__glewVertexArrayElementBuffer");
extern void ( * glVertexArrayVertexBuffer) (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) __asm__("__glewVertexArrayVertexBuffer");
extern void ( * glVertexArrayVertexBuffers) (GLuint vaobj, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr *offsets, const GLsizei *strides) __asm__("__glewVertexArrayVertexBuffers");
extern void ( * glDrawBuffersARB) (GLsizei n, const GLenum* bufs) __asm__("__glewDrawBuffersARB");
extern void ( * glBlendEquationSeparateiARB) (GLuint buf, GLenum modeRGB, GLenum modeAlpha) __asm__("__glewBlendEquationSeparateiARB");
extern void ( * glBlendEquationiARB) (GLuint buf, GLenum mode) __asm__("__glewBlendEquationiARB");
extern void ( * glBlendFuncSeparateiARB) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) __asm__("__glewBlendFuncSeparateiARB");
extern void ( * glBlendFunciARB) (GLuint buf, GLenum src, GLenum dst) __asm__("__glewBlendFunciARB");
extern void ( * glDrawElementsBaseVertex) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex) __asm__("__glewDrawElementsBaseVertex");
extern void ( * glDrawElementsInstancedBaseVertex) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, GLint basevertex) __asm__("__glewDrawElementsInstancedBaseVertex");
extern void ( * glDrawRangeElementsBaseVertex) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex) __asm__("__glewDrawRangeElementsBaseVertex");
extern void ( * glMultiDrawElementsBaseVertex) (GLenum mode, const GLsizei* count, GLenum type, const void *const *indices, GLsizei primcount, const GLint *basevertex) __asm__("__glewMultiDrawElementsBaseVertex");
extern void ( * glDrawArraysIndirect) (GLenum mode, const void *indirect) __asm__("__glewDrawArraysIndirect");
extern void ( * glDrawElementsIndirect) (GLenum mode, GLenum type, const void *indirect) __asm__("__glewDrawElementsIndirect");
extern void ( * glFramebufferParameteri) (GLenum target, GLenum pname, GLint param) __asm__("__glewFramebufferParameteri");
extern void ( * glGetFramebufferParameteriv) (GLenum target, GLenum pname, GLint* params) __asm__("__glewGetFramebufferParameteriv");
extern void ( * glGetNamedFramebufferParameterivEXT) (GLuint framebuffer, GLenum pname, GLint* params) __asm__("__glewGetNamedFramebufferParameterivEXT");
extern void ( * glNamedFramebufferParameteriEXT) (GLuint framebuffer, GLenum pname, GLint param) __asm__("__glewNamedFramebufferParameteriEXT");
extern void ( * glBindFramebuffer) (GLenum target, GLuint framebuffer) __asm__("__glewBindFramebuffer");
extern void ( * glBindRenderbuffer) (GLenum target, GLuint renderbuffer) __asm__("__glewBindRenderbuffer");
extern void ( * glBlitFramebuffer) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) __asm__("__glewBlitFramebuffer");
extern GLenum ( * glCheckFramebufferStatus) (GLenum target) __asm__("__glewCheckFramebufferStatus");
extern void ( * glDeleteFramebuffers) (GLsizei n, const GLuint* framebuffers) __asm__("__glewDeleteFramebuffers");
extern void ( * glDeleteRenderbuffers) (GLsizei n, const GLuint* renderbuffers) __asm__("__glewDeleteRenderbuffers");
extern void ( * glFramebufferRenderbuffer) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) __asm__("__glewFramebufferRenderbuffer");
extern void ( * glFramebufferTexture1D) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) __asm__("__glewFramebufferTexture1D");
extern void ( * glFramebufferTexture2D) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) __asm__("__glewFramebufferTexture2D");
extern void ( * glFramebufferTexture3D) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer) __asm__("__glewFramebufferTexture3D");
extern void ( * glFramebufferTextureLayer) (GLenum target,GLenum attachment, GLuint texture,GLint level,GLint layer) __asm__("__glewFramebufferTextureLayer");
extern void ( * glGenFramebuffers) (GLsizei n, GLuint* framebuffers) __asm__("__glewGenFramebuffers");
extern void ( * glGenRenderbuffers) (GLsizei n, GLuint* renderbuffers) __asm__("__glewGenRenderbuffers");
extern void ( * glGenerateMipmap) (GLenum target) __asm__("__glewGenerateMipmap");
extern void ( * glGetFramebufferAttachmentParameteriv) (GLenum target, GLenum attachment, GLenum pname, GLint* params) __asm__("__glewGetFramebufferAttachmentParameteriv");
extern void ( * glGetRenderbufferParameteriv) (GLenum target, GLenum pname, GLint* params) __asm__("__glewGetRenderbufferParameteriv");
extern GLboolean ( * glIsFramebuffer) (GLuint framebuffer) __asm__("__glewIsFramebuffer");
extern GLboolean ( * glIsRenderbuffer) (GLuint renderbuffer) __asm__("__glewIsRenderbuffer");
extern void ( * glRenderbufferStorage) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height) __asm__("__glewRenderbufferStorage");
extern void ( * glRenderbufferStorageMultisample) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) __asm__("__glewRenderbufferStorageMultisample");
extern void ( * glFramebufferTextureARB) (GLenum target, GLenum attachment, GLuint texture, GLint level) __asm__("__glewFramebufferTextureARB");
extern void ( * glFramebufferTextureFaceARB) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) __asm__("__glewFramebufferTextureFaceARB");
extern void ( * glFramebufferTextureLayerARB) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) __asm__("__glewFramebufferTextureLayerARB");
extern void ( * glProgramParameteriARB) (GLuint program, GLenum pname, GLint value) __asm__("__glewProgramParameteriARB");
extern void ( * glGetProgramBinary) (GLuint program, GLsizei bufSize, GLsizei* length, GLenum *binaryFormat, void*binary) __asm__("__glewGetProgramBinary");
extern void ( * glProgramBinary) (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length) __asm__("__glewProgramBinary");
extern void ( * glProgramParameteri) (GLuint program, GLenum pname, GLint value) __asm__("__glewProgramParameteri");
extern void ( * glGetCompressedTextureSubImage) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels) __asm__("__glewGetCompressedTextureSubImage");
extern void ( * glGetTextureSubImage) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels) __asm__("__glewGetTextureSubImage");
extern void ( * glGetUniformdv) (GLuint program, GLint location, GLdouble* params) __asm__("__glewGetUniformdv");
extern void ( * glUniform1d) (GLint location, GLdouble x) __asm__("__glewUniform1d");
extern void ( * glUniform1dv) (GLint location, GLsizei count, const GLdouble* value) __asm__("__glewUniform1dv");
extern void ( * glUniform2d) (GLint location, GLdouble x, GLdouble y) __asm__("__glewUniform2d");
extern void ( * glUniform2dv) (GLint location, GLsizei count, const GLdouble* value) __asm__("__glewUniform2dv");
extern void ( * glUniform3d) (GLint location, GLdouble x, GLdouble y, GLdouble z) __asm__("__glewUniform3d");
extern void ( * glUniform3dv) (GLint location, GLsizei count, const GLdouble* value) __asm__("__glewUniform3dv");
extern void ( * glUniform4d) (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) __asm__("__glewUniform4d");
extern void ( * glUniform4dv) (GLint location, GLsizei count, const GLdouble* value) __asm__("__glewUniform4dv");
extern void ( * glUniformMatrix2dv) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) __asm__("__glewUniformMatrix2dv");
extern void ( * glUniformMatrix2x3dv) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) __asm__("__glewUniformMatrix2x3dv");
extern void ( * glUniformMatrix2x4dv) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) __asm__("__glewUniformMatrix2x4dv");
extern void ( * glUniformMatrix3dv) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) __asm__("__glewUniformMatrix3dv");
extern void ( * glUniformMatrix3x2dv) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) __asm__("__glewUniformMatrix3x2dv");
extern void ( * glUniformMatrix3x4dv) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) __asm__("__glewUniformMatrix3x4dv");
extern void ( * glUniformMatrix4dv) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) __asm__("__glewUniformMatrix4dv");
extern void ( * glUniformMatrix4x2dv) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) __asm__("__glewUniformMatrix4x2dv");
extern void ( * glUniformMatrix4x3dv) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) __asm__("__glewUniformMatrix4x3dv");
extern void ( * glColorSubTable) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data) __asm__("__glewColorSubTable");
extern void ( * glColorTable) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table) __asm__("__glewColorTable");
extern void ( * glColorTableParameterfv) (GLenum target, GLenum pname, const GLfloat *params) __asm__("__glewColorTableParameterfv");
extern void ( * glColorTableParameteriv) (GLenum target, GLenum pname, const GLint *params) __asm__("__glewColorTableParameteriv");
extern void ( * glConvolutionFilter1D) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image) __asm__("__glewConvolutionFilter1D");
extern void ( * glConvolutionFilter2D) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image) __asm__("__glewConvolutionFilter2D");
extern void ( * glConvolutionParameterf) (GLenum target, GLenum pname, GLfloat params) __asm__("__glewConvolutionParameterf");
extern void ( * glConvolutionParameterfv) (GLenum target, GLenum pname, const GLfloat *params) __asm__("__glewConvolutionParameterfv");
extern void ( * glConvolutionParameteri) (GLenum target, GLenum pname, GLint params) __asm__("__glewConvolutionParameteri");
extern void ( * glConvolutionParameteriv) (GLenum target, GLenum pname, const GLint *params) __asm__("__glewConvolutionParameteriv");
extern void ( * glCopyColorSubTable) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) __asm__("__glewCopyColorSubTable");
extern void ( * glCopyColorTable) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) __asm__("__glewCopyColorTable");
extern void ( * glCopyConvolutionFilter1D) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) __asm__("__glewCopyConvolutionFilter1D");
extern void ( * glCopyConvolutionFilter2D) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) __asm__("__glewCopyConvolutionFilter2D");
extern void ( * glGetColorTable) (GLenum target, GLenum format, GLenum type, void *table) __asm__("__glewGetColorTable");
extern void ( * glGetColorTableParameterfv) (GLenum target, GLenum pname, GLfloat *params) __asm__("__glewGetColorTableParameterfv");
extern void ( * glGetColorTableParameteriv) (GLenum target, GLenum pname, GLint *params) __asm__("__glewGetColorTableParameteriv");
extern void ( * glGetConvolutionFilter) (GLenum target, GLenum format, GLenum type, void *image) __asm__("__glewGetConvolutionFilter");
extern void ( * glGetConvolutionParameterfv) (GLenum target, GLenum pname, GLfloat *params) __asm__("__glewGetConvolutionParameterfv");
extern void ( * glGetConvolutionParameteriv) (GLenum target, GLenum pname, GLint *params) __asm__("__glewGetConvolutionParameteriv");
extern void ( * glGetHistogram) (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values) __asm__("__glewGetHistogram");
extern void ( * glGetHistogramParameterfv) (GLenum target, GLenum pname, GLfloat *params) __asm__("__glewGetHistogramParameterfv");
extern void ( * glGetHistogramParameteriv) (GLenum target, GLenum pname, GLint *params) __asm__("__glewGetHistogramParameteriv");
extern void ( * glGetMinmax) (GLenum target, GLboolean reset, GLenum format, GLenum types, void *values) __asm__("__glewGetMinmax");
extern void ( * glGetMinmaxParameterfv) (GLenum target, GLenum pname, GLfloat *params) __asm__("__glewGetMinmaxParameterfv");
extern void ( * glGetMinmaxParameteriv) (GLenum target, GLenum pname, GLint *params) __asm__("__glewGetMinmaxParameteriv");
extern void ( * glGetSeparableFilter) (GLenum target, GLenum format, GLenum type, void *row, void *column, void *span) __asm__("__glewGetSeparableFilter");
extern void ( * glHistogram) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) __asm__("__glewHistogram");
extern void ( * glMinmax) (GLenum target, GLenum internalformat, GLboolean sink) __asm__("__glewMinmax");
extern void ( * glResetHistogram) (GLenum target) __asm__("__glewResetHistogram");
extern void ( * glResetMinmax) (GLenum target) __asm__("__glewResetMinmax");
extern void ( * glSeparableFilter2D) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column) __asm__("__glewSeparableFilter2D");
extern void ( * glMultiDrawArraysIndirectCountARB) (GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) __asm__("__glewMultiDrawArraysIndirectCountARB");
extern void ( * glMultiDrawElementsIndirectCountARB) (GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) __asm__("__glewMultiDrawElementsIndirectCountARB");
extern void ( * glDrawArraysInstancedARB) (GLenum mode, GLint first, GLsizei count, GLsizei primcount) __asm__("__glewDrawArraysInstancedARB");
extern void ( * glDrawElementsInstancedARB) (GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount) __asm__("__glewDrawElementsInstancedARB");
extern void ( * glVertexAttribDivisorARB) (GLuint index, GLuint divisor) __asm__("__glewVertexAttribDivisorARB");
extern void ( * glGetInternalformativ) (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint* params) __asm__("__glewGetInternalformativ");
extern void ( * glGetInternalformati64v) (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64* params) __asm__("__glewGetInternalformati64v");
extern void ( * glInvalidateBufferData) (GLuint buffer) __asm__("__glewInvalidateBufferData");
extern void ( * glInvalidateBufferSubData) (GLuint buffer, GLintptr offset, GLsizeiptr length) __asm__("__glewInvalidateBufferSubData");
extern void ( * glInvalidateFramebuffer) (GLenum target, GLsizei numAttachments, const GLenum* attachments) __asm__("__glewInvalidateFramebuffer");
extern void ( * glInvalidateSubFramebuffer) (GLenum target, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height) __asm__("__glewInvalidateSubFramebuffer");
extern void ( * glInvalidateTexImage) (GLuint texture, GLint level) __asm__("__glewInvalidateTexImage");
extern void ( * glInvalidateTexSubImage) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) __asm__("__glewInvalidateTexSubImage");
extern void ( * glFlushMappedBufferRange) (GLenum target, GLintptr offset, GLsizeiptr length) __asm__("__glewFlushMappedBufferRange");
extern void * ( * glMapBufferRange) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) __asm__("__glewMapBufferRange");
extern void ( * glCurrentPaletteMatrixARB) (GLint index) __asm__("__glewCurrentPaletteMatrixARB");
extern void ( * glMatrixIndexPointerARB) (GLint size, GLenum type, GLsizei stride, void *pointer) __asm__("__glewMatrixIndexPointerARB");
extern void ( * glMatrixIndexubvARB) (GLint size, GLubyte *indices) __asm__("__glewMatrixIndexubvARB");
extern void ( * glMatrixIndexuivARB) (GLint size, GLuint *indices) __asm__("__glewMatrixIndexuivARB");
extern void ( * glMatrixIndexusvARB) (GLint size, GLushort *indices) __asm__("__glewMatrixIndexusvARB");
extern void ( * glBindBuffersBase) (GLenum target, GLuint first, GLsizei count, const GLuint* buffers) __asm__("__glewBindBuffersBase");
extern void ( * glBindBuffersRange) (GLenum target, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr *offsets, const GLsizeiptr *sizes) __asm__("__glewBindBuffersRange");
extern void ( * glBindImageTextures) (GLuint first, GLsizei count, const GLuint* textures) __asm__("__glewBindImageTextures");
extern void ( * glBindSamplers) (GLuint first, GLsizei count, const GLuint* samplers) __asm__("__glewBindSamplers");
extern void ( * glBindTextures) (GLuint first, GLsizei count, const GLuint* textures) __asm__("__glewBindTextures");
extern void ( * glBindVertexBuffers) (GLuint first, GLsizei count, const GLuint* buffers, const GLintptr *offsets, const GLsizei *strides) __asm__("__glewBindVertexBuffers");
extern void ( * glMultiDrawArraysIndirect) (GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride) __asm__("__glewMultiDrawArraysIndirect");
extern void ( * glMultiDrawElementsIndirect) (GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride) __asm__("__glewMultiDrawElementsIndirect");
extern void ( * glSampleCoverageARB) (GLclampf value, GLboolean invert) __asm__("__glewSampleCoverageARB");
extern void ( * glActiveTextureARB) (GLenum texture) __asm__("__glewActiveTextureARB");
extern void ( * glClientActiveTextureARB) (GLenum texture) __asm__("__glewClientActiveTextureARB");
extern void ( * glMultiTexCoord1dARB) (GLenum target, GLdouble s) __asm__("__glewMultiTexCoord1dARB");
extern void ( * glMultiTexCoord1dvARB) (GLenum target, const GLdouble *v) __asm__("__glewMultiTexCoord1dvARB");
extern void ( * glMultiTexCoord1fARB) (GLenum target, GLfloat s) __asm__("__glewMultiTexCoord1fARB");
extern void ( * glMultiTexCoord1fvARB) (GLenum target, const GLfloat *v) __asm__("__glewMultiTexCoord1fvARB");
extern void ( * glMultiTexCoord1iARB) (GLenum target, GLint s) __asm__("__glewMultiTexCoord1iARB");
extern void ( * glMultiTexCoord1ivARB) (GLenum target, const GLint *v) __asm__("__glewMultiTexCoord1ivARB");
extern void ( * glMultiTexCoord1sARB) (GLenum target, GLshort s) __asm__("__glewMultiTexCoord1sARB");
extern void ( * glMultiTexCoord1svARB) (GLenum target, const GLshort *v) __asm__("__glewMultiTexCoord1svARB");
extern void ( * glMultiTexCoord2dARB) (GLenum target, GLdouble s, GLdouble t) __asm__("__glewMultiTexCoord2dARB");
extern void ( * glMultiTexCoord2dvARB) (GLenum target, const GLdouble *v) __asm__("__glewMultiTexCoord2dvARB");
extern void ( * glMultiTexCoord2fARB) (GLenum target, GLfloat s, GLfloat t) __asm__("__glewMultiTexCoord2fARB");
extern void ( * glMultiTexCoord2fvARB) (GLenum target, const GLfloat *v) __asm__("__glewMultiTexCoord2fvARB");
extern void ( * glMultiTexCoord2iARB) (GLenum target, GLint s, GLint t) __asm__("__glewMultiTexCoord2iARB");
extern void ( * glMultiTexCoord2ivARB) (GLenum target, const GLint *v) __asm__("__glewMultiTexCoord2ivARB");
extern void ( * glMultiTexCoord2sARB) (GLenum target, GLshort s, GLshort t) __asm__("__glewMultiTexCoord2sARB");
extern void ( * glMultiTexCoord2svARB) (GLenum target, const GLshort *v) __asm__("__glewMultiTexCoord2svARB");
extern void ( * glMultiTexCoord3dARB) (GLenum target, GLdouble s, GLdouble t, GLdouble r) __asm__("__glewMultiTexCoord3dARB");
extern void ( * glMultiTexCoord3dvARB) (GLenum target, const GLdouble *v) __asm__("__glewMultiTexCoord3dvARB");
extern void ( * glMultiTexCoord3fARB) (GLenum target, GLfloat s, GLfloat t, GLfloat r) __asm__("__glewMultiTexCoord3fARB");
extern void ( * glMultiTexCoord3fvARB) (GLenum target, const GLfloat *v) __asm__("__glewMultiTexCoord3fvARB");
extern void ( * glMultiTexCoord3iARB) (GLenum target, GLint s, GLint t, GLint r) __asm__("__glewMultiTexCoord3iARB");
extern void ( * glMultiTexCoord3ivARB) (GLenum target, const GLint *v) __asm__("__glewMultiTexCoord3ivARB");
extern void ( * glMultiTexCoord3sARB) (GLenum target, GLshort s, GLshort t, GLshort r) __asm__("__glewMultiTexCoord3sARB");
extern void ( * glMultiTexCoord3svARB) (GLenum target, const GLshort *v) __asm__("__glewMultiTexCoord3svARB");
extern void ( * glMultiTexCoord4dARB) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) __asm__("__glewMultiTexCoord4dARB");
extern void ( * glMultiTexCoord4dvARB) (GLenum target, const GLdouble *v) __asm__("__glewMultiTexCoord4dvARB");
extern void ( * glMultiTexCoord4fARB) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) __asm__("__glewMultiTexCoord4fARB");
extern void ( * glMultiTexCoord4fvARB) (GLenum target, const GLfloat *v) __asm__("__glewMultiTexCoord4fvARB");
extern void ( * glMultiTexCoord4iARB) (GLenum target, GLint s, GLint t, GLint r, GLint q) __asm__("__glewMultiTexCoord4iARB");
extern void ( * glMultiTexCoord4ivARB) (GLenum target, const GLint *v) __asm__("__glewMultiTexCoord4ivARB");
extern void ( * glMultiTexCoord4sARB) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) __asm__("__glewMultiTexCoord4sARB");
extern void ( * glMultiTexCoord4svARB) (GLenum target, const GLshort *v) __asm__("__glewMultiTexCoord4svARB");
extern void ( * glBeginQueryARB) (GLenum target, GLuint id) __asm__("__glewBeginQueryARB");
extern void ( * glDeleteQueriesARB) (GLsizei n, const GLuint* ids) __asm__("__glewDeleteQueriesARB");
extern void ( * glEndQueryARB) (GLenum target) __asm__("__glewEndQueryARB");
extern void ( * glGenQueriesARB) (GLsizei n, GLuint* ids) __asm__("__glewGenQueriesARB");
extern void ( * glGetQueryObjectivARB) (GLuint id, GLenum pname, GLint* params) __asm__("__glewGetQueryObjectivARB");
extern void ( * glGetQueryObjectuivARB) (GLuint id, GLenum pname, GLuint* params) __asm__("__glewGetQueryObjectuivARB");
extern void ( * glGetQueryivARB) (GLenum target, GLenum pname, GLint* params) __asm__("__glewGetQueryivARB");
extern GLboolean ( * glIsQueryARB) (GLuint id) __asm__("__glewIsQueryARB");
extern void ( * glPointParameterfARB) (GLenum pname, GLfloat param) __asm__("__glewPointParameterfARB");
extern void ( * glPointParameterfvARB) (GLenum pname, const GLfloat* params) __asm__("__glewPointParameterfvARB");
extern void ( * glGetProgramInterfaceiv) (GLuint program, GLenum programInterface, GLenum pname, GLint* params) __asm__("__glewGetProgramInterfaceiv");
extern GLuint ( * glGetProgramResourceIndex) (GLuint program, GLenum programInterface, const GLchar* name) __asm__("__glewGetProgramResourceIndex");
extern GLint ( * glGetProgramResourceLocation) (GLuint program, GLenum programInterface, const GLchar* name) __asm__("__glewGetProgramResourceLocation");
extern GLint ( * glGetProgramResourceLocationIndex) (GLuint program, GLenum programInterface, const GLchar* name) __asm__("__glewGetProgramResourceLocationIndex");
extern void ( * glGetProgramResourceName) (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei* length, GLchar *name) __asm__("__glewGetProgramResourceName");
extern void ( * glGetProgramResourceiv) (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei bufSize, GLsizei *length, GLint *params) __asm__("__glewGetProgramResourceiv");
extern void ( * glProvokingVertex) (GLenum mode) __asm__("__glewProvokingVertex");
extern GLenum ( * glGetGraphicsResetStatusARB) (void) __asm__("__glewGetGraphicsResetStatusARB");
extern void ( * glGetnColorTableARB) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table) __asm__("__glewGetnColorTableARB");
extern void ( * glGetnCompressedTexImageARB) (GLenum target, GLint lod, GLsizei bufSize, void* img) __asm__("__glewGetnCompressedTexImageARB");
extern void ( * glGetnConvolutionFilterARB) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image) __asm__("__glewGetnConvolutionFilterARB");
extern void ( * glGetnHistogramARB) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values) __asm__("__glewGetnHistogramARB");
extern void ( * glGetnMapdvARB) (GLenum target, GLenum query, GLsizei bufSize, GLdouble* v) __asm__("__glewGetnMapdvARB");
extern void ( * glGetnMapfvARB) (GLenum target, GLenum query, GLsizei bufSize, GLfloat* v) __asm__("__glewGetnMapfvARB");
extern void ( * glGetnMapivARB) (GLenum target, GLenum query, GLsizei bufSize, GLint* v) __asm__("__glewGetnMapivARB");
extern void ( * glGetnMinmaxARB) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values) __asm__("__glewGetnMinmaxARB");
extern void ( * glGetnPixelMapfvARB) (GLenum map, GLsizei bufSize, GLfloat* values) __asm__("__glewGetnPixelMapfvARB");
extern void ( * glGetnPixelMapuivARB) (GLenum map, GLsizei bufSize, GLuint* values) __asm__("__glewGetnPixelMapuivARB");
extern void ( * glGetnPixelMapusvARB) (GLenum map, GLsizei bufSize, GLushort* values) __asm__("__glewGetnPixelMapusvARB");
extern void ( * glGetnPolygonStippleARB) (GLsizei bufSize, GLubyte* pattern) __asm__("__glewGetnPolygonStippleARB");
extern void ( * glGetnSeparableFilterARB) (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, void*column, void*span) __asm__("__glewGetnSeparableFilterARB");
extern void ( * glGetnTexImageARB) (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* img) __asm__("__glewGetnTexImageARB");
extern void ( * glGetnUniformdvARB) (GLuint program, GLint location, GLsizei bufSize, GLdouble* params) __asm__("__glewGetnUniformdvARB");
extern void ( * glGetnUniformfvARB) (GLuint program, GLint location, GLsizei bufSize, GLfloat* params) __asm__("__glewGetnUniformfvARB");
extern void ( * glGetnUniformivARB) (GLuint program, GLint location, GLsizei bufSize, GLint* params) __asm__("__glewGetnUniformivARB");
extern void ( * glGetnUniformuivARB) (GLuint program, GLint location, GLsizei bufSize, GLuint* params) __asm__("__glewGetnUniformuivARB");
extern void ( * glReadnPixelsARB) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data) __asm__("__glewReadnPixelsARB");
extern void ( * glMinSampleShadingARB) (GLclampf value) __asm__("__glewMinSampleShadingARB");
extern void ( * glBindSampler) (GLuint unit, GLuint sampler) __asm__("__glewBindSampler");
extern void ( * glDeleteSamplers) (GLsizei count, const GLuint * samplers) __asm__("__glewDeleteSamplers");
extern void ( * glGenSamplers) (GLsizei count, GLuint* samplers) __asm__("__glewGenSamplers");
extern void ( * glGetSamplerParameterIiv) (GLuint sampler, GLenum pname, GLint* params) __asm__("__glewGetSamplerParameterIiv");
extern void ( * glGetSamplerParameterIuiv) (GLuint sampler, GLenum pname, GLuint* params) __asm__("__glewGetSamplerParameterIuiv");
extern void ( * glGetSamplerParameterfv) (GLuint sampler, GLenum pname, GLfloat* params) __asm__("__glewGetSamplerParameterfv");
extern void ( * glGetSamplerParameteriv) (GLuint sampler, GLenum pname, GLint* params) __asm__("__glewGetSamplerParameteriv");
extern GLboolean ( * glIsSampler) (GLuint sampler) __asm__("__glewIsSampler");
extern void ( * glSamplerParameterIiv) (GLuint sampler, GLenum pname, const GLint* params) __asm__("__glewSamplerParameterIiv");
extern void ( * glSamplerParameterIuiv) (GLuint sampler, GLenum pname, const GLuint* params) __asm__("__glewSamplerParameterIuiv");
extern void ( * glSamplerParameterf) (GLuint sampler, GLenum pname, GLfloat param) __asm__("__glewSamplerParameterf");
extern void ( * glSamplerParameterfv) (GLuint sampler, GLenum pname, const GLfloat* params) __asm__("__glewSamplerParameterfv");
extern void ( * glSamplerParameteri) (GLuint sampler, GLenum pname, GLint param) __asm__("__glewSamplerParameteri");
extern void ( * glSamplerParameteriv) (GLuint sampler, GLenum pname, const GLint* params) __asm__("__glewSamplerParameteriv");
extern void ( * glActiveShaderProgram) (GLuint pipeline, GLuint program) __asm__("__glewActiveShaderProgram");
extern void ( * glBindProgramPipeline) (GLuint pipeline) __asm__("__glewBindProgramPipeline");
extern GLuint ( * glCreateShaderProgramv) (GLenum type, GLsizei count, const GLchar * const * strings) __asm__("__glewCreateShaderProgramv");
extern void ( * glDeleteProgramPipelines) (GLsizei n, const GLuint* pipelines) __asm__("__glewDeleteProgramPipelines");
extern void ( * glGenProgramPipelines) (GLsizei n, GLuint* pipelines) __asm__("__glewGenProgramPipelines");
extern void ( * glGetProgramPipelineInfoLog) (GLuint pipeline, GLsizei bufSize, GLsizei* length, GLchar *infoLog) __asm__("__glewGetProgramPipelineInfoLog");
extern void ( * glGetProgramPipelineiv) (GLuint pipeline, GLenum pname, GLint* params) __asm__("__glewGetProgramPipelineiv");
extern GLboolean ( * glIsProgramPipeline) (GLuint pipeline) __asm__("__glewIsProgramPipeline");
extern void ( * glProgramUniform1d) (GLuint program, GLint location, GLdouble x) __asm__("__glewProgramUniform1d");
extern void ( * glProgramUniform1dv) (GLuint program, GLint location, GLsizei count, const GLdouble* value) __asm__("__glewProgramUniform1dv");
extern void ( * glProgramUniform1f) (GLuint program, GLint location, GLfloat x) __asm__("__glewProgramUniform1f");
extern void ( * glProgramUniform1fv) (GLuint program, GLint location, GLsizei count, const GLfloat* value) __asm__("__glewProgramUniform1fv");
extern void ( * glProgramUniform1i) (GLuint program, GLint location, GLint x) __asm__("__glewProgramUniform1i");
extern void ( * glProgramUniform1iv) (GLuint program, GLint location, GLsizei count, const GLint* value) __asm__("__glewProgramUniform1iv");
extern void ( * glProgramUniform1ui) (GLuint program, GLint location, GLuint x) __asm__("__glewProgramUniform1ui");
extern void ( * glProgramUniform1uiv) (GLuint program, GLint location, GLsizei count, const GLuint* value) __asm__("__glewProgramUniform1uiv");
extern void ( * glProgramUniform2d) (GLuint program, GLint location, GLdouble x, GLdouble y) __asm__("__glewProgramUniform2d");
extern void ( * glProgramUniform2dv) (GLuint program, GLint location, GLsizei count, const GLdouble* value) __asm__("__glewProgramUniform2dv");
extern void ( * glProgramUniform2f) (GLuint program, GLint location, GLfloat x, GLfloat y) __asm__("__glewProgramUniform2f");
extern void ( * glProgramUniform2fv) (GLuint program, GLint location, GLsizei count, const GLfloat* value) __asm__("__glewProgramUniform2fv");
extern void ( * glProgramUniform2i) (GLuint program, GLint location, GLint x, GLint y) __asm__("__glewProgramUniform2i");
extern void ( * glProgramUniform2iv) (GLuint program, GLint location, GLsizei count, const GLint* value) __asm__("__glewProgramUniform2iv");
extern void ( * glProgramUniform2ui) (GLuint program, GLint location, GLuint x, GLuint y) __asm__("__glewProgramUniform2ui");
extern void ( * glProgramUniform2uiv) (GLuint program, GLint location, GLsizei count, const GLuint* value) __asm__("__glewProgramUniform2uiv");
extern void ( * glProgramUniform3d) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z) __asm__("__glewProgramUniform3d");
extern void ( * glProgramUniform3dv) (GLuint program, GLint location, GLsizei count, const GLdouble* value) __asm__("__glewProgramUniform3dv");
extern void ( * glProgramUniform3f) (GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z) __asm__("__glewProgramUniform3f");
extern void ( * glProgramUniform3fv) (GLuint program, GLint location, GLsizei count, const GLfloat* value) __asm__("__glewProgramUniform3fv");
extern void ( * glProgramUniform3i) (GLuint program, GLint location, GLint x, GLint y, GLint z) __asm__("__glewProgramUniform3i");
extern void ( * glProgramUniform3iv) (GLuint program, GLint location, GLsizei count, const GLint* value) __asm__("__glewProgramUniform3iv");
extern void ( * glProgramUniform3ui) (GLuint program, GLint location, GLuint x, GLuint y, GLuint z) __asm__("__glewProgramUniform3ui");
extern void ( * glProgramUniform3uiv) (GLuint program, GLint location, GLsizei count, const GLuint* value) __asm__("__glewProgramUniform3uiv");
extern void ( * glProgramUniform4d) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) __asm__("__glewProgramUniform4d");
extern void ( * glProgramUniform4dv) (GLuint program, GLint location, GLsizei count, const GLdouble* value) __asm__("__glewProgramUniform4dv");
extern void ( * glProgramUniform4f) (GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w) __asm__("__glewProgramUniform4f");
extern void ( * glProgramUniform4fv) (GLuint program, GLint location, GLsizei count, const GLfloat* value) __asm__("__glewProgramUniform4fv");
extern void ( * glProgramUniform4i) (GLuint program, GLint location, GLint x, GLint y, GLint z, GLint w) __asm__("__glewProgramUniform4i");
extern void ( * glProgramUniform4iv) (GLuint program, GLint location, GLsizei count, const GLint* value) __asm__("__glewProgramUniform4iv");
extern void ( * glProgramUniform4ui) (GLuint program, GLint location, GLuint x, GLuint y, GLuint z, GLuint w) __asm__("__glewProgramUniform4ui");
extern void ( * glProgramUniform4uiv) (GLuint program, GLint location, GLsizei count, const GLuint* value) __asm__("__glewProgramUniform4uiv");
extern void ( * glProgramUniformMatrix2dv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) __asm__("__glewProgramUniformMatrix2dv");
extern void ( * glProgramUniformMatrix2fv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) __asm__("__glewProgramUniformMatrix2fv");
extern void ( * glProgramUniformMatrix2x3dv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) __asm__("__glewProgramUniformMatrix2x3dv");
extern void ( * glProgramUniformMatrix2x3fv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) __asm__("__glewProgramUniformMatrix2x3fv");
extern void ( * glProgramUniformMatrix2x4dv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) __asm__("__glewProgramUniformMatrix2x4dv");
extern void ( * glProgramUniformMatrix2x4fv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) __asm__("__glewProgramUniformMatrix2x4fv");
extern void ( * glProgramUniformMatrix3dv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) __asm__("__glewProgramUniformMatrix3dv");
extern void ( * glProgramUniformMatrix3fv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) __asm__("__glewProgramUniformMatrix3fv");
extern void ( * glProgramUniformMatrix3x2dv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) __asm__("__glewProgramUniformMatrix3x2dv");
extern void ( * glProgramUniformMatrix3x2fv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) __asm__("__glewProgramUniformMatrix3x2fv");
extern void ( * glProgramUniformMatrix3x4dv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) __asm__("__glewProgramUniformMatrix3x4dv");
extern void ( * glProgramUniformMatrix3x4fv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) __asm__("__glewProgramUniformMatrix3x4fv");
extern void ( * glProgramUniformMatrix4dv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) __asm__("__glewProgramUniformMatrix4dv");
extern void ( * glProgramUniformMatrix4fv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) __asm__("__glewProgramUniformMatrix4fv");
extern void ( * glProgramUniformMatrix4x2dv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) __asm__("__glewProgramUniformMatrix4x2dv");
extern void ( * glProgramUniformMatrix4x2fv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) __asm__("__glewProgramUniformMatrix4x2fv");
extern void ( * glProgramUniformMatrix4x3dv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) __asm__("__glewProgramUniformMatrix4x3dv");
extern void ( * glProgramUniformMatrix4x3fv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) __asm__("__glewProgramUniformMatrix4x3fv");
extern void ( * glUseProgramStages) (GLuint pipeline, GLbitfield stages, GLuint program) __asm__("__glewUseProgramStages");
extern void ( * glValidateProgramPipeline) (GLuint pipeline) __asm__("__glewValidateProgramPipeline");
extern void ( * glGetActiveAtomicCounterBufferiv) (GLuint program, GLuint bufferIndex, GLenum pname, GLint* params) __asm__("__glewGetActiveAtomicCounterBufferiv");
extern void ( * glBindImageTexture) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) __asm__("__glewBindImageTexture");
extern void ( * glMemoryBarrier) (GLbitfield barriers) __asm__("__glewMemoryBarrier");
extern void ( * glAttachObjectARB) (GLhandleARB containerObj, GLhandleARB obj) __asm__("__glewAttachObjectARB");
extern void ( * glCompileShaderARB) (GLhandleARB shaderObj) __asm__("__glewCompileShaderARB");
extern GLhandleARB ( * glCreateProgramObjectARB) (void) __asm__("__glewCreateProgramObjectARB");
extern GLhandleARB ( * glCreateShaderObjectARB) (GLenum shaderType) __asm__("__glewCreateShaderObjectARB");
extern void ( * glDeleteObjectARB) (GLhandleARB obj) __asm__("__glewDeleteObjectARB");
extern void ( * glDetachObjectARB) (GLhandleARB containerObj, GLhandleARB attachedObj) __asm__("__glewDetachObjectARB");
extern void ( * glGetActiveUniformARB) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint *size, GLenum *type, GLcharARB *name) __asm__("__glewGetActiveUniformARB");
extern void ( * glGetAttachedObjectsARB) (GLhandleARB containerObj, GLsizei maxCount, GLsizei* count, GLhandleARB *obj) __asm__("__glewGetAttachedObjectsARB");
extern GLhandleARB ( * glGetHandleARB) (GLenum pname) __asm__("__glewGetHandleARB");
extern void ( * glGetInfoLogARB) (GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB *infoLog) __asm__("__glewGetInfoLogARB");
extern void ( * glGetObjectParameterfvARB) (GLhandleARB obj, GLenum pname, GLfloat* params) __asm__("__glewGetObjectParameterfvARB");
extern void ( * glGetObjectParameterivARB) (GLhandleARB obj, GLenum pname, GLint* params) __asm__("__glewGetObjectParameterivARB");
extern void ( * glGetShaderSourceARB) (GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB *source) __asm__("__glewGetShaderSourceARB");
extern GLint ( * glGetUniformLocationARB) (GLhandleARB programObj, const GLcharARB* name) __asm__("__glewGetUniformLocationARB");
extern void ( * glGetUniformfvARB) (GLhandleARB programObj, GLint location, GLfloat* params) __asm__("__glewGetUniformfvARB");
extern void ( * glGetUniformivARB) (GLhandleARB programObj, GLint location, GLint* params) __asm__("__glewGetUniformivARB");
extern void ( * glLinkProgramARB) (GLhandleARB programObj) __asm__("__glewLinkProgramARB");
extern void ( * glShaderSourceARB) (GLhandleARB shaderObj, GLsizei count, const GLcharARB ** string, const GLint *length) __asm__("__glewShaderSourceARB");
extern void ( * glUniform1fARB) (GLint location, GLfloat v0) __asm__("__glewUniform1fARB");
extern void ( * glUniform1fvARB) (GLint location, GLsizei count, const GLfloat* value) __asm__("__glewUniform1fvARB");
extern void ( * glUniform1iARB) (GLint location, GLint v0) __asm__("__glewUniform1iARB");
extern void ( * glUniform1ivARB) (GLint location, GLsizei count, const GLint* value) __asm__("__glewUniform1ivARB");
extern void ( * glUniform2fARB) (GLint location, GLfloat v0, GLfloat v1) __asm__("__glewUniform2fARB");
extern void ( * glUniform2fvARB) (GLint location, GLsizei count, const GLfloat* value) __asm__("__glewUniform2fvARB");
extern void ( * glUniform2iARB) (GLint location, GLint v0, GLint v1) __asm__("__glewUniform2iARB");
extern void ( * glUniform2ivARB) (GLint location, GLsizei count, const GLint* value) __asm__("__glewUniform2ivARB");
extern void ( * glUniform3fARB) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2) __asm__("__glewUniform3fARB");
extern void ( * glUniform3fvARB) (GLint location, GLsizei count, const GLfloat* value) __asm__("__glewUniform3fvARB");
extern void ( * glUniform3iARB) (GLint location, GLint v0, GLint v1, GLint v2) __asm__("__glewUniform3iARB");
extern void ( * glUniform3ivARB) (GLint location, GLsizei count, const GLint* value) __asm__("__glewUniform3ivARB");
extern void ( * glUniform4fARB) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) __asm__("__glewUniform4fARB");
extern void ( * glUniform4fvARB) (GLint location, GLsizei count, const GLfloat* value) __asm__("__glewUniform4fvARB");
extern void ( * glUniform4iARB) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3) __asm__("__glewUniform4iARB");
extern void ( * glUniform4ivARB) (GLint location, GLsizei count, const GLint* value) __asm__("__glewUniform4ivARB");
extern void ( * glUniformMatrix2fvARB) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) __asm__("__glewUniformMatrix2fvARB");
extern void ( * glUniformMatrix3fvARB) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) __asm__("__glewUniformMatrix3fvARB");
extern void ( * glUniformMatrix4fvARB) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) __asm__("__glewUniformMatrix4fvARB");
extern void ( * glUseProgramObjectARB) (GLhandleARB programObj) __asm__("__glewUseProgramObjectARB");
extern void ( * glValidateProgramARB) (GLhandleARB programObj) __asm__("__glewValidateProgramARB");
extern void ( * glShaderStorageBlockBinding) (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) __asm__("__glewShaderStorageBlockBinding");
extern void ( * glGetActiveSubroutineName) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei* length, GLchar *name) __asm__("__glewGetActiveSubroutineName");
extern void ( * glGetActiveSubroutineUniformName) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei* length, GLchar *name) __asm__("__glewGetActiveSubroutineUniformName");
extern void ( * glGetActiveSubroutineUniformiv) (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint* values) __asm__("__glewGetActiveSubroutineUniformiv");
extern void ( * glGetProgramStageiv) (GLuint program, GLenum shadertype, GLenum pname, GLint* values) __asm__("__glewGetProgramStageiv");
extern GLuint ( * glGetSubroutineIndex) (GLuint program, GLenum shadertype, const GLchar* name) __asm__("__glewGetSubroutineIndex");
extern GLint ( * glGetSubroutineUniformLocation) (GLuint program, GLenum shadertype, const GLchar* name) __asm__("__glewGetSubroutineUniformLocation");
extern void ( * glGetUniformSubroutineuiv) (GLenum shadertype, GLint location, GLuint* params) __asm__("__glewGetUniformSubroutineuiv");
extern void ( * glUniformSubroutinesuiv) (GLenum shadertype, GLsizei count, const GLuint* indices) __asm__("__glewUniformSubroutinesuiv");
extern void ( * glCompileShaderIncludeARB) (GLuint shader, GLsizei count, const GLchar* const *path, const GLint *length) __asm__("__glewCompileShaderIncludeARB");
extern void ( * glDeleteNamedStringARB) (GLint namelen, const GLchar* name) __asm__("__glewDeleteNamedStringARB");
extern void ( * glGetNamedStringARB) (GLint namelen, const GLchar* name, GLsizei bufSize, GLint *stringlen, GLchar *string) __asm__("__glewGetNamedStringARB");
extern void ( * glGetNamedStringivARB) (GLint namelen, const GLchar* name, GLenum pname, GLint *params) __asm__("__glewGetNamedStringivARB");
extern GLboolean ( * glIsNamedStringARB) (GLint namelen, const GLchar* name) __asm__("__glewIsNamedStringARB");
extern void ( * glNamedStringARB) (GLenum type, GLint namelen, const GLchar* name, GLint stringlen, const GLchar *string) __asm__("__glewNamedStringARB");
extern void ( * glBufferPageCommitmentARB) (GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit) __asm__("__glewBufferPageCommitmentARB");
extern void ( * glTexPageCommitmentARB) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) __asm__("__glewTexPageCommitmentARB");
extern void ( * glTexturePageCommitmentEXT) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) __asm__("__glewTexturePageCommitmentEXT");
extern GLenum ( * glClientWaitSync) (GLsync GLsync,GLbitfield flags,GLuint64 timeout) __asm__("__glewClientWaitSync");
extern void ( * glDeleteSync) (GLsync GLsync) __asm__("__glewDeleteSync");
extern GLsync ( * glFenceSync) (GLenum condition,GLbitfield flags) __asm__("__glewFenceSync");
extern void ( * glGetInteger64v) (GLenum pname, GLint64* params) __asm__("__glewGetInteger64v");
extern void ( * glGetSynciv) (GLsync GLsync,GLenum pname,GLsizei bufSize,GLsizei* length, GLint *values) __asm__("__glewGetSynciv");
extern GLboolean ( * glIsSync) (GLsync GLsync) __asm__("__glewIsSync");
extern void ( * glWaitSync) (GLsync GLsync,GLbitfield flags,GLuint64 timeout) __asm__("__glewWaitSync");
extern void ( * glPatchParameterfv) (GLenum pname, const GLfloat* values) __asm__("__glewPatchParameterfv");
extern void ( * glPatchParameteri) (GLenum pname, GLint value) __asm__("__glewPatchParameteri");
extern void ( * glTextureBarrier) (void) __asm__("__glewTextureBarrier");
extern void ( * glTexBufferARB) (GLenum target, GLenum internalformat, GLuint buffer) __asm__("__glewTexBufferARB");
extern void ( * glTexBufferRange) (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) __asm__("__glewTexBufferRange");
extern void ( * glTextureBufferRangeEXT) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) __asm__("__glewTextureBufferRangeEXT");
extern void ( * glCompressedTexImage1DARB) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data) __asm__("__glewCompressedTexImage1DARB");
extern void ( * glCompressedTexImage2DARB) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data) __asm__("__glewCompressedTexImage2DARB");
extern void ( * glCompressedTexImage3DARB) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data) __asm__("__glewCompressedTexImage3DARB");
extern void ( * glCompressedTexSubImage1DARB) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data) __asm__("__glewCompressedTexSubImage1DARB");
extern void ( * glCompressedTexSubImage2DARB) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) __asm__("__glewCompressedTexSubImage2DARB");
extern void ( * glCompressedTexSubImage3DARB) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) __asm__("__glewCompressedTexSubImage3DARB");
extern void ( * glGetCompressedTexImageARB) (GLenum target, GLint lod, void *img) __asm__("__glewGetCompressedTexImageARB");
extern void ( * glGetMultisamplefv) (GLenum pname, GLuint index, GLfloat* val) __asm__("__glewGetMultisamplefv");
extern void ( * glSampleMaski) (GLuint index, GLbitfield mask) __asm__("__glewSampleMaski");
extern void ( * glTexImage2DMultisample) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) __asm__("__glewTexImage2DMultisample");
extern void ( * glTexImage3DMultisample) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) __asm__("__glewTexImage3DMultisample");
extern void ( * glTexStorage1D) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) __asm__("__glewTexStorage1D");
extern void ( * glTexStorage2D) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) __asm__("__glewTexStorage2D");
extern void ( * glTexStorage3D) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) __asm__("__glewTexStorage3D");
extern void ( * glTextureStorage1DEXT) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) __asm__("__glewTextureStorage1DEXT");
extern void ( * glTextureStorage2DEXT) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) __asm__("__glewTextureStorage2DEXT");
extern void ( * glTextureStorage3DEXT) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) __asm__("__glewTextureStorage3DEXT");
extern void ( * glTexStorage2DMultisample) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) __asm__("__glewTexStorage2DMultisample");
extern void ( * glTexStorage3DMultisample) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) __asm__("__glewTexStorage3DMultisample");
extern void ( * glTextureStorage2DMultisampleEXT) (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) __asm__("__glewTextureStorage2DMultisampleEXT");
extern void ( * glTextureStorage3DMultisampleEXT) (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) __asm__("__glewTextureStorage3DMultisampleEXT");
extern void ( * glTextureView) (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) __asm__("__glewTextureView");
extern void ( * glGetQueryObjecti64v) (GLuint id, GLenum pname, GLint64* params) __asm__("__glewGetQueryObjecti64v");
extern void ( * glGetQueryObjectui64v) (GLuint id, GLenum pname, GLuint64* params) __asm__("__glewGetQueryObjectui64v");
extern void ( * glQueryCounter) (GLuint id, GLenum target) __asm__("__glewQueryCounter");
extern void ( * glBindTransformFeedback) (GLenum target, GLuint id) __asm__("__glewBindTransformFeedback");
extern void ( * glDeleteTransformFeedbacks) (GLsizei n, const GLuint* ids) __asm__("__glewDeleteTransformFeedbacks");
extern void ( * glDrawTransformFeedback) (GLenum mode, GLuint id) __asm__("__glewDrawTransformFeedback");
extern void ( * glGenTransformFeedbacks) (GLsizei n, GLuint* ids) __asm__("__glewGenTransformFeedbacks");
extern GLboolean ( * glIsTransformFeedback) (GLuint id) __asm__("__glewIsTransformFeedback");
extern void ( * glPauseTransformFeedback) (void) __asm__("__glewPauseTransformFeedback");
extern void ( * glResumeTransformFeedback) (void) __asm__("__glewResumeTransformFeedback");
extern void ( * glBeginQueryIndexed) (GLenum target, GLuint index, GLuint id) __asm__("__glewBeginQueryIndexed");
extern void ( * glDrawTransformFeedbackStream) (GLenum mode, GLuint id, GLuint stream) __asm__("__glewDrawTransformFeedbackStream");
extern void ( * glEndQueryIndexed) (GLenum target, GLuint index) __asm__("__glewEndQueryIndexed");
extern void ( * glGetQueryIndexediv) (GLenum target, GLuint index, GLenum pname, GLint* params) __asm__("__glewGetQueryIndexediv");
extern void ( * glDrawTransformFeedbackInstanced) (GLenum mode, GLuint id, GLsizei primcount) __asm__("__glewDrawTransformFeedbackInstanced");
extern void ( * glDrawTransformFeedbackStreamInstanced) (GLenum mode, GLuint id, GLuint stream, GLsizei primcount) __asm__("__glewDrawTransformFeedbackStreamInstanced");
extern void ( * glLoadTransposeMatrixdARB) (GLdouble m[16]) __asm__("__glewLoadTransposeMatrixdARB");
extern void ( * glLoadTransposeMatrixfARB) (GLfloat m[16]) __asm__("__glewLoadTransposeMatrixfARB");
extern void ( * glMultTransposeMatrixdARB) (GLdouble m[16]) __asm__("__glewMultTransposeMatrixdARB");
extern void ( * glMultTransposeMatrixfARB) (GLfloat m[16]) __asm__("__glewMultTransposeMatrixfARB");
extern void ( * glBindBufferBase) (GLenum target, GLuint index, GLuint buffer) __asm__("__glewBindBufferBase");
extern void ( * glBindBufferRange) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) __asm__("__glewBindBufferRange");
extern void ( * glGetActiveUniformBlockName) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName) __asm__("__glewGetActiveUniformBlockName");
extern void ( * glGetActiveUniformBlockiv) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params) __asm__("__glewGetActiveUniformBlockiv");
extern void ( * glGetActiveUniformName) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformName) __asm__("__glewGetActiveUniformName");
extern void ( * glGetActiveUniformsiv) (GLuint program, GLsizei uniformCount, const GLuint* uniformIndices, GLenum pname, GLint* params) __asm__("__glewGetActiveUniformsiv");
extern void ( * glGetIntegeri_v) (GLenum target, GLuint index, GLint* data) __asm__("__glewGetIntegeri_v");
extern GLuint ( * glGetUniformBlockIndex) (GLuint program, const GLchar* uniformBlockName) __asm__("__glewGetUniformBlockIndex");
extern void ( * glGetUniformIndices) (GLuint program, GLsizei uniformCount, const GLchar* const * uniformNames, GLuint* uniformIndices) __asm__("__glewGetUniformIndices");
extern void ( * glUniformBlockBinding) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) __asm__("__glewUniformBlockBinding");
extern void ( * glBindVertexArray) (GLuint array) __asm__("__glewBindVertexArray");
extern void ( * glDeleteVertexArrays) (GLsizei n, const GLuint* arrays) __asm__("__glewDeleteVertexArrays");
extern void ( * glGenVertexArrays) (GLsizei n, GLuint* arrays) __asm__("__glewGenVertexArrays");
extern GLboolean ( * glIsVertexArray) (GLuint array) __asm__("__glewIsVertexArray");
extern void ( * glGetVertexAttribLdv) (GLuint index, GLenum pname, GLdouble* params) __asm__("__glewGetVertexAttribLdv");
extern void ( * glVertexAttribL1d) (GLuint index, GLdouble x) __asm__("__glewVertexAttribL1d");
extern void ( * glVertexAttribL1dv) (GLuint index, const GLdouble* v) __asm__("__glewVertexAttribL1dv");
extern void ( * glVertexAttribL2d) (GLuint index, GLdouble x, GLdouble y) __asm__("__glewVertexAttribL2d");
extern void ( * glVertexAttribL2dv) (GLuint index, const GLdouble* v) __asm__("__glewVertexAttribL2dv");
extern void ( * glVertexAttribL3d) (GLuint index, GLdouble x, GLdouble y, GLdouble z) __asm__("__glewVertexAttribL3d");
extern void ( * glVertexAttribL3dv) (GLuint index, const GLdouble* v) __asm__("__glewVertexAttribL3dv");
extern void ( * glVertexAttribL4d) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) __asm__("__glewVertexAttribL4d");
extern void ( * glVertexAttribL4dv) (GLuint index, const GLdouble* v) __asm__("__glewVertexAttribL4dv");
extern void ( * glVertexAttribLPointer) (GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer) __asm__("__glewVertexAttribLPointer");
extern void ( * glBindVertexBuffer) (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) __asm__("__glewBindVertexBuffer");
extern void ( * glVertexArrayBindVertexBufferEXT) (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) __asm__("__glewVertexArrayBindVertexBufferEXT");
extern void ( * glVertexArrayVertexAttribBindingEXT) (GLuint vaobj, GLuint attribindex, GLuint bindingindex) __asm__("__glewVertexArrayVertexAttribBindingEXT");
extern void ( * glVertexArrayVertexAttribFormatEXT) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) __asm__("__glewVertexArrayVertexAttribFormatEXT");
extern void ( * glVertexArrayVertexAttribIFormatEXT) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) __asm__("__glewVertexArrayVertexAttribIFormatEXT");
extern void ( * glVertexArrayVertexAttribLFormatEXT) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) __asm__("__glewVertexArrayVertexAttribLFormatEXT");
extern void ( * glVertexArrayVertexBindingDivisorEXT) (GLuint vaobj, GLuint bindingindex, GLuint divisor) __asm__("__glewVertexArrayVertexBindingDivisorEXT");
extern void ( * glVertexAttribBinding) (GLuint attribindex, GLuint bindingindex) __asm__("__glewVertexAttribBinding");
extern void ( * glVertexAttribFormat) (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) __asm__("__glewVertexAttribFormat");
extern void ( * glVertexAttribIFormat) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) __asm__("__glewVertexAttribIFormat");
extern void ( * glVertexAttribLFormat) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) __asm__("__glewVertexAttribLFormat");
extern void ( * glVertexBindingDivisor) (GLuint bindingindex, GLuint divisor) __asm__("__glewVertexBindingDivisor");
extern void ( * glVertexBlendARB) (GLint count) __asm__("__glewVertexBlendARB");
extern void ( * glWeightPointerARB) (GLint size, GLenum type, GLsizei stride, void *pointer) __asm__("__glewWeightPointerARB");
extern void ( * glWeightbvARB) (GLint size, GLbyte *weights) __asm__("__glewWeightbvARB");
extern void ( * glWeightdvARB) (GLint size, GLdouble *weights) __asm__("__glewWeightdvARB");
extern void ( * glWeightfvARB) (GLint size, GLfloat *weights) __asm__("__glewWeightfvARB");
extern void ( * glWeightivARB) (GLint size, GLint *weights) __asm__("__glewWeightivARB");
extern void ( * glWeightsvARB) (GLint size, GLshort *weights) __asm__("__glewWeightsvARB");
extern void ( * glWeightubvARB) (GLint size, GLubyte *weights) __asm__("__glewWeightubvARB");
extern void ( * glWeightuivARB) (GLint size, GLuint *weights) __asm__("__glewWeightuivARB");
extern void ( * glWeightusvARB) (GLint size, GLushort *weights) __asm__("__glewWeightusvARB");
extern void ( * glBindBufferARB) (GLenum target, GLuint buffer) __asm__("__glewBindBufferARB");
extern void ( * glBufferDataARB) (GLenum target, GLsizeiptrARB size, const void *data, GLenum usage) __asm__("__glewBufferDataARB");
extern void ( * glBufferSubDataARB) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data) __asm__("__glewBufferSubDataARB");
extern void ( * glDeleteBuffersARB) (GLsizei n, const GLuint* buffers) __asm__("__glewDeleteBuffersARB");
extern void ( * glGenBuffersARB) (GLsizei n, GLuint* buffers) __asm__("__glewGenBuffersARB");
extern void ( * glGetBufferParameterivARB) (GLenum target, GLenum pname, GLint* params) __asm__("__glewGetBufferParameterivARB");
extern void ( * glGetBufferPointervARB) (GLenum target, GLenum pname, void** params) __asm__("__glewGetBufferPointervARB");
extern void ( * glGetBufferSubDataARB) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data) __asm__("__glewGetBufferSubDataARB");
extern GLboolean ( * glIsBufferARB) (GLuint buffer) __asm__("__glewIsBufferARB");
extern void * ( * glMapBufferARB) (GLenum target, GLenum access) __asm__("__glewMapBufferARB");
extern GLboolean ( * glUnmapBufferARB) (GLenum target) __asm__("__glewUnmapBufferARB");
extern void ( * glBindProgramARB) (GLenum target, GLuint program) __asm__("__glewBindProgramARB");
extern void ( * glDeleteProgramsARB) (GLsizei n, const GLuint* programs) __asm__("__glewDeleteProgramsARB");
extern void ( * glDisableVertexAttribArrayARB) (GLuint index) __asm__("__glewDisableVertexAttribArrayARB");
extern void ( * glEnableVertexAttribArrayARB) (GLuint index) __asm__("__glewEnableVertexAttribArrayARB");
extern void ( * glGenProgramsARB) (GLsizei n, GLuint* programs) __asm__("__glewGenProgramsARB");
extern void ( * glGetProgramEnvParameterdvARB) (GLenum target, GLuint index, GLdouble* params) __asm__("__glewGetProgramEnvParameterdvARB");
extern void ( * glGetProgramEnvParameterfvARB) (GLenum target, GLuint index, GLfloat* params) __asm__("__glewGetProgramEnvParameterfvARB");
extern void ( * glGetProgramLocalParameterdvARB) (GLenum target, GLuint index, GLdouble* params) __asm__("__glewGetProgramLocalParameterdvARB");
extern void ( * glGetProgramLocalParameterfvARB) (GLenum target, GLuint index, GLfloat* params) __asm__("__glewGetProgramLocalParameterfvARB");
extern void ( * glGetProgramStringARB) (GLenum target, GLenum pname, void *string) __asm__("__glewGetProgramStringARB");
extern void ( * glGetProgramivARB) (GLenum target, GLenum pname, GLint* params) __asm__("__glewGetProgramivARB");
extern void ( * glGetVertexAttribPointervARB) (GLuint index, GLenum pname, void** pointer) __asm__("__glewGetVertexAttribPointervARB");
extern void ( * glGetVertexAttribdvARB) (GLuint index, GLenum pname, GLdouble* params) __asm__("__glewGetVertexAttribdvARB");
extern void ( * glGetVertexAttribfvARB) (GLuint index, GLenum pname, GLfloat* params) __asm__("__glewGetVertexAttribfvARB");
extern void ( * glGetVertexAttribivARB) (GLuint index, GLenum pname, GLint* params) __asm__("__glewGetVertexAttribivARB");
extern GLboolean ( * glIsProgramARB) (GLuint program) __asm__("__glewIsProgramARB");
extern void ( * glProgramEnvParameter4dARB) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) __asm__("__glewProgramEnvParameter4dARB");
extern void ( * glProgramEnvParameter4dvARB) (GLenum target, GLuint index, const GLdouble* params) __asm__("__glewProgramEnvParameter4dvARB");
extern void ( * glProgramEnvParameter4fARB) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) __asm__("__glewProgramEnvParameter4fARB");
extern void ( * glProgramEnvParameter4fvARB) (GLenum target, GLuint index, const GLfloat* params) __asm__("__glewProgramEnvParameter4fvARB");
extern void ( * glProgramLocalParameter4dARB) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) __asm__("__glewProgramLocalParameter4dARB");
extern void ( * glProgramLocalParameter4dvARB) (GLenum target, GLuint index, const GLdouble* params) __asm__("__glewProgramLocalParameter4dvARB");
extern void ( * glProgramLocalParameter4fARB) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) __asm__("__glewProgramLocalParameter4fARB");
extern void ( * glProgramLocalParameter4fvARB) (GLenum target, GLuint index, const GLfloat* params) __asm__("__glewProgramLocalParameter4fvARB");
extern void ( * glProgramStringARB) (GLenum target, GLenum format, GLsizei len, const void *string) __asm__("__glewProgramStringARB");
extern void ( * glVertexAttrib1dARB) (GLuint index, GLdouble x) __asm__("__glewVertexAttrib1dARB");
extern void ( * glVertexAttrib1dvARB) (GLuint index, const GLdouble* v) __asm__("__glewVertexAttrib1dvARB");
extern void ( * glVertexAttrib1fARB) (GLuint index, GLfloat x) __asm__("__glewVertexAttrib1fARB");
extern void ( * glVertexAttrib1fvARB) (GLuint index, const GLfloat* v) __asm__("__glewVertexAttrib1fvARB");
extern void ( * glVertexAttrib1sARB) (GLuint index, GLshort x) __asm__("__glewVertexAttrib1sARB");
extern void ( * glVertexAttrib1svARB) (GLuint index, const GLshort* v) __asm__("__glewVertexAttrib1svARB");
extern void ( * glVertexAttrib2dARB) (GLuint index, GLdouble x, GLdouble y) __asm__("__glewVertexAttrib2dARB");
extern void ( * glVertexAttrib2dvARB) (GLuint index, const GLdouble* v) __asm__("__glewVertexAttrib2dvARB");
extern void ( * glVertexAttrib2fARB) (GLuint index, GLfloat x, GLfloat y) __asm__("__glewVertexAttrib2fARB");
extern void ( * glVertexAttrib2fvARB) (GLuint index, const GLfloat* v) __asm__("__glewVertexAttrib2fvARB");
extern void ( * glVertexAttrib2sARB) (GLuint index, GLshort x, GLshort y) __asm__("__glewVertexAttrib2sARB");
extern void ( * glVertexAttrib2svARB) (GLuint index, const GLshort* v) __asm__("__glewVertexAttrib2svARB");
extern void ( * glVertexAttrib3dARB) (GLuint index, GLdouble x, GLdouble y, GLdouble z) __asm__("__glewVertexAttrib3dARB");
extern void ( * glVertexAttrib3dvARB) (GLuint index, const GLdouble* v) __asm__("__glewVertexAttrib3dvARB");
extern void ( * glVertexAttrib3fARB) (GLuint index, GLfloat x, GLfloat y, GLfloat z) __asm__("__glewVertexAttrib3fARB");
extern void ( * glVertexAttrib3fvARB) (GLuint index, const GLfloat* v) __asm__("__glewVertexAttrib3fvARB");
extern void ( * glVertexAttrib3sARB) (GLuint index, GLshort x, GLshort y, GLshort z) __asm__("__glewVertexAttrib3sARB");
extern void ( * glVertexAttrib3svARB) (GLuint index, const GLshort* v) __asm__("__glewVertexAttrib3svARB");
extern void ( * glVertexAttrib4NbvARB) (GLuint index, const GLbyte* v) __asm__("__glewVertexAttrib4NbvARB");
extern void ( * glVertexAttrib4NivARB) (GLuint index, const GLint* v) __asm__("__glewVertexAttrib4NivARB");
extern void ( * glVertexAttrib4NsvARB) (GLuint index, const GLshort* v) __asm__("__glewVertexAttrib4NsvARB");
extern void ( * glVertexAttrib4NubARB) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) __asm__("__glewVertexAttrib4NubARB");
extern void ( * glVertexAttrib4NubvARB) (GLuint index, const GLubyte* v) __asm__("__glewVertexAttrib4NubvARB");
extern void ( * glVertexAttrib4NuivARB) (GLuint index, const GLuint* v) __asm__("__glewVertexAttrib4NuivARB");
extern void ( * glVertexAttrib4NusvARB) (GLuint index, const GLushort* v) __asm__("__glewVertexAttrib4NusvARB");
extern void ( * glVertexAttrib4bvARB) (GLuint index, const GLbyte* v) __asm__("__glewVertexAttrib4bvARB");
extern void ( * glVertexAttrib4dARB) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) __asm__("__glewVertexAttrib4dARB");
extern void ( * glVertexAttrib4dvARB) (GLuint index, const GLdouble* v) __asm__("__glewVertexAttrib4dvARB");
extern void ( * glVertexAttrib4fARB) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) __asm__("__glewVertexAttrib4fARB");
extern void ( * glVertexAttrib4fvARB) (GLuint index, const GLfloat* v) __asm__("__glewVertexAttrib4fvARB");
extern void ( * glVertexAttrib4ivARB) (GLuint index, const GLint* v) __asm__("__glewVertexAttrib4ivARB");
extern void ( * glVertexAttrib4sARB) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) __asm__("__glewVertexAttrib4sARB");
extern void ( * glVertexAttrib4svARB) (GLuint index, const GLshort* v) __asm__("__glewVertexAttrib4svARB");
extern void ( * glVertexAttrib4ubvARB) (GLuint index, const GLubyte* v) __asm__("__glewVertexAttrib4ubvARB");
extern void ( * glVertexAttrib4uivARB) (GLuint index, const GLuint* v) __asm__("__glewVertexAttrib4uivARB");
extern void ( * glVertexAttrib4usvARB) (GLuint index, const GLushort* v) __asm__("__glewVertexAttrib4usvARB");
extern void ( * glVertexAttribPointerARB) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer) __asm__("__glewVertexAttribPointerARB");
extern void ( * glBindAttribLocationARB) (GLhandleARB programObj, GLuint index, const GLcharARB* name) __asm__("__glewBindAttribLocationARB");
extern void ( * glGetActiveAttribARB) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint *size, GLenum *type, GLcharARB *name) __asm__("__glewGetActiveAttribARB");
extern GLint ( * glGetAttribLocationARB) (GLhandleARB programObj, const GLcharARB* name) __asm__("__glewGetAttribLocationARB");
extern void ( * glColorP3ui) (GLenum type, GLuint color) __asm__("__glewColorP3ui");
extern void ( * glColorP3uiv) (GLenum type, const GLuint* color) __asm__("__glewColorP3uiv");
extern void ( * glColorP4ui) (GLenum type, GLuint color) __asm__("__glewColorP4ui");
extern void ( * glColorP4uiv) (GLenum type, const GLuint* color) __asm__("__glewColorP4uiv");
extern void ( * glMultiTexCoordP1ui) (GLenum texture, GLenum type, GLuint coords) __asm__("__glewMultiTexCoordP1ui");
extern void ( * glMultiTexCoordP1uiv) (GLenum texture, GLenum type, const GLuint* coords) __asm__("__glewMultiTexCoordP1uiv");
extern void ( * glMultiTexCoordP2ui) (GLenum texture, GLenum type, GLuint coords) __asm__("__glewMultiTexCoordP2ui");
extern void ( * glMultiTexCoordP2uiv) (GLenum texture, GLenum type, const GLuint* coords) __asm__("__glewMultiTexCoordP2uiv");
extern void ( * glMultiTexCoordP3ui) (GLenum texture, GLenum type, GLuint coords) __asm__("__glewMultiTexCoordP3ui");
extern void ( * glMultiTexCoordP3uiv) (GLenum texture, GLenum type, const GLuint* coords) __asm__("__glewMultiTexCoordP3uiv");
extern void ( * glMultiTexCoordP4ui) (GLenum texture, GLenum type, GLuint coords) __asm__("__glewMultiTexCoordP4ui");
extern void ( * glMultiTexCoordP4uiv) (GLenum texture, GLenum type, const GLuint* coords) __asm__("__glewMultiTexCoordP4uiv");
extern void ( * glNormalP3ui) (GLenum type, GLuint coords) __asm__("__glewNormalP3ui");
extern void ( * glNormalP3uiv) (GLenum type, const GLuint* coords) __asm__("__glewNormalP3uiv");
extern void ( * glSecondaryColorP3ui) (GLenum type, GLuint color) __asm__("__glewSecondaryColorP3ui");
extern void ( * glSecondaryColorP3uiv) (GLenum type, const GLuint* color) __asm__("__glewSecondaryColorP3uiv");
extern void ( * glTexCoordP1ui) (GLenum type, GLuint coords) __asm__("__glewTexCoordP1ui");
extern void ( * glTexCoordP1uiv) (GLenum type, const GLuint* coords) __asm__("__glewTexCoordP1uiv");
extern void ( * glTexCoordP2ui) (GLenum type, GLuint coords) __asm__("__glewTexCoordP2ui");
extern void ( * glTexCoordP2uiv) (GLenum type, const GLuint* coords) __asm__("__glewTexCoordP2uiv");
extern void ( * glTexCoordP3ui) (GLenum type, GLuint coords) __asm__("__glewTexCoordP3ui");
extern void ( * glTexCoordP3uiv) (GLenum type, const GLuint* coords) __asm__("__glewTexCoordP3uiv");
extern void ( * glTexCoordP4ui) (GLenum type, GLuint coords) __asm__("__glewTexCoordP4ui");
extern void ( * glTexCoordP4uiv) (GLenum type, const GLuint* coords) __asm__("__glewTexCoordP4uiv");
extern void ( * glVertexAttribP1ui) (GLuint index, GLenum type, GLboolean normalized, GLuint value) __asm__("__glewVertexAttribP1ui");
extern void ( * glVertexAttribP1uiv) (GLuint index, GLenum type, GLboolean normalized, const GLuint* value) __asm__("__glewVertexAttribP1uiv");
extern void ( * glVertexAttribP2ui) (GLuint index, GLenum type, GLboolean normalized, GLuint value) __asm__("__glewVertexAttribP2ui");
extern void ( * glVertexAttribP2uiv) (GLuint index, GLenum type, GLboolean normalized, const GLuint* value) __asm__("__glewVertexAttribP2uiv");
extern void ( * glVertexAttribP3ui) (GLuint index, GLenum type, GLboolean normalized, GLuint value) __asm__("__glewVertexAttribP3ui");
extern void ( * glVertexAttribP3uiv) (GLuint index, GLenum type, GLboolean normalized, const GLuint* value) __asm__("__glewVertexAttribP3uiv");
extern void ( * glVertexAttribP4ui) (GLuint index, GLenum type, GLboolean normalized, GLuint value) __asm__("__glewVertexAttribP4ui");
extern void ( * glVertexAttribP4uiv) (GLuint index, GLenum type, GLboolean normalized, const GLuint* value) __asm__("__glewVertexAttribP4uiv");
extern void ( * glVertexP2ui) (GLenum type, GLuint value) __asm__("__glewVertexP2ui");
extern void ( * glVertexP2uiv) (GLenum type, const GLuint* value) __asm__("__glewVertexP2uiv");
extern void ( * glVertexP3ui) (GLenum type, GLuint value) __asm__("__glewVertexP3ui");
extern void ( * glVertexP3uiv) (GLenum type, const GLuint* value) __asm__("__glewVertexP3uiv");
extern void ( * glVertexP4ui) (GLenum type, GLuint value) __asm__("__glewVertexP4ui");
extern void ( * glVertexP4uiv) (GLenum type, const GLuint* value) __asm__("__glewVertexP4uiv");
extern void ( * glDepthRangeArrayv) (GLuint first, GLsizei count, const GLclampd * v) __asm__("__glewDepthRangeArrayv");
extern void ( * glDepthRangeIndexed) (GLuint index, GLclampd n, GLclampd f) __asm__("__glewDepthRangeIndexed");
extern void ( * glGetDoublei_v) (GLenum target, GLuint index, GLdouble* data) __asm__("__glewGetDoublei_v");
extern void ( * glGetFloati_v) (GLenum target, GLuint index, GLfloat* data) __asm__("__glewGetFloati_v");
extern void ( * glScissorArrayv) (GLuint first, GLsizei count, const GLint * v) __asm__("__glewScissorArrayv");
extern void ( * glScissorIndexed) (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) __asm__("__glewScissorIndexed");
extern void ( * glScissorIndexedv) (GLuint index, const GLint * v) __asm__("__glewScissorIndexedv");
extern void ( * glViewportArrayv) (GLuint first, GLsizei count, const GLfloat * v) __asm__("__glewViewportArrayv");
extern void ( * glViewportIndexedf) (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) __asm__("__glewViewportIndexedf");
extern void ( * glViewportIndexedfv) (GLuint index, const GLfloat * v) __asm__("__glewViewportIndexedfv");
extern void ( * glWindowPos2dARB) (GLdouble x, GLdouble y) __asm__("__glewWindowPos2dARB");
extern void ( * glWindowPos2dvARB) (const GLdouble* p) __asm__("__glewWindowPos2dvARB");
extern void ( * glWindowPos2fARB) (GLfloat x, GLfloat y) __asm__("__glewWindowPos2fARB");
extern void ( * glWindowPos2fvARB) (const GLfloat* p) __asm__("__glewWindowPos2fvARB");
extern void ( * glWindowPos2iARB) (GLint x, GLint y) __asm__("__glewWindowPos2iARB");
extern void ( * glWindowPos2ivARB) (const GLint* p) __asm__("__glewWindowPos2ivARB");
extern void ( * glWindowPos2sARB) (GLshort x, GLshort y) __asm__("__glewWindowPos2sARB");
extern void ( * glWindowPos2svARB) (const GLshort* p) __asm__("__glewWindowPos2svARB");
extern void ( * glWindowPos3dARB) (GLdouble x, GLdouble y, GLdouble z) __asm__("__glewWindowPos3dARB");
extern void ( * glWindowPos3dvARB) (const GLdouble* p) __asm__("__glewWindowPos3dvARB");
extern void ( * glWindowPos3fARB) (GLfloat x, GLfloat y, GLfloat z) __asm__("__glewWindowPos3fARB");
extern void ( * glWindowPos3fvARB) (const GLfloat* p) __asm__("__glewWindowPos3fvARB");
extern void ( * glWindowPos3iARB) (GLint x, GLint y, GLint z) __asm__("__glewWindowPos3iARB");
extern void ( * glWindowPos3ivARB) (const GLint* p) __asm__("__glewWindowPos3ivARB");
extern void ( * glWindowPos3sARB) (GLshort x, GLshort y, GLshort z) __asm__("__glewWindowPos3sARB");
extern void ( * glWindowPos3svARB) (const GLshort* p) __asm__("__glewWindowPos3svARB");
extern void ( * glDrawBuffersATI) (GLsizei n, const GLenum* bufs) __asm__("__glewDrawBuffersATI");
extern void ( * glDrawElementArrayATI) (GLenum mode, GLsizei count) __asm__("__glewDrawElementArrayATI");
extern void ( * glDrawRangeElementArrayATI) (GLenum mode, GLuint start, GLuint end, GLsizei count) __asm__("__glewDrawRangeElementArrayATI");
extern void ( * glElementPointerATI) (GLenum type, const void *pointer) __asm__("__glewElementPointerATI");
extern void ( * glGetTexBumpParameterfvATI) (GLenum pname, GLfloat *param) __asm__("__glewGetTexBumpParameterfvATI");
extern void ( * glGetTexBumpParameterivATI) (GLenum pname, GLint *param) __asm__("__glewGetTexBumpParameterivATI");
extern void ( * glTexBumpParameterfvATI) (GLenum pname, GLfloat *param) __asm__("__glewTexBumpParameterfvATI");
extern void ( * glTexBumpParameterivATI) (GLenum pname, GLint *param) __asm__("__glewTexBumpParameterivATI");
extern void ( * glAlphaFragmentOp1ATI) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) __asm__("__glewAlphaFragmentOp1ATI");
extern void ( * glAlphaFragmentOp2ATI) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) __asm__("__glewAlphaFragmentOp2ATI");
extern void ( * glAlphaFragmentOp3ATI) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) __asm__("__glewAlphaFragmentOp3ATI");
extern void ( * glBeginFragmentShaderATI) (void) __asm__("__glewBeginFragmentShaderATI");
extern void ( * glBindFragmentShaderATI) (GLuint id) __asm__("__glewBindFragmentShaderATI");
extern void ( * glColorFragmentOp1ATI) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) __asm__("__glewColorFragmentOp1ATI");
extern void ( * glColorFragmentOp2ATI) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) __asm__("__glewColorFragmentOp2ATI");
extern void ( * glColorFragmentOp3ATI) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) __asm__("__glewColorFragmentOp3ATI");
extern void ( * glDeleteFragmentShaderATI) (GLuint id) __asm__("__glewDeleteFragmentShaderATI");
extern void ( * glEndFragmentShaderATI) (void) __asm__("__glewEndFragmentShaderATI");
extern GLuint ( * glGenFragmentShadersATI) (GLuint range) __asm__("__glewGenFragmentShadersATI");
extern void ( * glPassTexCoordATI) (GLuint dst, GLuint coord, GLenum swizzle) __asm__("__glewPassTexCoordATI");
extern void ( * glSampleMapATI) (GLuint dst, GLuint interp, GLenum swizzle) __asm__("__glewSampleMapATI");
extern void ( * glSetFragmentShaderConstantATI) (GLuint dst, const GLfloat* value) __asm__("__glewSetFragmentShaderConstantATI");
extern void * ( * glMapObjectBufferATI) (GLuint buffer) __asm__("__glewMapObjectBufferATI");
extern void ( * glUnmapObjectBufferATI) (GLuint buffer) __asm__("__glewUnmapObjectBufferATI");
extern void ( * glPNTrianglesfATI) (GLenum pname, GLfloat param) __asm__("__glewPNTrianglesfATI");
extern void ( * glPNTrianglesiATI) (GLenum pname, GLint param) __asm__("__glewPNTrianglesiATI");
extern void ( * glStencilFuncSeparateATI) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask) __asm__("__glewStencilFuncSeparateATI");
extern void ( * glStencilOpSeparateATI) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) __asm__("__glewStencilOpSeparateATI");
extern void ( * glArrayObjectATI) (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) __asm__("__glewArrayObjectATI");
extern void ( * glFreeObjectBufferATI) (GLuint buffer) __asm__("__glewFreeObjectBufferATI");
extern void ( * glGetArrayObjectfvATI) (GLenum array, GLenum pname, GLfloat* params) __asm__("__glewGetArrayObjectfvATI");
extern void ( * glGetArrayObjectivATI) (GLenum array, GLenum pname, GLint* params) __asm__("__glewGetArrayObjectivATI");
extern void ( * glGetObjectBufferfvATI) (GLuint buffer, GLenum pname, GLfloat* params) __asm__("__glewGetObjectBufferfvATI");
extern void ( * glGetObjectBufferivATI) (GLuint buffer, GLenum pname, GLint* params) __asm__("__glewGetObjectBufferivATI");
extern void ( * glGetVariantArrayObjectfvATI) (GLuint id, GLenum pname, GLfloat* params) __asm__("__glewGetVariantArrayObjectfvATI");
extern void ( * glGetVariantArrayObjectivATI) (GLuint id, GLenum pname, GLint* params) __asm__("__glewGetVariantArrayObjectivATI");
extern GLboolean ( * glIsObjectBufferATI) (GLuint buffer) __asm__("__glewIsObjectBufferATI");
extern GLuint ( * glNewObjectBufferATI) (GLsizei size, const void *pointer, GLenum usage) __asm__("__glewNewObjectBufferATI");
extern void ( * glUpdateObjectBufferATI) (GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve) __asm__("__glewUpdateObjectBufferATI");
extern void ( * glVariantArrayObjectATI) (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) __asm__("__glewVariantArrayObjectATI");
extern void ( * glGetVertexAttribArrayObjectfvATI) (GLuint index, GLenum pname, GLfloat* params) __asm__("__glewGetVertexAttribArrayObjectfvATI");
extern void ( * glGetVertexAttribArrayObjectivATI) (GLuint index, GLenum pname, GLint* params) __asm__("__glewGetVertexAttribArrayObjectivATI");
extern void ( * glVertexAttribArrayObjectATI) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset) __asm__("__glewVertexAttribArrayObjectATI");
extern void ( * glClientActiveVertexStreamATI) (GLenum stream) __asm__("__glewClientActiveVertexStreamATI");
extern void ( * glNormalStream3bATI) (GLenum stream, GLbyte x, GLbyte y, GLbyte z) __asm__("__glewNormalStream3bATI");
extern void ( * glNormalStream3bvATI) (GLenum stream, const GLbyte *coords) __asm__("__glewNormalStream3bvATI");
extern void ( * glNormalStream3dATI) (GLenum stream, GLdouble x, GLdouble y, GLdouble z) __asm__("__glewNormalStream3dATI");
extern void ( * glNormalStream3dvATI) (GLenum stream, const GLdouble *coords) __asm__("__glewNormalStream3dvATI");
extern void ( * glNormalStream3fATI) (GLenum stream, GLfloat x, GLfloat y, GLfloat z) __asm__("__glewNormalStream3fATI");
extern void ( * glNormalStream3fvATI) (GLenum stream, const GLfloat *coords) __asm__("__glewNormalStream3fvATI");
extern void ( * glNormalStream3iATI) (GLenum stream, GLint x, GLint y, GLint z) __asm__("__glewNormalStream3iATI");
extern void ( * glNormalStream3ivATI) (GLenum stream, const GLint *coords) __asm__("__glewNormalStream3ivATI");
extern void ( * glNormalStream3sATI) (GLenum stream, GLshort x, GLshort y, GLshort z) __asm__("__glewNormalStream3sATI");
extern void ( * glNormalStream3svATI) (GLenum stream, const GLshort *coords) __asm__("__glewNormalStream3svATI");
extern void ( * glVertexBlendEnvfATI) (GLenum pname, GLfloat param) __asm__("__glewVertexBlendEnvfATI");
extern void ( * glVertexBlendEnviATI) (GLenum pname, GLint param) __asm__("__glewVertexBlendEnviATI");
extern void ( * glVertexStream1dATI) (GLenum stream, GLdouble x) __asm__("__glewVertexStream1dATI");
extern void ( * glVertexStream1dvATI) (GLenum stream, const GLdouble *coords) __asm__("__glewVertexStream1dvATI");
extern void ( * glVertexStream1fATI) (GLenum stream, GLfloat x) __asm__("__glewVertexStream1fATI");
extern void ( * glVertexStream1fvATI) (GLenum stream, const GLfloat *coords) __asm__("__glewVertexStream1fvATI");
extern void ( * glVertexStream1iATI) (GLenum stream, GLint x) __asm__("__glewVertexStream1iATI");
extern void ( * glVertexStream1ivATI) (GLenum stream, const GLint *coords) __asm__("__glewVertexStream1ivATI");
extern void ( * glVertexStream1sATI) (GLenum stream, GLshort x) __asm__("__glewVertexStream1sATI");
extern void ( * glVertexStream1svATI) (GLenum stream, const GLshort *coords) __asm__("__glewVertexStream1svATI");
extern void ( * glVertexStream2dATI) (GLenum stream, GLdouble x, GLdouble y) __asm__("__glewVertexStream2dATI");
extern void ( * glVertexStream2dvATI) (GLenum stream, const GLdouble *coords) __asm__("__glewVertexStream2dvATI");
extern void ( * glVertexStream2fATI) (GLenum stream, GLfloat x, GLfloat y) __asm__("__glewVertexStream2fATI");
extern void ( * glVertexStream2fvATI) (GLenum stream, const GLfloat *coords) __asm__("__glewVertexStream2fvATI");
extern void ( * glVertexStream2iATI) (GLenum stream, GLint x, GLint y) __asm__("__glewVertexStream2iATI");
extern void ( * glVertexStream2ivATI) (GLenum stream, const GLint *coords) __asm__("__glewVertexStream2ivATI");
extern void ( * glVertexStream2sATI) (GLenum stream, GLshort x, GLshort y) __asm__("__glewVertexStream2sATI");
extern void ( * glVertexStream2svATI) (GLenum stream, const GLshort *coords) __asm__("__glewVertexStream2svATI");
extern void ( * glVertexStream3dATI) (GLenum stream, GLdouble x, GLdouble y, GLdouble z) __asm__("__glewVertexStream3dATI");
extern void ( * glVertexStream3dvATI) (GLenum stream, const GLdouble *coords) __asm__("__glewVertexStream3dvATI");
extern void ( * glVertexStream3fATI) (GLenum stream, GLfloat x, GLfloat y, GLfloat z) __asm__("__glewVertexStream3fATI");
extern void ( * glVertexStream3fvATI) (GLenum stream, const GLfloat *coords) __asm__("__glewVertexStream3fvATI");
extern void ( * glVertexStream3iATI) (GLenum stream, GLint x, GLint y, GLint z) __asm__("__glewVertexStream3iATI");
extern void ( * glVertexStream3ivATI) (GLenum stream, const GLint *coords) __asm__("__glewVertexStream3ivATI");
extern void ( * glVertexStream3sATI) (GLenum stream, GLshort x, GLshort y, GLshort z) __asm__("__glewVertexStream3sATI");
extern void ( * glVertexStream3svATI) (GLenum stream, const GLshort *coords) __asm__("__glewVertexStream3svATI");
extern void ( * glVertexStream4dATI) (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w) __asm__("__glewVertexStream4dATI");
extern void ( * glVertexStream4dvATI) (GLenum stream, const GLdouble *coords) __asm__("__glewVertexStream4dvATI");
extern void ( * glVertexStream4fATI) (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w) __asm__("__glewVertexStream4fATI");
extern void ( * glVertexStream4fvATI) (GLenum stream, const GLfloat *coords) __asm__("__glewVertexStream4fvATI");
extern void ( * glVertexStream4iATI) (GLenum stream, GLint x, GLint y, GLint z, GLint w) __asm__("__glewVertexStream4iATI");
extern void ( * glVertexStream4ivATI) (GLenum stream, const GLint *coords) __asm__("__glewVertexStream4ivATI");
extern void ( * glVertexStream4sATI) (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w) __asm__("__glewVertexStream4sATI");
extern void ( * glVertexStream4svATI) (GLenum stream, const GLshort *coords) __asm__("__glewVertexStream4svATI");
extern GLint ( * glGetUniformBufferSizeEXT) (GLuint program, GLint location) __asm__("__glewGetUniformBufferSizeEXT");
extern GLintptr ( * glGetUniformOffsetEXT) (GLuint program, GLint location) __asm__("__glewGetUniformOffsetEXT");
extern void ( * glUniformBufferEXT) (GLuint program, GLint location, GLuint buffer) __asm__("__glewUniformBufferEXT");
extern void ( * glBlendColorEXT) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha) __asm__("__glewBlendColorEXT");
extern void ( * glBlendEquationSeparateEXT) (GLenum modeRGB, GLenum modeAlpha) __asm__("__glewBlendEquationSeparateEXT");
extern void ( * glBlendFuncSeparateEXT) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) __asm__("__glewBlendFuncSeparateEXT");
extern void ( * glBlendEquationEXT) (GLenum mode) __asm__("__glewBlendEquationEXT");
extern void ( * glColorSubTableEXT) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data) __asm__("__glewColorSubTableEXT");
extern void ( * glCopyColorSubTableEXT) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) __asm__("__glewCopyColorSubTableEXT");
extern void ( * glLockArraysEXT) (GLint first, GLsizei count) __asm__("__glewLockArraysEXT");
extern void ( * glUnlockArraysEXT) (void) __asm__("__glewUnlockArraysEXT");
extern void ( * glConvolutionFilter1DEXT) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image) __asm__("__glewConvolutionFilter1DEXT");
extern void ( * glConvolutionFilter2DEXT) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image) __asm__("__glewConvolutionFilter2DEXT");
extern void ( * glConvolutionParameterfEXT) (GLenum target, GLenum pname, GLfloat param) __asm__("__glewConvolutionParameterfEXT");
extern void ( * glConvolutionParameterfvEXT) (GLenum target, GLenum pname, const GLfloat* params) __asm__("__glewConvolutionParameterfvEXT");
extern void ( * glConvolutionParameteriEXT) (GLenum target, GLenum pname, GLint param) __asm__("__glewConvolutionParameteriEXT");
extern void ( * glConvolutionParameterivEXT) (GLenum target, GLenum pname, const GLint* params) __asm__("__glewConvolutionParameterivEXT");
extern void ( * glCopyConvolutionFilter1DEXT) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) __asm__("__glewCopyConvolutionFilter1DEXT");
extern void ( * glCopyConvolutionFilter2DEXT) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) __asm__("__glewCopyConvolutionFilter2DEXT");
extern void ( * glGetConvolutionFilterEXT) (GLenum target, GLenum format, GLenum type, void *image) __asm__("__glewGetConvolutionFilterEXT");
extern void ( * glGetConvolutionParameterfvEXT) (GLenum target, GLenum pname, GLfloat* params) __asm__("__glewGetConvolutionParameterfvEXT");
extern void ( * glGetConvolutionParameterivEXT) (GLenum target, GLenum pname, GLint* params) __asm__("__glewGetConvolutionParameterivEXT");
extern void ( * glGetSeparableFilterEXT) (GLenum target, GLenum format, GLenum type, void *row, void *column, void *span) __asm__("__glewGetSeparableFilterEXT");
extern void ( * glSeparableFilter2DEXT) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column) __asm__("__glewSeparableFilter2DEXT");
extern void ( * glBinormalPointerEXT) (GLenum type, GLsizei stride, void *pointer) __asm__("__glewBinormalPointerEXT");
extern void ( * glTangentPointerEXT) (GLenum type, GLsizei stride, void *pointer) __asm__("__glewTangentPointerEXT");
extern void ( * glCopyTexImage1DEXT) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) __asm__("__glewCopyTexImage1DEXT");
extern void ( * glCopyTexImage2DEXT) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) __asm__("__glewCopyTexImage2DEXT");
extern void ( * glCopyTexSubImage1DEXT) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) __asm__("__glewCopyTexSubImage1DEXT");
extern void ( * glCopyTexSubImage2DEXT) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) __asm__("__glewCopyTexSubImage2DEXT");
extern void ( * glCopyTexSubImage3DEXT) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) __asm__("__glewCopyTexSubImage3DEXT");
extern void ( * glCullParameterdvEXT) (GLenum pname, GLdouble* params) __asm__("__glewCullParameterdvEXT");
extern void ( * glCullParameterfvEXT) (GLenum pname, GLfloat* params) __asm__("__glewCullParameterfvEXT");
extern void ( * glGetObjectLabelEXT) (GLenum type, GLuint object, GLsizei bufSize, GLsizei* length, GLchar *label) __asm__("__glewGetObjectLabelEXT");
extern void ( * glLabelObjectEXT) (GLenum type, GLuint object, GLsizei length, const GLchar* label) __asm__("__glewLabelObjectEXT");
extern void ( * glInsertEventMarkerEXT) (GLsizei length, const GLchar* marker) __asm__("__glewInsertEventMarkerEXT");
extern void ( * glPopGroupMarkerEXT) (void) __asm__("__glewPopGroupMarkerEXT");
extern void ( * glPushGroupMarkerEXT) (GLsizei length, const GLchar* marker) __asm__("__glewPushGroupMarkerEXT");
extern void ( * glDepthBoundsEXT) (GLclampd zmin, GLclampd zmax) __asm__("__glewDepthBoundsEXT");
extern void ( * glBindMultiTextureEXT) (GLenum texunit, GLenum target, GLuint texture) __asm__("__glewBindMultiTextureEXT");
extern GLenum ( * glCheckNamedFramebufferStatusEXT) (GLuint framebuffer, GLenum target) __asm__("__glewCheckNamedFramebufferStatusEXT");
extern void ( * glClientAttribDefaultEXT) (GLbitfield mask) __asm__("__glewClientAttribDefaultEXT");
extern void ( * glCompressedMultiTexImage1DEXT) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data) __asm__("__glewCompressedMultiTexImage1DEXT");
extern void ( * glCompressedMultiTexImage2DEXT) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data) __asm__("__glewCompressedMultiTexImage2DEXT");
extern void ( * glCompressedMultiTexImage3DEXT) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data) __asm__("__glewCompressedMultiTexImage3DEXT");
extern void ( * glCompressedMultiTexSubImage1DEXT) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data) __asm__("__glewCompressedMultiTexSubImage1DEXT");
extern void ( * glCompressedMultiTexSubImage2DEXT) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) __asm__("__glewCompressedMultiTexSubImage2DEXT");
extern void ( * glCompressedMultiTexSubImage3DEXT) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) __asm__("__glewCompressedMultiTexSubImage3DEXT");
extern void ( * glCompressedTextureImage1DEXT) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data) __asm__("__glewCompressedTextureImage1DEXT");
extern void ( * glCompressedTextureImage2DEXT) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data) __asm__("__glewCompressedTextureImage2DEXT");
extern void ( * glCompressedTextureImage3DEXT) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data) __asm__("__glewCompressedTextureImage3DEXT");
extern void ( * glCompressedTextureSubImage1DEXT) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data) __asm__("__glewCompressedTextureSubImage1DEXT");
extern void ( * glCompressedTextureSubImage2DEXT) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) __asm__("__glewCompressedTextureSubImage2DEXT");
extern void ( * glCompressedTextureSubImage3DEXT) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) __asm__("__glewCompressedTextureSubImage3DEXT");
extern void ( * glCopyMultiTexImage1DEXT) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) __asm__("__glewCopyMultiTexImage1DEXT");
extern void ( * glCopyMultiTexImage2DEXT) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) __asm__("__glewCopyMultiTexImage2DEXT");
extern void ( * glCopyMultiTexSubImage1DEXT) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) __asm__("__glewCopyMultiTexSubImage1DEXT");
extern void ( * glCopyMultiTexSubImage2DEXT) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) __asm__("__glewCopyMultiTexSubImage2DEXT");
extern void ( * glCopyMultiTexSubImage3DEXT) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) __asm__("__glewCopyMultiTexSubImage3DEXT");
extern void ( * glCopyTextureImage1DEXT) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) __asm__("__glewCopyTextureImage1DEXT");
extern void ( * glCopyTextureImage2DEXT) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) __asm__("__glewCopyTextureImage2DEXT");
extern void ( * glCopyTextureSubImage1DEXT) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) __asm__("__glewCopyTextureSubImage1DEXT");
extern void ( * glCopyTextureSubImage2DEXT) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) __asm__("__glewCopyTextureSubImage2DEXT");
extern void ( * glCopyTextureSubImage3DEXT) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) __asm__("__glewCopyTextureSubImage3DEXT");
extern void ( * glDisableClientStateIndexedEXT) (GLenum array, GLuint index) __asm__("__glewDisableClientStateIndexedEXT");
extern void ( * glDisableClientStateiEXT) (GLenum array, GLuint index) __asm__("__glewDisableClientStateiEXT");
extern void ( * glDisableVertexArrayAttribEXT) (GLuint vaobj, GLuint index) __asm__("__glewDisableVertexArrayAttribEXT");
extern void ( * glDisableVertexArrayEXT) (GLuint vaobj, GLenum array) __asm__("__glewDisableVertexArrayEXT");
extern void ( * glEnableClientStateIndexedEXT) (GLenum array, GLuint index) __asm__("__glewEnableClientStateIndexedEXT");
extern void ( * glEnableClientStateiEXT) (GLenum array, GLuint index) __asm__("__glewEnableClientStateiEXT");
extern void ( * glEnableVertexArrayAttribEXT) (GLuint vaobj, GLuint index) __asm__("__glewEnableVertexArrayAttribEXT");
extern void ( * glEnableVertexArrayEXT) (GLuint vaobj, GLenum array) __asm__("__glewEnableVertexArrayEXT");
extern void ( * glFlushMappedNamedBufferRangeEXT) (GLuint buffer, GLintptr offset, GLsizeiptr length) __asm__("__glewFlushMappedNamedBufferRangeEXT");
extern void ( * glFramebufferDrawBufferEXT) (GLuint framebuffer, GLenum mode) __asm__("__glewFramebufferDrawBufferEXT");
extern void ( * glFramebufferDrawBuffersEXT) (GLuint framebuffer, GLsizei n, const GLenum* bufs) __asm__("__glewFramebufferDrawBuffersEXT");
extern void ( * glFramebufferReadBufferEXT) (GLuint framebuffer, GLenum mode) __asm__("__glewFramebufferReadBufferEXT");
extern void ( * glGenerateMultiTexMipmapEXT) (GLenum texunit, GLenum target) __asm__("__glewGenerateMultiTexMipmapEXT");
extern void ( * glGenerateTextureMipmapEXT) (GLuint texture, GLenum target) __asm__("__glewGenerateTextureMipmapEXT");
extern void ( * glGetCompressedMultiTexImageEXT) (GLenum texunit, GLenum target, GLint level, void *img) __asm__("__glewGetCompressedMultiTexImageEXT");
extern void ( * glGetCompressedTextureImageEXT) (GLuint texture, GLenum target, GLint level, void *img) __asm__("__glewGetCompressedTextureImageEXT");
extern void ( * glGetDoubleIndexedvEXT) (GLenum target, GLuint index, GLdouble* params) __asm__("__glewGetDoubleIndexedvEXT");
extern void ( * glGetDoublei_vEXT) (GLenum pname, GLuint index, GLdouble* params) __asm__("__glewGetDoublei_vEXT");
extern void ( * glGetFloatIndexedvEXT) (GLenum target, GLuint index, GLfloat* params) __asm__("__glewGetFloatIndexedvEXT");
extern void ( * glGetFloati_vEXT) (GLenum pname, GLuint index, GLfloat* params) __asm__("__glewGetFloati_vEXT");
extern void ( * glGetFramebufferParameterivEXT) (GLuint framebuffer, GLenum pname, GLint* param) __asm__("__glewGetFramebufferParameterivEXT");
extern void ( * glGetMultiTexEnvfvEXT) (GLenum texunit, GLenum target, GLenum pname, GLfloat* params) __asm__("__glewGetMultiTexEnvfvEXT");
extern void ( * glGetMultiTexEnvivEXT) (GLenum texunit, GLenum target, GLenum pname, GLint* params) __asm__("__glewGetMultiTexEnvivEXT");
extern void ( * glGetMultiTexGendvEXT) (GLenum texunit, GLenum coord, GLenum pname, GLdouble* params) __asm__("__glewGetMultiTexGendvEXT");
extern void ( * glGetMultiTexGenfvEXT) (GLenum texunit, GLenum coord, GLenum pname, GLfloat* params) __asm__("__glewGetMultiTexGenfvEXT");
extern void ( * glGetMultiTexGenivEXT) (GLenum texunit, GLenum coord, GLenum pname, GLint* params) __asm__("__glewGetMultiTexGenivEXT");
extern void ( * glGetMultiTexImageEXT) (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels) __asm__("__glewGetMultiTexImageEXT");
extern void ( * glGetMultiTexLevelParameterfvEXT) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat* params) __asm__("__glewGetMultiTexLevelParameterfvEXT");
extern void ( * glGetMultiTexLevelParameterivEXT) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint* params) __asm__("__glewGetMultiTexLevelParameterivEXT");
extern void ( * glGetMultiTexParameterIivEXT) (GLenum texunit, GLenum target, GLenum pname, GLint* params) __asm__("__glewGetMultiTexParameterIivEXT");
extern void ( * glGetMultiTexParameterIuivEXT) (GLenum texunit, GLenum target, GLenum pname, GLuint* params) __asm__("__glewGetMultiTexParameterIuivEXT");
extern void ( * glGetMultiTexParameterfvEXT) (GLenum texunit, GLenum target, GLenum pname, GLfloat* params) __asm__("__glewGetMultiTexParameterfvEXT");
extern void ( * glGetMultiTexParameterivEXT) (GLenum texunit, GLenum target, GLenum pname, GLint* params) __asm__("__glewGetMultiTexParameterivEXT");
extern void ( * glGetNamedBufferParameterivEXT) (GLuint buffer, GLenum pname, GLint* params) __asm__("__glewGetNamedBufferParameterivEXT");
extern void ( * glGetNamedBufferPointervEXT) (GLuint buffer, GLenum pname, void** params) __asm__("__glewGetNamedBufferPointervEXT");
extern void ( * glGetNamedBufferSubDataEXT) (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data) __asm__("__glewGetNamedBufferSubDataEXT");
extern void ( * glGetNamedFramebufferAttachmentParameterivEXT) (GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params) __asm__("__glewGetNamedFramebufferAttachmentParameterivEXT");
extern void ( * glGetNamedProgramLocalParameterIivEXT) (GLuint program, GLenum target, GLuint index, GLint* params) __asm__("__glewGetNamedProgramLocalParameterIivEXT");
extern void ( * glGetNamedProgramLocalParameterIuivEXT) (GLuint program, GLenum target, GLuint index, GLuint* params) __asm__("__glewGetNamedProgramLocalParameterIuivEXT");
extern void ( * glGetNamedProgramLocalParameterdvEXT) (GLuint program, GLenum target, GLuint index, GLdouble* params) __asm__("__glewGetNamedProgramLocalParameterdvEXT");
extern void ( * glGetNamedProgramLocalParameterfvEXT) (GLuint program, GLenum target, GLuint index, GLfloat* params) __asm__("__glewGetNamedProgramLocalParameterfvEXT");
extern void ( * glGetNamedProgramStringEXT) (GLuint program, GLenum target, GLenum pname, void *string) __asm__("__glewGetNamedProgramStringEXT");
extern void ( * glGetNamedProgramivEXT) (GLuint program, GLenum target, GLenum pname, GLint* params) __asm__("__glewGetNamedProgramivEXT");
extern void ( * glGetNamedRenderbufferParameterivEXT) (GLuint renderbuffer, GLenum pname, GLint* params) __asm__("__glewGetNamedRenderbufferParameterivEXT");
extern void ( * glGetPointerIndexedvEXT) (GLenum target, GLuint index, void** params) __asm__("__glewGetPointerIndexedvEXT");
extern void ( * glGetPointeri_vEXT) (GLenum pname, GLuint index, void** params) __asm__("__glewGetPointeri_vEXT");
extern void ( * glGetTextureImageEXT) (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels) __asm__("__glewGetTextureImageEXT");
extern void ( * glGetTextureLevelParameterfvEXT) (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat* params) __asm__("__glewGetTextureLevelParameterfvEXT");
extern void ( * glGetTextureLevelParameterivEXT) (GLuint texture, GLenum target, GLint level, GLenum pname, GLint* params) __asm__("__glewGetTextureLevelParameterivEXT");
extern void ( * glGetTextureParameterIivEXT) (GLuint texture, GLenum target, GLenum pname, GLint* params) __asm__("__glewGetTextureParameterIivEXT");
extern void ( * glGetTextureParameterIuivEXT) (GLuint texture, GLenum target, GLenum pname, GLuint* params) __asm__("__glewGetTextureParameterIuivEXT");
extern void ( * glGetTextureParameterfvEXT) (GLuint texture, GLenum target, GLenum pname, GLfloat* params) __asm__("__glewGetTextureParameterfvEXT");
extern void ( * glGetTextureParameterivEXT) (GLuint texture, GLenum target, GLenum pname, GLint* params) __asm__("__glewGetTextureParameterivEXT");
extern void ( * glGetVertexArrayIntegeri_vEXT) (GLuint vaobj, GLuint index, GLenum pname, GLint* param) __asm__("__glewGetVertexArrayIntegeri_vEXT");
extern void ( * glGetVertexArrayIntegervEXT) (GLuint vaobj, GLenum pname, GLint* param) __asm__("__glewGetVertexArrayIntegervEXT");
extern void ( * glGetVertexArrayPointeri_vEXT) (GLuint vaobj, GLuint index, GLenum pname, void** param) __asm__("__glewGetVertexArrayPointeri_vEXT");
extern void ( * glGetVertexArrayPointervEXT) (GLuint vaobj, GLenum pname, void** param) __asm__("__glewGetVertexArrayPointervEXT");
extern void * ( * glMapNamedBufferEXT) (GLuint buffer, GLenum access) __asm__("__glewMapNamedBufferEXT");
extern void * ( * glMapNamedBufferRangeEXT) (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) __asm__("__glewMapNamedBufferRangeEXT");
extern void ( * glMatrixFrustumEXT) (GLenum matrixMode, GLdouble l, GLdouble r, GLdouble b, GLdouble t, GLdouble n, GLdouble f) __asm__("__glewMatrixFrustumEXT");
extern void ( * glMatrixLoadIdentityEXT) (GLenum matrixMode) __asm__("__glewMatrixLoadIdentityEXT");
extern void ( * glMatrixLoadTransposedEXT) (GLenum matrixMode, const GLdouble* m) __asm__("__glewMatrixLoadTransposedEXT");
extern void ( * glMatrixLoadTransposefEXT) (GLenum matrixMode, const GLfloat* m) __asm__("__glewMatrixLoadTransposefEXT");
extern void ( * glMatrixLoaddEXT) (GLenum matrixMode, const GLdouble* m) __asm__("__glewMatrixLoaddEXT");
extern void ( * glMatrixLoadfEXT) (GLenum matrixMode, const GLfloat* m) __asm__("__glewMatrixLoadfEXT");
extern void ( * glMatrixMultTransposedEXT) (GLenum matrixMode, const GLdouble* m) __asm__("__glewMatrixMultTransposedEXT");
extern void ( * glMatrixMultTransposefEXT) (GLenum matrixMode, const GLfloat* m) __asm__("__glewMatrixMultTransposefEXT");
extern void ( * glMatrixMultdEXT) (GLenum matrixMode, const GLdouble* m) __asm__("__glewMatrixMultdEXT");
extern void ( * glMatrixMultfEXT) (GLenum matrixMode, const GLfloat* m) __asm__("__glewMatrixMultfEXT");
extern void ( * glMatrixOrthoEXT) (GLenum matrixMode, GLdouble l, GLdouble r, GLdouble b, GLdouble t, GLdouble n, GLdouble f) __asm__("__glewMatrixOrthoEXT");
extern void ( * glMatrixPopEXT) (GLenum matrixMode) __asm__("__glewMatrixPopEXT");
extern void ( * glMatrixPushEXT) (GLenum matrixMode) __asm__("__glewMatrixPushEXT");
extern void ( * glMatrixRotatedEXT) (GLenum matrixMode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z) __asm__("__glewMatrixRotatedEXT");
extern void ( * glMatrixRotatefEXT) (GLenum matrixMode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z) __asm__("__glewMatrixRotatefEXT");
extern void ( * glMatrixScaledEXT) (GLenum matrixMode, GLdouble x, GLdouble y, GLdouble z) __asm__("__glewMatrixScaledEXT");
extern void ( * glMatrixScalefEXT) (GLenum matrixMode, GLfloat x, GLfloat y, GLfloat z) __asm__("__glewMatrixScalefEXT");
extern void ( * glMatrixTranslatedEXT) (GLenum matrixMode, GLdouble x, GLdouble y, GLdouble z) __asm__("__glewMatrixTranslatedEXT");
extern void ( * glMatrixTranslatefEXT) (GLenum matrixMode, GLfloat x, GLfloat y, GLfloat z) __asm__("__glewMatrixTranslatefEXT");
extern void ( * glMultiTexBufferEXT) (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer) __asm__("__glewMultiTexBufferEXT");
extern void ( * glMultiTexCoordPointerEXT) (GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer) __asm__("__glewMultiTexCoordPointerEXT");
extern void ( * glMultiTexEnvfEXT) (GLenum texunit, GLenum target, GLenum pname, GLfloat param) __asm__("__glewMultiTexEnvfEXT");
extern void ( * glMultiTexEnvfvEXT) (GLenum texunit, GLenum target, GLenum pname, const GLfloat* params) __asm__("__glewMultiTexEnvfvEXT");
extern void ( * glMultiTexEnviEXT) (GLenum texunit, GLenum target, GLenum pname, GLint param) __asm__("__glewMultiTexEnviEXT");
extern void ( * glMultiTexEnvivEXT) (GLenum texunit, GLenum target, GLenum pname, const GLint* params) __asm__("__glewMultiTexEnvivEXT");
extern void ( * glMultiTexGendEXT) (GLenum texunit, GLenum coord, GLenum pname, GLdouble param) __asm__("__glewMultiTexGendEXT");
extern void ( * glMultiTexGendvEXT) (GLenum texunit, GLenum coord, GLenum pname, const GLdouble* params) __asm__("__glewMultiTexGendvEXT");
extern void ( * glMultiTexGenfEXT) (GLenum texunit, GLenum coord, GLenum pname, GLfloat param) __asm__("__glewMultiTexGenfEXT");
extern void ( * glMultiTexGenfvEXT) (GLenum texunit, GLenum coord, GLenum pname, const GLfloat* params) __asm__("__glewMultiTexGenfvEXT");
extern void ( * glMultiTexGeniEXT) (GLenum texunit, GLenum coord, GLenum pname, GLint param) __asm__("__glewMultiTexGeniEXT");
extern void ( * glMultiTexGenivEXT) (GLenum texunit, GLenum coord, GLenum pname, const GLint* params) __asm__("__glewMultiTexGenivEXT");
extern void ( * glMultiTexImage1DEXT) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels) __asm__("__glewMultiTexImage1DEXT");
extern void ( * glMultiTexImage2DEXT) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels) __asm__("__glewMultiTexImage2DEXT");
extern void ( * glMultiTexImage3DEXT) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) __asm__("__glewMultiTexImage3DEXT");
extern void ( * glMultiTexParameterIivEXT) (GLenum texunit, GLenum target, GLenum pname, const GLint* params) __asm__("__glewMultiTexParameterIivEXT");
extern void ( * glMultiTexParameterIuivEXT) (GLenum texunit, GLenum target, GLenum pname, const GLuint* params) __asm__("__glewMultiTexParameterIuivEXT");
extern void ( * glMultiTexParameterfEXT) (GLenum texunit, GLenum target, GLenum pname, GLfloat param) __asm__("__glewMultiTexParameterfEXT");
extern void ( * glMultiTexParameterfvEXT) (GLenum texunit, GLenum target, GLenum pname, const GLfloat* param) __asm__("__glewMultiTexParameterfvEXT");
extern void ( * glMultiTexParameteriEXT) (GLenum texunit, GLenum target, GLenum pname, GLint param) __asm__("__glewMultiTexParameteriEXT");
extern void ( * glMultiTexParameterivEXT) (GLenum texunit, GLenum target, GLenum pname, const GLint* param) __asm__("__glewMultiTexParameterivEXT");
extern void ( * glMultiTexRenderbufferEXT) (GLenum texunit, GLenum target, GLuint renderbuffer) __asm__("__glewMultiTexRenderbufferEXT");
extern void ( * glMultiTexSubImage1DEXT) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) __asm__("__glewMultiTexSubImage1DEXT");
extern void ( * glMultiTexSubImage2DEXT) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) __asm__("__glewMultiTexSubImage2DEXT");
extern void ( * glMultiTexSubImage3DEXT) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) __asm__("__glewMultiTexSubImage3DEXT");
extern void ( * glNamedBufferDataEXT) (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage) __asm__("__glewNamedBufferDataEXT");
extern void ( * glNamedBufferSubDataEXT) (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data) __asm__("__glewNamedBufferSubDataEXT");
extern void ( * glNamedCopyBufferSubDataEXT) (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) __asm__("__glewNamedCopyBufferSubDataEXT");
extern void ( * glNamedFramebufferRenderbufferEXT) (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) __asm__("__glewNamedFramebufferRenderbufferEXT");
extern void ( * glNamedFramebufferTexture1DEXT) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) __asm__("__glewNamedFramebufferTexture1DEXT");
extern void ( * glNamedFramebufferTexture2DEXT) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) __asm__("__glewNamedFramebufferTexture2DEXT");
extern void ( * glNamedFramebufferTexture3DEXT) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) __asm__("__glewNamedFramebufferTexture3DEXT");
extern void ( * glNamedFramebufferTextureEXT) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) __asm__("__glewNamedFramebufferTextureEXT");
extern void ( * glNamedFramebufferTextureFaceEXT) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face) __asm__("__glewNamedFramebufferTextureFaceEXT");
extern void ( * glNamedFramebufferTextureLayerEXT) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) __asm__("__glewNamedFramebufferTextureLayerEXT");
extern void ( * glNamedProgramLocalParameter4dEXT) (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) __asm__("__glewNamedProgramLocalParameter4dEXT");
extern void ( * glNamedProgramLocalParameter4dvEXT) (GLuint program, GLenum target, GLuint index, const GLdouble* params) __asm__("__glewNamedProgramLocalParameter4dvEXT");
extern void ( * glNamedProgramLocalParameter4fEXT) (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) __asm__("__glewNamedProgramLocalParameter4fEXT");
extern void ( * glNamedProgramLocalParameter4fvEXT) (GLuint program, GLenum target, GLuint index, const GLfloat* params) __asm__("__glewNamedProgramLocalParameter4fvEXT");
extern void ( * glNamedProgramLocalParameterI4iEXT) (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) __asm__("__glewNamedProgramLocalParameterI4iEXT");
extern void ( * glNamedProgramLocalParameterI4ivEXT) (GLuint program, GLenum target, GLuint index, const GLint* params) __asm__("__glewNamedProgramLocalParameterI4ivEXT");
extern void ( * glNamedProgramLocalParameterI4uiEXT) (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) __asm__("__glewNamedProgramLocalParameterI4uiEXT");
extern void ( * glNamedProgramLocalParameterI4uivEXT) (GLuint program, GLenum target, GLuint index, const GLuint* params) __asm__("__glewNamedProgramLocalParameterI4uivEXT");
extern void ( * glNamedProgramLocalParameters4fvEXT) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat* params) __asm__("__glewNamedProgramLocalParameters4fvEXT");
extern void ( * glNamedProgramLocalParametersI4ivEXT) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint* params) __asm__("__glewNamedProgramLocalParametersI4ivEXT");
extern void ( * glNamedProgramLocalParametersI4uivEXT) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint* params) __asm__("__glewNamedProgramLocalParametersI4uivEXT");
extern void ( * glNamedProgramStringEXT) (GLuint program, GLenum target, GLenum format, GLsizei len, const void *string) __asm__("__glewNamedProgramStringEXT");
extern void ( * glNamedRenderbufferStorageEXT) (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) __asm__("__glewNamedRenderbufferStorageEXT");
extern void ( * glNamedRenderbufferStorageMultisampleCoverageEXT) (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) __asm__("__glewNamedRenderbufferStorageMultisampleCoverageEXT");
extern void ( * glNamedRenderbufferStorageMultisampleEXT) (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) __asm__("__glewNamedRenderbufferStorageMultisampleEXT");
extern void ( * glProgramUniform1fEXT) (GLuint program, GLint location, GLfloat v0) __asm__("__glewProgramUniform1fEXT");
extern void ( * glProgramUniform1fvEXT) (GLuint program, GLint location, GLsizei count, const GLfloat* value) __asm__("__glewProgramUniform1fvEXT");
extern void ( * glProgramUniform1iEXT) (GLuint program, GLint location, GLint v0) __asm__("__glewProgramUniform1iEXT");
extern void ( * glProgramUniform1ivEXT) (GLuint program, GLint location, GLsizei count, const GLint* value) __asm__("__glewProgramUniform1ivEXT");
extern void ( * glProgramUniform1uiEXT) (GLuint program, GLint location, GLuint v0) __asm__("__glewProgramUniform1uiEXT");
extern void ( * glProgramUniform1uivEXT) (GLuint program, GLint location, GLsizei count, const GLuint* value) __asm__("__glewProgramUniform1uivEXT");
extern void ( * glProgramUniform2fEXT) (GLuint program, GLint location, GLfloat v0, GLfloat v1) __asm__("__glewProgramUniform2fEXT");
extern void ( * glProgramUniform2fvEXT) (GLuint program, GLint location, GLsizei count, const GLfloat* value) __asm__("__glewProgramUniform2fvEXT");
extern void ( * glProgramUniform2iEXT) (GLuint program, GLint location, GLint v0, GLint v1) __asm__("__glewProgramUniform2iEXT");
extern void ( * glProgramUniform2ivEXT) (GLuint program, GLint location, GLsizei count, const GLint* value) __asm__("__glewProgramUniform2ivEXT");
extern void ( * glProgramUniform2uiEXT) (GLuint program, GLint location, GLuint v0, GLuint v1) __asm__("__glewProgramUniform2uiEXT");
extern void ( * glProgramUniform2uivEXT) (GLuint program, GLint location, GLsizei count, const GLuint* value) __asm__("__glewProgramUniform2uivEXT");
extern void ( * glProgramUniform3fEXT) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) __asm__("__glewProgramUniform3fEXT");
extern void ( * glProgramUniform3fvEXT) (GLuint program, GLint location, GLsizei count, const GLfloat* value) __asm__("__glewProgramUniform3fvEXT");
extern void ( * glProgramUniform3iEXT) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2) __asm__("__glewProgramUniform3iEXT");
extern void ( * glProgramUniform3ivEXT) (GLuint program, GLint location, GLsizei count, const GLint* value) __asm__("__glewProgramUniform3ivEXT");
extern void ( * glProgramUniform3uiEXT) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) __asm__("__glewProgramUniform3uiEXT");
extern void ( * glProgramUniform3uivEXT) (GLuint program, GLint location, GLsizei count, const GLuint* value) __asm__("__glewProgramUniform3uivEXT");
extern void ( * glProgramUniform4fEXT) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) __asm__("__glewProgramUniform4fEXT");
extern void ( * glProgramUniform4fvEXT) (GLuint program, GLint location, GLsizei count, const GLfloat* value) __asm__("__glewProgramUniform4fvEXT");
extern void ( * glProgramUniform4iEXT) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) __asm__("__glewProgramUniform4iEXT");
extern void ( * glProgramUniform4ivEXT) (GLuint program, GLint location, GLsizei count, const GLint* value) __asm__("__glewProgramUniform4ivEXT");
extern void ( * glProgramUniform4uiEXT) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) __asm__("__glewProgramUniform4uiEXT");
extern void ( * glProgramUniform4uivEXT) (GLuint program, GLint location, GLsizei count, const GLuint* value) __asm__("__glewProgramUniform4uivEXT");
extern void ( * glProgramUniformMatrix2fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) __asm__("__glewProgramUniformMatrix2fvEXT");
extern void ( * glProgramUniformMatrix2x3fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) __asm__("__glewProgramUniformMatrix2x3fvEXT");
extern void ( * glProgramUniformMatrix2x4fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) __asm__("__glewProgramUniformMatrix2x4fvEXT");
extern void ( * glProgramUniformMatrix3fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) __asm__("__glewProgramUniformMatrix3fvEXT");
extern void ( * glProgramUniformMatrix3x2fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) __asm__("__glewProgramUniformMatrix3x2fvEXT");
extern void ( * glProgramUniformMatrix3x4fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) __asm__("__glewProgramUniformMatrix3x4fvEXT");
extern void ( * glProgramUniformMatrix4fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) __asm__("__glewProgramUniformMatrix4fvEXT");
extern void ( * glProgramUniformMatrix4x2fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) __asm__("__glewProgramUniformMatrix4x2fvEXT");
extern void ( * glProgramUniformMatrix4x3fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) __asm__("__glewProgramUniformMatrix4x3fvEXT");
extern void ( * glPushClientAttribDefaultEXT) (GLbitfield mask) __asm__("__glewPushClientAttribDefaultEXT");
extern void ( * glTextureBufferEXT) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer) __asm__("__glewTextureBufferEXT");
extern void ( * glTextureImage1DEXT) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels) __asm__("__glewTextureImage1DEXT");
extern void ( * glTextureImage2DEXT) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels) __asm__("__glewTextureImage2DEXT");
extern void ( * glTextureImage3DEXT) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) __asm__("__glewTextureImage3DEXT");
extern void ( * glTextureParameterIivEXT) (GLuint texture, GLenum target, GLenum pname, const GLint* params) __asm__("__glewTextureParameterIivEXT");
extern void ( * glTextureParameterIuivEXT) (GLuint texture, GLenum target, GLenum pname, const GLuint* params) __asm__("__glewTextureParameterIuivEXT");
extern void ( * glTextureParameterfEXT) (GLuint texture, GLenum target, GLenum pname, GLfloat param) __asm__("__glewTextureParameterfEXT");
extern void ( * glTextureParameterfvEXT) (GLuint texture, GLenum target, GLenum pname, const GLfloat* param) __asm__("__glewTextureParameterfvEXT");
extern void ( * glTextureParameteriEXT) (GLuint texture, GLenum target, GLenum pname, GLint param) __asm__("__glewTextureParameteriEXT");
extern void ( * glTextureParameterivEXT) (GLuint texture, GLenum target, GLenum pname, const GLint* param) __asm__("__glewTextureParameterivEXT");
extern void ( * glTextureRenderbufferEXT) (GLuint texture, GLenum target, GLuint renderbuffer) __asm__("__glewTextureRenderbufferEXT");
extern void ( * glTextureSubImage1DEXT) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) __asm__("__glewTextureSubImage1DEXT");
extern void ( * glTextureSubImage2DEXT) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) __asm__("__glewTextureSubImage2DEXT");
extern void ( * glTextureSubImage3DEXT) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) __asm__("__glewTextureSubImage3DEXT");
extern GLboolean ( * glUnmapNamedBufferEXT) (GLuint buffer) __asm__("__glewUnmapNamedBufferEXT");
extern void ( * glVertexArrayColorOffsetEXT) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) __asm__("__glewVertexArrayColorOffsetEXT");
extern void ( * glVertexArrayEdgeFlagOffsetEXT) (GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset) __asm__("__glewVertexArrayEdgeFlagOffsetEXT");
extern void ( * glVertexArrayFogCoordOffsetEXT) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) __asm__("__glewVertexArrayFogCoordOffsetEXT");
extern void ( * glVertexArrayIndexOffsetEXT) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) __asm__("__glewVertexArrayIndexOffsetEXT");
extern void ( * glVertexArrayMultiTexCoordOffsetEXT) (GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset) __asm__("__glewVertexArrayMultiTexCoordOffsetEXT");
extern void ( * glVertexArrayNormalOffsetEXT) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) __asm__("__glewVertexArrayNormalOffsetEXT");
extern void ( * glVertexArraySecondaryColorOffsetEXT) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) __asm__("__glewVertexArraySecondaryColorOffsetEXT");
extern void ( * glVertexArrayTexCoordOffsetEXT) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) __asm__("__glewVertexArrayTexCoordOffsetEXT");
extern void ( * glVertexArrayVertexAttribDivisorEXT) (GLuint vaobj, GLuint index, GLuint divisor) __asm__("__glewVertexArrayVertexAttribDivisorEXT");
extern void ( * glVertexArrayVertexAttribIOffsetEXT) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) __asm__("__glewVertexArrayVertexAttribIOffsetEXT");
extern void ( * glVertexArrayVertexAttribOffsetEXT) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset) __asm__("__glewVertexArrayVertexAttribOffsetEXT");
extern void ( * glVertexArrayVertexOffsetEXT) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) __asm__("__glewVertexArrayVertexOffsetEXT");
extern void ( * glColorMaskIndexedEXT) (GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a) __asm__("__glewColorMaskIndexedEXT");
extern void ( * glDisableIndexedEXT) (GLenum target, GLuint index) __asm__("__glewDisableIndexedEXT");
extern void ( * glEnableIndexedEXT) (GLenum target, GLuint index) __asm__("__glewEnableIndexedEXT");
extern void ( * glGetBooleanIndexedvEXT) (GLenum value, GLuint index, GLboolean* data) __asm__("__glewGetBooleanIndexedvEXT");
extern void ( * glGetIntegerIndexedvEXT) (GLenum value, GLuint index, GLint* data) __asm__("__glewGetIntegerIndexedvEXT");
extern GLboolean ( * glIsEnabledIndexedEXT) (GLenum target, GLuint index) __asm__("__glewIsEnabledIndexedEXT");
extern void ( * glDrawArraysInstancedEXT) (GLenum mode, GLint start, GLsizei count, GLsizei primcount) __asm__("__glewDrawArraysInstancedEXT");
extern void ( * glDrawElementsInstancedEXT) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount) __asm__("__glewDrawElementsInstancedEXT");
extern void ( * glDrawRangeElementsEXT) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices) __asm__("__glewDrawRangeElementsEXT");
extern void ( * glFogCoordPointerEXT) (GLenum type, GLsizei stride, const void *pointer) __asm__("__glewFogCoordPointerEXT");
extern void ( * glFogCoorddEXT) (GLdouble coord) __asm__("__glewFogCoorddEXT");
extern void ( * glFogCoorddvEXT) (const GLdouble *coord) __asm__("__glewFogCoorddvEXT");
extern void ( * glFogCoordfEXT) (GLfloat coord) __asm__("__glewFogCoordfEXT");
extern void ( * glFogCoordfvEXT) (const GLfloat *coord) __asm__("__glewFogCoordfvEXT");
extern void ( * glFragmentColorMaterialEXT) (GLenum face, GLenum mode) __asm__("__glewFragmentColorMaterialEXT");
extern void ( * glFragmentLightModelfEXT) (GLenum pname, GLfloat param) __asm__("__glewFragmentLightModelfEXT");
extern void ( * glFragmentLightModelfvEXT) (GLenum pname, GLfloat* params) __asm__("__glewFragmentLightModelfvEXT");
extern void ( * glFragmentLightModeliEXT) (GLenum pname, GLint param) __asm__("__glewFragmentLightModeliEXT");
extern void ( * glFragmentLightModelivEXT) (GLenum pname, GLint* params) __asm__("__glewFragmentLightModelivEXT");
extern void ( * glFragmentLightfEXT) (GLenum light, GLenum pname, GLfloat param) __asm__("__glewFragmentLightfEXT");
extern void ( * glFragmentLightfvEXT) (GLenum light, GLenum pname, GLfloat* params) __asm__("__glewFragmentLightfvEXT");
extern void ( * glFragmentLightiEXT) (GLenum light, GLenum pname, GLint param) __asm__("__glewFragmentLightiEXT");
extern void ( * glFragmentLightivEXT) (GLenum light, GLenum pname, GLint* params) __asm__("__glewFragmentLightivEXT");
extern void ( * glFragmentMaterialfEXT) (GLenum face, GLenum pname, const GLfloat param) __asm__("__glewFragmentMaterialfEXT");
extern void ( * glFragmentMaterialfvEXT) (GLenum face, GLenum pname, const GLfloat* params) __asm__("__glewFragmentMaterialfvEXT");
extern void ( * glFragmentMaterialiEXT) (GLenum face, GLenum pname, const GLint param) __asm__("__glewFragmentMaterialiEXT");
extern void ( * glFragmentMaterialivEXT) (GLenum face, GLenum pname, const GLint* params) __asm__("__glewFragmentMaterialivEXT");
extern void ( * glGetFragmentLightfvEXT) (GLenum light, GLenum pname, GLfloat* params) __asm__("__glewGetFragmentLightfvEXT");
extern void ( * glGetFragmentLightivEXT) (GLenum light, GLenum pname, GLint* params) __asm__("__glewGetFragmentLightivEXT");
extern void ( * glGetFragmentMaterialfvEXT) (GLenum face, GLenum pname, const GLfloat* params) __asm__("__glewGetFragmentMaterialfvEXT");
extern void ( * glGetFragmentMaterialivEXT) (GLenum face, GLenum pname, const GLint* params) __asm__("__glewGetFragmentMaterialivEXT");
extern void ( * glLightEnviEXT) (GLenum pname, GLint param) __asm__("__glewLightEnviEXT");
extern void ( * glBlitFramebufferEXT) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) __asm__("__glewBlitFramebufferEXT");
extern void ( * glRenderbufferStorageMultisampleEXT) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) __asm__("__glewRenderbufferStorageMultisampleEXT");
extern void ( * glBindFramebufferEXT) (GLenum target, GLuint framebuffer) __asm__("__glewBindFramebufferEXT");
extern void ( * glBindRenderbufferEXT) (GLenum target, GLuint renderbuffer) __asm__("__glewBindRenderbufferEXT");
extern GLenum ( * glCheckFramebufferStatusEXT) (GLenum target) __asm__("__glewCheckFramebufferStatusEXT");
extern void ( * glDeleteFramebuffersEXT) (GLsizei n, const GLuint* framebuffers) __asm__("__glewDeleteFramebuffersEXT");
extern void ( * glDeleteRenderbuffersEXT) (GLsizei n, const GLuint* renderbuffers) __asm__("__glewDeleteRenderbuffersEXT");
extern void ( * glFramebufferRenderbufferEXT) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) __asm__("__glewFramebufferRenderbufferEXT");
extern void ( * glFramebufferTexture1DEXT) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) __asm__("__glewFramebufferTexture1DEXT");
extern void ( * glFramebufferTexture2DEXT) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) __asm__("__glewFramebufferTexture2DEXT");
extern void ( * glFramebufferTexture3DEXT) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) __asm__("__glewFramebufferTexture3DEXT");
extern void ( * glGenFramebuffersEXT) (GLsizei n, GLuint* framebuffers) __asm__("__glewGenFramebuffersEXT");
extern void ( * glGenRenderbuffersEXT) (GLsizei n, GLuint* renderbuffers) __asm__("__glewGenRenderbuffersEXT");
extern void ( * glGenerateMipmapEXT) (GLenum target) __asm__("__glewGenerateMipmapEXT");
extern void ( * glGetFramebufferAttachmentParameterivEXT) (GLenum target, GLenum attachment, GLenum pname, GLint* params) __asm__("__glewGetFramebufferAttachmentParameterivEXT");
extern void ( * glGetRenderbufferParameterivEXT) (GLenum target, GLenum pname, GLint* params) __asm__("__glewGetRenderbufferParameterivEXT");
extern GLboolean ( * glIsFramebufferEXT) (GLuint framebuffer) __asm__("__glewIsFramebufferEXT");
extern GLboolean ( * glIsRenderbufferEXT) (GLuint renderbuffer) __asm__("__glewIsRenderbufferEXT");
extern void ( * glRenderbufferStorageEXT) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height) __asm__("__glewRenderbufferStorageEXT");
extern void ( * glFramebufferTextureEXT) (GLenum target, GLenum attachment, GLuint texture, GLint level) __asm__("__glewFramebufferTextureEXT");
extern void ( * glFramebufferTextureFaceEXT) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) __asm__("__glewFramebufferTextureFaceEXT");
extern void ( * glProgramParameteriEXT) (GLuint program, GLenum pname, GLint value) __asm__("__glewProgramParameteriEXT");
extern void ( * glProgramEnvParameters4fvEXT) (GLenum target, GLuint index, GLsizei count, const GLfloat* params) __asm__("__glewProgramEnvParameters4fvEXT");
extern void ( * glProgramLocalParameters4fvEXT) (GLenum target, GLuint index, GLsizei count, const GLfloat* params) __asm__("__glewProgramLocalParameters4fvEXT");
extern void ( * glBindFragDataLocationEXT) (GLuint program, GLuint color, const GLchar *name) __asm__("__glewBindFragDataLocationEXT");
extern GLint ( * glGetFragDataLocationEXT) (GLuint program, const GLchar *name) __asm__("__glewGetFragDataLocationEXT");
extern void ( * glGetUniformuivEXT) (GLuint program, GLint location, GLuint *params) __asm__("__glewGetUniformuivEXT");
extern void ( * glGetVertexAttribIivEXT) (GLuint index, GLenum pname, GLint *params) __asm__("__glewGetVertexAttribIivEXT");
extern void ( * glGetVertexAttribIuivEXT) (GLuint index, GLenum pname, GLuint *params) __asm__("__glewGetVertexAttribIuivEXT");
extern void ( * glUniform1uiEXT) (GLint location, GLuint v0) __asm__("__glewUniform1uiEXT");
extern void ( * glUniform1uivEXT) (GLint location, GLsizei count, const GLuint *value) __asm__("__glewUniform1uivEXT");
extern void ( * glUniform2uiEXT) (GLint location, GLuint v0, GLuint v1) __asm__("__glewUniform2uiEXT");
extern void ( * glUniform2uivEXT) (GLint location, GLsizei count, const GLuint *value) __asm__("__glewUniform2uivEXT");
extern void ( * glUniform3uiEXT) (GLint location, GLuint v0, GLuint v1, GLuint v2) __asm__("__glewUniform3uiEXT");
extern void ( * glUniform3uivEXT) (GLint location, GLsizei count, const GLuint *value) __asm__("__glewUniform3uivEXT");
extern void ( * glUniform4uiEXT) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) __asm__("__glewUniform4uiEXT");
extern void ( * glUniform4uivEXT) (GLint location, GLsizei count, const GLuint *value) __asm__("__glewUniform4uivEXT");
extern void ( * glVertexAttribI1iEXT) (GLuint index, GLint x) __asm__("__glewVertexAttribI1iEXT");
extern void ( * glVertexAttribI1ivEXT) (GLuint index, const GLint *v) __asm__("__glewVertexAttribI1ivEXT");
extern void ( * glVertexAttribI1uiEXT) (GLuint index, GLuint x) __asm__("__glewVertexAttribI1uiEXT");
extern void ( * glVertexAttribI1uivEXT) (GLuint index, const GLuint *v) __asm__("__glewVertexAttribI1uivEXT");
extern void ( * glVertexAttribI2iEXT) (GLuint index, GLint x, GLint y) __asm__("__glewVertexAttribI2iEXT");
extern void ( * glVertexAttribI2ivEXT) (GLuint index, const GLint *v) __asm__("__glewVertexAttribI2ivEXT");
extern void ( * glVertexAttribI2uiEXT) (GLuint index, GLuint x, GLuint y) __asm__("__glewVertexAttribI2uiEXT");
extern void ( * glVertexAttribI2uivEXT) (GLuint index, const GLuint *v) __asm__("__glewVertexAttribI2uivEXT");
extern void ( * glVertexAttribI3iEXT) (GLuint index, GLint x, GLint y, GLint z) __asm__("__glewVertexAttribI3iEXT");
extern void ( * glVertexAttribI3ivEXT) (GLuint index, const GLint *v) __asm__("__glewVertexAttribI3ivEXT");
extern void ( * glVertexAttribI3uiEXT) (GLuint index, GLuint x, GLuint y, GLuint z) __asm__("__glewVertexAttribI3uiEXT");
extern void ( * glVertexAttribI3uivEXT) (GLuint index, const GLuint *v) __asm__("__glewVertexAttribI3uivEXT");
extern void ( * glVertexAttribI4bvEXT) (GLuint index, const GLbyte *v) __asm__("__glewVertexAttribI4bvEXT");
extern void ( * glVertexAttribI4iEXT) (GLuint index, GLint x, GLint y, GLint z, GLint w) __asm__("__glewVertexAttribI4iEXT");
extern void ( * glVertexAttribI4ivEXT) (GLuint index, const GLint *v) __asm__("__glewVertexAttribI4ivEXT");
extern void ( * glVertexAttribI4svEXT) (GLuint index, const GLshort *v) __asm__("__glewVertexAttribI4svEXT");
extern void ( * glVertexAttribI4ubvEXT) (GLuint index, const GLubyte *v) __asm__("__glewVertexAttribI4ubvEXT");
extern void ( * glVertexAttribI4uiEXT) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) __asm__("__glewVertexAttribI4uiEXT");
extern void ( * glVertexAttribI4uivEXT) (GLuint index, const GLuint *v) __asm__("__glewVertexAttribI4uivEXT");
extern void ( * glVertexAttribI4usvEXT) (GLuint index, const GLushort *v) __asm__("__glewVertexAttribI4usvEXT");
extern void ( * glVertexAttribIPointerEXT) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) __asm__("__glewVertexAttribIPointerEXT");
extern void ( * glGetHistogramEXT) (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values) __asm__("__glewGetHistogramEXT");
extern void ( * glGetHistogramParameterfvEXT) (GLenum target, GLenum pname, GLfloat* params) __asm__("__glewGetHistogramParameterfvEXT");
extern void ( * glGetHistogramParameterivEXT) (GLenum target, GLenum pname, GLint* params) __asm__("__glewGetHistogramParameterivEXT");
extern void ( * glGetMinmaxEXT) (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values) __asm__("__glewGetMinmaxEXT");
extern void ( * glGetMinmaxParameterfvEXT) (GLenum target, GLenum pname, GLfloat* params) __asm__("__glewGetMinmaxParameterfvEXT");
extern void ( * glGetMinmaxParameterivEXT) (GLenum target, GLenum pname, GLint* params) __asm__("__glewGetMinmaxParameterivEXT");
extern void ( * glHistogramEXT) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) __asm__("__glewHistogramEXT");
extern void ( * glMinmaxEXT) (GLenum target, GLenum internalformat, GLboolean sink) __asm__("__glewMinmaxEXT");
extern void ( * glResetHistogramEXT) (GLenum target) __asm__("__glewResetHistogramEXT");
extern void ( * glResetMinmaxEXT) (GLenum target) __asm__("__glewResetMinmaxEXT");
extern void ( * glIndexFuncEXT) (GLenum func, GLfloat ref) __asm__("__glewIndexFuncEXT");
extern void ( * glIndexMaterialEXT) (GLenum face, GLenum mode) __asm__("__glewIndexMaterialEXT");
extern void ( * glApplyTextureEXT) (GLenum mode) __asm__("__glewApplyTextureEXT");
extern void ( * glTextureLightEXT) (GLenum pname) __asm__("__glewTextureLightEXT");
extern void ( * glTextureMaterialEXT) (GLenum face, GLenum mode) __asm__("__glewTextureMaterialEXT");
extern void ( * glMultiDrawArraysEXT) (GLenum mode, const GLint* first, const GLsizei *count, GLsizei primcount) __asm__("__glewMultiDrawArraysEXT");
extern void ( * glMultiDrawElementsEXT) (GLenum mode, GLsizei* count, GLenum type, const void *const *indices, GLsizei primcount) __asm__("__glewMultiDrawElementsEXT");
extern void ( * glSampleMaskEXT) (GLclampf value, GLboolean invert) __asm__("__glewSampleMaskEXT");
extern void ( * glSamplePatternEXT) (GLenum pattern) __asm__("__glewSamplePatternEXT");
extern void ( * glColorTableEXT) (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void *data) __asm__("__glewColorTableEXT");
extern void ( * glGetColorTableEXT) (GLenum target, GLenum format, GLenum type, void *data) __asm__("__glewGetColorTableEXT");
extern void ( * glGetColorTableParameterfvEXT) (GLenum target, GLenum pname, GLfloat* params) __asm__("__glewGetColorTableParameterfvEXT");
extern void ( * glGetColorTableParameterivEXT) (GLenum target, GLenum pname, GLint* params) __asm__("__glewGetColorTableParameterivEXT");
extern void ( * glGetPixelTransformParameterfvEXT) (GLenum target, GLenum pname, const GLfloat* params) __asm__("__glewGetPixelTransformParameterfvEXT");
extern void ( * glGetPixelTransformParameterivEXT) (GLenum target, GLenum pname, const GLint* params) __asm__("__glewGetPixelTransformParameterivEXT");
extern void ( * glPixelTransformParameterfEXT) (GLenum target, GLenum pname, const GLfloat param) __asm__("__glewPixelTransformParameterfEXT");
extern void ( * glPixelTransformParameterfvEXT) (GLenum target, GLenum pname, const GLfloat* params) __asm__("__glewPixelTransformParameterfvEXT");
extern void ( * glPixelTransformParameteriEXT) (GLenum target, GLenum pname, const GLint param) __asm__("__glewPixelTransformParameteriEXT");
extern void ( * glPixelTransformParameterivEXT) (GLenum target, GLenum pname, const GLint* params) __asm__("__glewPixelTransformParameterivEXT");
extern void ( * glPointParameterfEXT) (GLenum pname, GLfloat param) __asm__("__glewPointParameterfEXT");
extern void ( * glPointParameterfvEXT) (GLenum pname, const GLfloat* params) __asm__("__glewPointParameterfvEXT");
extern void ( * glPolygonOffsetEXT) (GLfloat factor, GLfloat bias) __asm__("__glewPolygonOffsetEXT");
extern void ( * glPolygonOffsetClampEXT) (GLfloat factor, GLfloat units, GLfloat clamp) __asm__("__glewPolygonOffsetClampEXT");
extern void ( * glProvokingVertexEXT) (GLenum mode) __asm__("__glewProvokingVertexEXT");
extern void ( * glCoverageModulationNV) (GLenum components) __asm__("__glewCoverageModulationNV");
extern void ( * glCoverageModulationTableNV) (GLsizei n, const GLfloat* v) __asm__("__glewCoverageModulationTableNV");
extern void ( * glGetCoverageModulationTableNV) (GLsizei bufsize, GLfloat* v) __asm__("__glewGetCoverageModulationTableNV");
extern void ( * glRasterSamplesEXT) (GLuint samples, GLboolean fixedsamplelocations) __asm__("__glewRasterSamplesEXT");
extern void ( * glBeginSceneEXT) (void) __asm__("__glewBeginSceneEXT");
extern void ( * glEndSceneEXT) (void) __asm__("__glewEndSceneEXT");
extern void ( * glSecondaryColor3bEXT) (GLbyte red, GLbyte green, GLbyte blue) __asm__("__glewSecondaryColor3bEXT");
extern void ( * glSecondaryColor3bvEXT) (const GLbyte *v) __asm__("__glewSecondaryColor3bvEXT");
extern void ( * glSecondaryColor3dEXT) (GLdouble red, GLdouble green, GLdouble blue) __asm__("__glewSecondaryColor3dEXT");
extern void ( * glSecondaryColor3dvEXT) (const GLdouble *v) __asm__("__glewSecondaryColor3dvEXT");
extern void ( * glSecondaryColor3fEXT) (GLfloat red, GLfloat green, GLfloat blue) __asm__("__glewSecondaryColor3fEXT");
extern void ( * glSecondaryColor3fvEXT) (const GLfloat *v) __asm__("__glewSecondaryColor3fvEXT");
extern void ( * glSecondaryColor3iEXT) (GLint red, GLint green, GLint blue) __asm__("__glewSecondaryColor3iEXT");
extern void ( * glSecondaryColor3ivEXT) (const GLint *v) __asm__("__glewSecondaryColor3ivEXT");
extern void ( * glSecondaryColor3sEXT) (GLshort red, GLshort green, GLshort blue) __asm__("__glewSecondaryColor3sEXT");
extern void ( * glSecondaryColor3svEXT) (const GLshort *v) __asm__("__glewSecondaryColor3svEXT");
extern void ( * glSecondaryColor3ubEXT) (GLubyte red, GLubyte green, GLubyte blue) __asm__("__glewSecondaryColor3ubEXT");
extern void ( * glSecondaryColor3ubvEXT) (const GLubyte *v) __asm__("__glewSecondaryColor3ubvEXT");
extern void ( * glSecondaryColor3uiEXT) (GLuint red, GLuint green, GLuint blue) __asm__("__glewSecondaryColor3uiEXT");
extern void ( * glSecondaryColor3uivEXT) (const GLuint *v) __asm__("__glewSecondaryColor3uivEXT");
extern void ( * glSecondaryColor3usEXT) (GLushort red, GLushort green, GLushort blue) __asm__("__glewSecondaryColor3usEXT");
extern void ( * glSecondaryColor3usvEXT) (const GLushort *v) __asm__("__glewSecondaryColor3usvEXT");
extern void ( * glSecondaryColorPointerEXT) (GLint size, GLenum type, GLsizei stride, const void *pointer) __asm__("__glewSecondaryColorPointerEXT");
extern void ( * glActiveProgramEXT) (GLuint program) __asm__("__glewActiveProgramEXT");
extern GLuint ( * glCreateShaderProgramEXT) (GLenum type, const GLchar* string) __asm__("__glewCreateShaderProgramEXT");
extern void ( * glUseShaderProgramEXT) (GLenum type, GLuint program) __asm__("__glewUseShaderProgramEXT");
extern void ( * glBindImageTextureEXT) (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format) __asm__("__glewBindImageTextureEXT");
extern void ( * glMemoryBarrierEXT) (GLbitfield barriers) __asm__("__glewMemoryBarrierEXT");
extern void ( * glActiveStencilFaceEXT) (GLenum face) __asm__("__glewActiveStencilFaceEXT");
extern void ( * glTexSubImage1DEXT) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) __asm__("__glewTexSubImage1DEXT");
extern void ( * glTexSubImage2DEXT) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) __asm__("__glewTexSubImage2DEXT");
extern void ( * glTexSubImage3DEXT) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) __asm__("__glewTexSubImage3DEXT");
extern void ( * glTexImage3DEXT) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) __asm__("__glewTexImage3DEXT");
extern void ( * glFramebufferTextureLayerEXT) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) __asm__("__glewFramebufferTextureLayerEXT");
extern void ( * glTexBufferEXT) (GLenum target, GLenum internalformat, GLuint buffer) __asm__("__glewTexBufferEXT");
extern void ( * glClearColorIiEXT) (GLint red, GLint green, GLint blue, GLint alpha) __asm__("__glewClearColorIiEXT");
extern void ( * glClearColorIuiEXT) (GLuint red, GLuint green, GLuint blue, GLuint alpha) __asm__("__glewClearColorIuiEXT");
extern void ( * glGetTexParameterIivEXT) (GLenum target, GLenum pname, GLint *params) __asm__("__glewGetTexParameterIivEXT");
extern void ( * glGetTexParameterIuivEXT) (GLenum target, GLenum pname, GLuint *params) __asm__("__glewGetTexParameterIuivEXT");
extern void ( * glTexParameterIivEXT) (GLenum target, GLenum pname, const GLint *params) __asm__("__glewTexParameterIivEXT");
extern void ( * glTexParameterIuivEXT) (GLenum target, GLenum pname, const GLuint *params) __asm__("__glewTexParameterIuivEXT");
extern GLboolean ( * glAreTexturesResidentEXT) (GLsizei n, const GLuint* textures, GLboolean* residences) __asm__("__glewAreTexturesResidentEXT");
extern void ( * glBindTextureEXT) (GLenum target, GLuint texture) __asm__("__glewBindTextureEXT");
extern void ( * glDeleteTexturesEXT) (GLsizei n, const GLuint* textures) __asm__("__glewDeleteTexturesEXT");
extern void ( * glGenTexturesEXT) (GLsizei n, GLuint* textures) __asm__("__glewGenTexturesEXT");
extern GLboolean ( * glIsTextureEXT) (GLuint texture) __asm__("__glewIsTextureEXT");
extern void ( * glPrioritizeTexturesEXT) (GLsizei n, const GLuint* textures, const GLclampf* priorities) __asm__("__glewPrioritizeTexturesEXT");
extern void ( * glTextureNormalEXT) (GLenum mode) __asm__("__glewTextureNormalEXT");
extern void ( * glGetQueryObjecti64vEXT) (GLuint id, GLenum pname, GLint64EXT *params) __asm__("__glewGetQueryObjecti64vEXT");
extern void ( * glGetQueryObjectui64vEXT) (GLuint id, GLenum pname, GLuint64EXT *params) __asm__("__glewGetQueryObjectui64vEXT");
extern void ( * glBeginTransformFeedbackEXT) (GLenum primitiveMode) __asm__("__glewBeginTransformFeedbackEXT");
extern void ( * glBindBufferBaseEXT) (GLenum target, GLuint index, GLuint buffer) __asm__("__glewBindBufferBaseEXT");
extern void ( * glBindBufferOffsetEXT) (GLenum target, GLuint index, GLuint buffer, GLintptr offset) __asm__("__glewBindBufferOffsetEXT");
extern void ( * glBindBufferRangeEXT) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) __asm__("__glewBindBufferRangeEXT");
extern void ( * glEndTransformFeedbackEXT) (void) __asm__("__glewEndTransformFeedbackEXT");
extern void ( * glGetTransformFeedbackVaryingEXT) (GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei *size, GLenum *type, GLchar *name) __asm__("__glewGetTransformFeedbackVaryingEXT");
extern void ( * glTransformFeedbackVaryingsEXT) (GLuint program, GLsizei count, const GLchar * const* varyings, GLenum bufferMode) __asm__("__glewTransformFeedbackVaryingsEXT");
extern void ( * glArrayElementEXT) (GLint i) __asm__("__glewArrayElementEXT");
extern void ( * glColorPointerEXT) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer) __asm__("__glewColorPointerEXT");
extern void ( * glDrawArraysEXT) (GLenum mode, GLint first, GLsizei count) __asm__("__glewDrawArraysEXT");
extern void ( * glEdgeFlagPointerEXT) (GLsizei stride, GLsizei count, const GLboolean* pointer) __asm__("__glewEdgeFlagPointerEXT");
extern void ( * glIndexPointerEXT) (GLenum type, GLsizei stride, GLsizei count, const void *pointer) __asm__("__glewIndexPointerEXT");
extern void ( * glNormalPointerEXT) (GLenum type, GLsizei stride, GLsizei count, const void *pointer) __asm__("__glewNormalPointerEXT");
extern void ( * glTexCoordPointerEXT) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer) __asm__("__glewTexCoordPointerEXT");
extern void ( * glVertexPointerEXT) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer) __asm__("__glewVertexPointerEXT");
extern void ( * glGetVertexAttribLdvEXT) (GLuint index, GLenum pname, GLdouble* params) __asm__("__glewGetVertexAttribLdvEXT");
extern void ( * glVertexArrayVertexAttribLOffsetEXT) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) __asm__("__glewVertexArrayVertexAttribLOffsetEXT");
extern void ( * glVertexAttribL1dEXT) (GLuint index, GLdouble x) __asm__("__glewVertexAttribL1dEXT");
extern void ( * glVertexAttribL1dvEXT) (GLuint index, const GLdouble* v) __asm__("__glewVertexAttribL1dvEXT");
extern void ( * glVertexAttribL2dEXT) (GLuint index, GLdouble x, GLdouble y) __asm__("__glewVertexAttribL2dEXT");
extern void ( * glVertexAttribL2dvEXT) (GLuint index, const GLdouble* v) __asm__("__glewVertexAttribL2dvEXT");
extern void ( * glVertexAttribL3dEXT) (GLuint index, GLdouble x, GLdouble y, GLdouble z) __asm__("__glewVertexAttribL3dEXT");
extern void ( * glVertexAttribL3dvEXT) (GLuint index, const GLdouble* v) __asm__("__glewVertexAttribL3dvEXT");
extern void ( * glVertexAttribL4dEXT) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) __asm__("__glewVertexAttribL4dEXT");
extern void ( * glVertexAttribL4dvEXT) (GLuint index, const GLdouble* v) __asm__("__glewVertexAttribL4dvEXT");
extern void ( * glVertexAttribLPointerEXT) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) __asm__("__glewVertexAttribLPointerEXT");
extern void ( * glBeginVertexShaderEXT) (void) __asm__("__glewBeginVertexShaderEXT");
extern GLuint ( * glBindLightParameterEXT) (GLenum light, GLenum value) __asm__("__glewBindLightParameterEXT");
extern GLuint ( * glBindMaterialParameterEXT) (GLenum face, GLenum value) __asm__("__glewBindMaterialParameterEXT");
extern GLuint ( * glBindParameterEXT) (GLenum value) __asm__("__glewBindParameterEXT");
extern GLuint ( * glBindTexGenParameterEXT) (GLenum unit, GLenum coord, GLenum value) __asm__("__glewBindTexGenParameterEXT");
extern GLuint ( * glBindTextureUnitParameterEXT) (GLenum unit, GLenum value) __asm__("__glewBindTextureUnitParameterEXT");
extern void ( * glBindVertexShaderEXT) (GLuint id) __asm__("__glewBindVertexShaderEXT");
extern void ( * glDeleteVertexShaderEXT) (GLuint id) __asm__("__glewDeleteVertexShaderEXT");
extern void ( * glDisableVariantClientStateEXT) (GLuint id) __asm__("__glewDisableVariantClientStateEXT");
extern void ( * glEnableVariantClientStateEXT) (GLuint id) __asm__("__glewEnableVariantClientStateEXT");
extern void ( * glEndVertexShaderEXT) (void) __asm__("__glewEndVertexShaderEXT");
extern void ( * glExtractComponentEXT) (GLuint res, GLuint src, GLuint num) __asm__("__glewExtractComponentEXT");
extern GLuint ( * glGenSymbolsEXT) (GLenum dataType, GLenum storageType, GLenum range, GLuint components) __asm__("__glewGenSymbolsEXT");
extern GLuint ( * glGenVertexShadersEXT) (GLuint range) __asm__("__glewGenVertexShadersEXT");
extern void ( * glGetInvariantBooleanvEXT) (GLuint id, GLenum value, GLboolean *data) __asm__("__glewGetInvariantBooleanvEXT");
extern void ( * glGetInvariantFloatvEXT) (GLuint id, GLenum value, GLfloat *data) __asm__("__glewGetInvariantFloatvEXT");
extern void ( * glGetInvariantIntegervEXT) (GLuint id, GLenum value, GLint *data) __asm__("__glewGetInvariantIntegervEXT");
extern void ( * glGetLocalConstantBooleanvEXT) (GLuint id, GLenum value, GLboolean *data) __asm__("__glewGetLocalConstantBooleanvEXT");
extern void ( * glGetLocalConstantFloatvEXT) (GLuint id, GLenum value, GLfloat *data) __asm__("__glewGetLocalConstantFloatvEXT");
extern void ( * glGetLocalConstantIntegervEXT) (GLuint id, GLenum value, GLint *data) __asm__("__glewGetLocalConstantIntegervEXT");
extern void ( * glGetVariantBooleanvEXT) (GLuint id, GLenum value, GLboolean *data) __asm__("__glewGetVariantBooleanvEXT");
extern void ( * glGetVariantFloatvEXT) (GLuint id, GLenum value, GLfloat *data) __asm__("__glewGetVariantFloatvEXT");
extern void ( * glGetVariantIntegervEXT) (GLuint id, GLenum value, GLint *data) __asm__("__glewGetVariantIntegervEXT");
extern void ( * glGetVariantPointervEXT) (GLuint id, GLenum value, void **data) __asm__("__glewGetVariantPointervEXT");
extern void ( * glInsertComponentEXT) (GLuint res, GLuint src, GLuint num) __asm__("__glewInsertComponentEXT");
extern GLboolean ( * glIsVariantEnabledEXT) (GLuint id, GLenum cap) __asm__("__glewIsVariantEnabledEXT");
extern void ( * glSetInvariantEXT) (GLuint id, GLenum type, void *addr) __asm__("__glewSetInvariantEXT");
extern void ( * glSetLocalConstantEXT) (GLuint id, GLenum type, void *addr) __asm__("__glewSetLocalConstantEXT");
extern void ( * glShaderOp1EXT) (GLenum op, GLuint res, GLuint arg1) __asm__("__glewShaderOp1EXT");
extern void ( * glShaderOp2EXT) (GLenum op, GLuint res, GLuint arg1, GLuint arg2) __asm__("__glewShaderOp2EXT");
extern void ( * glShaderOp3EXT) (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3) __asm__("__glewShaderOp3EXT");
extern void ( * glSwizzleEXT) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) __asm__("__glewSwizzleEXT");
extern void ( * glVariantPointerEXT) (GLuint id, GLenum type, GLuint stride, void *addr) __asm__("__glewVariantPointerEXT");
extern void ( * glVariantbvEXT) (GLuint id, GLbyte *addr) __asm__("__glewVariantbvEXT");
extern void ( * glVariantdvEXT) (GLuint id, GLdouble *addr) __asm__("__glewVariantdvEXT");
extern void ( * glVariantfvEXT) (GLuint id, GLfloat *addr) __asm__("__glewVariantfvEXT");
extern void ( * glVariantivEXT) (GLuint id, GLint *addr) __asm__("__glewVariantivEXT");
extern void ( * glVariantsvEXT) (GLuint id, GLshort *addr) __asm__("__glewVariantsvEXT");
extern void ( * glVariantubvEXT) (GLuint id, GLubyte *addr) __asm__("__glewVariantubvEXT");
extern void ( * glVariantuivEXT) (GLuint id, GLuint *addr) __asm__("__glewVariantuivEXT");
extern void ( * glVariantusvEXT) (GLuint id, GLushort *addr) __asm__("__glewVariantusvEXT");
extern void ( * glWriteMaskEXT) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) __asm__("__glewWriteMaskEXT");
extern void ( * glVertexWeightPointerEXT) (GLint size, GLenum type, GLsizei stride, void *pointer) __asm__("__glewVertexWeightPointerEXT");
extern void ( * glVertexWeightfEXT) (GLfloat weight) __asm__("__glewVertexWeightfEXT");
extern void ( * glVertexWeightfvEXT) (GLfloat* weight) __asm__("__glewVertexWeightfvEXT");
extern GLsync ( * glImportSyncEXT) (GLenum external_sync_type, GLintptr external_sync, GLbitfield flags) __asm__("__glewImportSyncEXT");
extern void ( * glFrameTerminatorGREMEDY) (void) __asm__("__glewFrameTerminatorGREMEDY");
extern void ( * glStringMarkerGREMEDY) (GLsizei len, const void *string) __asm__("__glewStringMarkerGREMEDY");
extern void ( * glGetImageTransformParameterfvHP) (GLenum target, GLenum pname, const GLfloat* params) __asm__("__glewGetImageTransformParameterfvHP");
extern void ( * glGetImageTransformParameterivHP) (GLenum target, GLenum pname, const GLint* params) __asm__("__glewGetImageTransformParameterivHP");
extern void ( * glImageTransformParameterfHP) (GLenum target, GLenum pname, const GLfloat param) __asm__("__glewImageTransformParameterfHP");
extern void ( * glImageTransformParameterfvHP) (GLenum target, GLenum pname, const GLfloat* params) __asm__("__glewImageTransformParameterfvHP");
extern void ( * glImageTransformParameteriHP) (GLenum target, GLenum pname, const GLint param) __asm__("__glewImageTransformParameteriHP");
extern void ( * glImageTransformParameterivHP) (GLenum target, GLenum pname, const GLint* params) __asm__("__glewImageTransformParameterivHP");
extern void ( * glMultiModeDrawArraysIBM) (const GLenum* mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride) __asm__("__glewMultiModeDrawArraysIBM");
extern void ( * glMultiModeDrawElementsIBM) (const GLenum* mode, const GLsizei *count, GLenum type, const void *const *indices, GLsizei primcount, GLint modestride) __asm__("__glewMultiModeDrawElementsIBM");
extern void ( * glColorPointerListIBM) (GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride) __asm__("__glewColorPointerListIBM");
extern void ( * glEdgeFlagPointerListIBM) (GLint stride, const GLboolean ** pointer, GLint ptrstride) __asm__("__glewEdgeFlagPointerListIBM");
extern void ( * glFogCoordPointerListIBM) (GLenum type, GLint stride, const void** pointer, GLint ptrstride) __asm__("__glewFogCoordPointerListIBM");
extern void ( * glIndexPointerListIBM) (GLenum type, GLint stride, const void** pointer, GLint ptrstride) __asm__("__glewIndexPointerListIBM");
extern void ( * glNormalPointerListIBM) (GLenum type, GLint stride, const void** pointer, GLint ptrstride) __asm__("__glewNormalPointerListIBM");
extern void ( * glSecondaryColorPointerListIBM) (GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride) __asm__("__glewSecondaryColorPointerListIBM");
extern void ( * glTexCoordPointerListIBM) (GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride) __asm__("__glewTexCoordPointerListIBM");
extern void ( * glVertexPointerListIBM) (GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride) __asm__("__glewVertexPointerListIBM");
extern void * ( * glMapTexture2DINTEL) (GLuint texture, GLint level, GLbitfield access, GLint* stride, GLenum *layout) __asm__("__glewMapTexture2DINTEL");
extern void ( * glSyncTextureINTEL) (GLuint texture) __asm__("__glewSyncTextureINTEL");
extern void ( * glUnmapTexture2DINTEL) (GLuint texture, GLint level) __asm__("__glewUnmapTexture2DINTEL");
extern void ( * glColorPointervINTEL) (GLint size, GLenum type, const void** pointer) __asm__("__glewColorPointervINTEL");
extern void ( * glNormalPointervINTEL) (GLenum type, const void** pointer) __asm__("__glewNormalPointervINTEL");
extern void ( * glTexCoordPointervINTEL) (GLint size, GLenum type, const void** pointer) __asm__("__glewTexCoordPointervINTEL");
extern void ( * glVertexPointervINTEL) (GLint size, GLenum type, const void** pointer) __asm__("__glewVertexPointervINTEL");
extern void ( * glBeginPerfQueryINTEL) (GLuint queryHandle) __asm__("__glewBeginPerfQueryINTEL");
extern void ( * glCreatePerfQueryINTEL) (GLuint queryId, GLuint* queryHandle) __asm__("__glewCreatePerfQueryINTEL");
extern void ( * glDeletePerfQueryINTEL) (GLuint queryHandle) __asm__("__glewDeletePerfQueryINTEL");
extern void ( * glEndPerfQueryINTEL) (GLuint queryHandle) __asm__("__glewEndPerfQueryINTEL");
extern void ( * glGetFirstPerfQueryIdINTEL) (GLuint* queryId) __asm__("__glewGetFirstPerfQueryIdINTEL");
extern void ( * glGetNextPerfQueryIdINTEL) (GLuint queryId, GLuint* nextQueryId) __asm__("__glewGetNextPerfQueryIdINTEL");
extern void ( * glGetPerfCounterInfoINTEL) (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar* counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue) __asm__("__glewGetPerfCounterInfoINTEL");
extern void ( * glGetPerfQueryDataINTEL) (GLuint queryHandle, GLuint flags, GLsizei dataSize, void *data, GLuint *bytesWritten) __asm__("__glewGetPerfQueryDataINTEL");
extern void ( * glGetPerfQueryIdByNameINTEL) (GLchar* queryName, GLuint *queryId) __asm__("__glewGetPerfQueryIdByNameINTEL");
extern void ( * glGetPerfQueryInfoINTEL) (GLuint queryId, GLuint queryNameLength, GLchar* queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask) __asm__("__glewGetPerfQueryInfoINTEL");
extern void ( * glTexScissorFuncINTEL) (GLenum target, GLenum lfunc, GLenum hfunc) __asm__("__glewTexScissorFuncINTEL");
extern void ( * glTexScissorINTEL) (GLenum target, GLclampf tlow, GLclampf thigh) __asm__("__glewTexScissorINTEL");
extern void ( * glBlendBarrierKHR) (void) __asm__("__glewBlendBarrierKHR");
extern void ( * glDebugMessageCallback) (GLDEBUGPROC callback, const void *userParam) __asm__("__glewDebugMessageCallback");
extern void ( * glDebugMessageControl) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled) __asm__("__glewDebugMessageControl");
extern void ( * glDebugMessageInsert) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf) __asm__("__glewDebugMessageInsert");
extern GLuint ( * glGetDebugMessageLog) (GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog) __asm__("__glewGetDebugMessageLog");
extern void ( * glGetObjectLabel) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei* length, GLchar *label) __asm__("__glewGetObjectLabel");
extern void ( * glGetObjectPtrLabel) (const void *ptr, GLsizei bufSize, GLsizei* length, GLchar *label) __asm__("__glewGetObjectPtrLabel");
extern void ( * glObjectLabel) (GLenum identifier, GLuint name, GLsizei length, const GLchar* label) __asm__("__glewObjectLabel");
extern void ( * glObjectPtrLabel) (const void *ptr, GLsizei length, const GLchar* label) __asm__("__glewObjectPtrLabel");
extern void ( * glPopDebugGroup) (void) __asm__("__glewPopDebugGroup");
extern void ( * glPushDebugGroup) (GLenum source, GLuint id, GLsizei length, const GLchar * message) __asm__("__glewPushDebugGroup");
extern void ( * glGetnUniformfv) (GLuint program, GLint location, GLsizei bufSize, GLfloat* params) __asm__("__glewGetnUniformfv");
extern void ( * glGetnUniformiv) (GLuint program, GLint location, GLsizei bufSize, GLint* params) __asm__("__glewGetnUniformiv");
extern void ( * glGetnUniformuiv) (GLuint program, GLint location, GLsizei bufSize, GLuint* params) __asm__("__glewGetnUniformuiv");
extern void ( * glReadnPixels) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data) __asm__("__glewReadnPixels");
extern GLuint ( * glBufferRegionEnabled) (void) __asm__("__glewBufferRegionEnabled");
extern void ( * glDeleteBufferRegion) (GLenum region) __asm__("__glewDeleteBufferRegion");
extern void ( * glDrawBufferRegion) (GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest) __asm__("__glewDrawBufferRegion");
extern GLuint ( * glNewBufferRegion) (GLenum region) __asm__("__glewNewBufferRegion");
extern void ( * glReadBufferRegion) (GLuint region, GLint x, GLint y, GLsizei width, GLsizei height) __asm__("__glewReadBufferRegion");
extern void ( * glResizeBuffersMESA) (void) __asm__("__glewResizeBuffersMESA");
extern void ( * glWindowPos2dMESA) (GLdouble x, GLdouble y) __asm__("__glewWindowPos2dMESA");
extern void ( * glWindowPos2dvMESA) (const GLdouble* p) __asm__("__glewWindowPos2dvMESA");
extern void ( * glWindowPos2fMESA) (GLfloat x, GLfloat y) __asm__("__glewWindowPos2fMESA");
extern void ( * glWindowPos2fvMESA) (const GLfloat* p) __asm__("__glewWindowPos2fvMESA");
extern void ( * glWindowPos2iMESA) (GLint x, GLint y) __asm__("__glewWindowPos2iMESA");
extern void ( * glWindowPos2ivMESA) (const GLint* p) __asm__("__glewWindowPos2ivMESA");
extern void ( * glWindowPos2sMESA) (GLshort x, GLshort y) __asm__("__glewWindowPos2sMESA");
extern void ( * glWindowPos2svMESA) (const GLshort* p) __asm__("__glewWindowPos2svMESA");
extern void ( * glWindowPos3dMESA) (GLdouble x, GLdouble y, GLdouble z) __asm__("__glewWindowPos3dMESA");
extern void ( * glWindowPos3dvMESA) (const GLdouble* p) __asm__("__glewWindowPos3dvMESA");
extern void ( * glWindowPos3fMESA) (GLfloat x, GLfloat y, GLfloat z) __asm__("__glewWindowPos3fMESA");
extern void ( * glWindowPos3fvMESA) (const GLfloat* p) __asm__("__glewWindowPos3fvMESA");
extern void ( * glWindowPos3iMESA) (GLint x, GLint y, GLint z) __asm__("__glewWindowPos3iMESA");
extern void ( * glWindowPos3ivMESA) (const GLint* p) __asm__("__glewWindowPos3ivMESA");
extern void ( * glWindowPos3sMESA) (GLshort x, GLshort y, GLshort z) __asm__("__glewWindowPos3sMESA");
extern void ( * glWindowPos3svMESA) (const GLshort* p) __asm__("__glewWindowPos3svMESA");
extern void ( * glWindowPos4dMESA) (GLdouble x, GLdouble y, GLdouble z, GLdouble) __asm__("__glewWindowPos4dMESA");
extern void ( * glWindowPos4dvMESA) (const GLdouble* p) __asm__("__glewWindowPos4dvMESA");
extern void ( * glWindowPos4fMESA) (GLfloat x, GLfloat y, GLfloat z, GLfloat w) __asm__("__glewWindowPos4fMESA");
extern void ( * glWindowPos4fvMESA) (const GLfloat* p) __asm__("__glewWindowPos4fvMESA");
extern void ( * glWindowPos4iMESA) (GLint x, GLint y, GLint z, GLint w) __asm__("__glewWindowPos4iMESA");
extern void ( * glWindowPos4ivMESA) (const GLint* p) __asm__("__glewWindowPos4ivMESA");
extern void ( * glWindowPos4sMESA) (GLshort x, GLshort y, GLshort z, GLshort w) __asm__("__glewWindowPos4sMESA");
extern void ( * glWindowPos4svMESA) (const GLshort* p) __asm__("__glewWindowPos4svMESA");
extern void ( * glBeginConditionalRenderNVX) (GLuint id) __asm__("__glewBeginConditionalRenderNVX");
extern void ( * glEndConditionalRenderNVX) (void) __asm__("__glewEndConditionalRenderNVX");
extern void ( * glMultiDrawArraysIndirectBindlessNV) (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) __asm__("__glewMultiDrawArraysIndirectBindlessNV");
extern void ( * glMultiDrawElementsIndirectBindlessNV) (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) __asm__("__glewMultiDrawElementsIndirectBindlessNV");
extern void ( * glMultiDrawArraysIndirectBindlessCountNV) (GLenum mode, const void *indirect, GLintptr drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) __asm__("__glewMultiDrawArraysIndirectBindlessCountNV");
extern void ( * glMultiDrawElementsIndirectBindlessCountNV) (GLenum mode, GLenum type, const void *indirect, GLintptr drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) __asm__("__glewMultiDrawElementsIndirectBindlessCountNV");
extern GLuint64 ( * glGetImageHandleNV) (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) __asm__("__glewGetImageHandleNV");
extern GLuint64 ( * glGetTextureHandleNV) (GLuint texture) __asm__("__glewGetTextureHandleNV");
extern GLuint64 ( * glGetTextureSamplerHandleNV) (GLuint texture, GLuint sampler) __asm__("__glewGetTextureSamplerHandleNV");
extern GLboolean ( * glIsImageHandleResidentNV) (GLuint64 handle) __asm__("__glewIsImageHandleResidentNV");
extern GLboolean ( * glIsTextureHandleResidentNV) (GLuint64 handle) __asm__("__glewIsTextureHandleResidentNV");
extern void ( * glMakeImageHandleNonResidentNV) (GLuint64 handle) __asm__("__glewMakeImageHandleNonResidentNV");
extern void ( * glMakeImageHandleResidentNV) (GLuint64 handle, GLenum access) __asm__("__glewMakeImageHandleResidentNV");
extern void ( * glMakeTextureHandleNonResidentNV) (GLuint64 handle) __asm__("__glewMakeTextureHandleNonResidentNV");
extern void ( * glMakeTextureHandleResidentNV) (GLuint64 handle) __asm__("__glewMakeTextureHandleResidentNV");
extern void ( * glProgramUniformHandleui64NV) (GLuint program, GLint location, GLuint64 value) __asm__("__glewProgramUniformHandleui64NV");
extern void ( * glProgramUniformHandleui64vNV) (GLuint program, GLint location, GLsizei count, const GLuint64* values) __asm__("__glewProgramUniformHandleui64vNV");
extern void ( * glUniformHandleui64NV) (GLint location, GLuint64 value) __asm__("__glewUniformHandleui64NV");
extern void ( * glUniformHandleui64vNV) (GLint location, GLsizei count, const GLuint64* value) __asm__("__glewUniformHandleui64vNV");
extern void ( * glBlendBarrierNV) (void) __asm__("__glewBlendBarrierNV");
extern void ( * glBlendParameteriNV) (GLenum pname, GLint value) __asm__("__glewBlendParameteriNV");
extern void ( * glBeginConditionalRenderNV) (GLuint id, GLenum mode) __asm__("__glewBeginConditionalRenderNV");
extern void ( * glEndConditionalRenderNV) (void) __asm__("__glewEndConditionalRenderNV");
extern void ( * glSubpixelPrecisionBiasNV) (GLuint xbits, GLuint ybits) __asm__("__glewSubpixelPrecisionBiasNV");
extern void ( * glCopyImageSubDataNV) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) __asm__("__glewCopyImageSubDataNV");
extern void ( * glClearDepthdNV) (GLdouble depth) __asm__("__glewClearDepthdNV");
extern void ( * glDepthBoundsdNV) (GLdouble zmin, GLdouble zmax) __asm__("__glewDepthBoundsdNV");
extern void ( * glDepthRangedNV) (GLdouble zNear, GLdouble zFar) __asm__("__glewDepthRangedNV");
extern void ( * glDrawTextureNV) (GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) __asm__("__glewDrawTextureNV");
extern void ( * glEvalMapsNV) (GLenum target, GLenum mode) __asm__("__glewEvalMapsNV");
extern void ( * glGetMapAttribParameterfvNV) (GLenum target, GLuint index, GLenum pname, GLfloat* params) __asm__("__glewGetMapAttribParameterfvNV");
extern void ( * glGetMapAttribParameterivNV) (GLenum target, GLuint index, GLenum pname, GLint* params) __asm__("__glewGetMapAttribParameterivNV");
extern void ( * glGetMapControlPointsNV) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points) __asm__("__glewGetMapControlPointsNV");
extern void ( * glGetMapParameterfvNV) (GLenum target, GLenum pname, GLfloat* params) __asm__("__glewGetMapParameterfvNV");
extern void ( * glGetMapParameterivNV) (GLenum target, GLenum pname, GLint* params) __asm__("__glewGetMapParameterivNV");
extern void ( * glMapControlPointsNV) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points) __asm__("__glewMapControlPointsNV");
extern void ( * glMapParameterfvNV) (GLenum target, GLenum pname, const GLfloat* params) __asm__("__glewMapParameterfvNV");
extern void ( * glMapParameterivNV) (GLenum target, GLenum pname, const GLint* params) __asm__("__glewMapParameterivNV");
extern void ( * glGetMultisamplefvNV) (GLenum pname, GLuint index, GLfloat* val) __asm__("__glewGetMultisamplefvNV");
extern void ( * glSampleMaskIndexedNV) (GLuint index, GLbitfield mask) __asm__("__glewSampleMaskIndexedNV");
extern void ( * glTexRenderbufferNV) (GLenum target, GLuint renderbuffer) __asm__("__glewTexRenderbufferNV");
extern void ( * glDeleteFencesNV) (GLsizei n, const GLuint* fences) __asm__("__glewDeleteFencesNV");
extern void ( * glFinishFenceNV) (GLuint fence) __asm__("__glewFinishFenceNV");
extern void ( * glGenFencesNV) (GLsizei n, GLuint* fences) __asm__("__glewGenFencesNV");
extern void ( * glGetFenceivNV) (GLuint fence, GLenum pname, GLint* params) __asm__("__glewGetFenceivNV");
extern GLboolean ( * glIsFenceNV) (GLuint fence) __asm__("__glewIsFenceNV");
extern void ( * glSetFenceNV) (GLuint fence, GLenum condition) __asm__("__glewSetFenceNV");
extern GLboolean ( * glTestFenceNV) (GLuint fence) __asm__("__glewTestFenceNV");
extern void ( * glFragmentCoverageColorNV) (GLuint color) __asm__("__glewFragmentCoverageColorNV");
extern void ( * glGetProgramNamedParameterdvNV) (GLuint id, GLsizei len, const GLubyte* name, GLdouble *params) __asm__("__glewGetProgramNamedParameterdvNV");
extern void ( * glGetProgramNamedParameterfvNV) (GLuint id, GLsizei len, const GLubyte* name, GLfloat *params) __asm__("__glewGetProgramNamedParameterfvNV");
extern void ( * glProgramNamedParameter4dNV) (GLuint id, GLsizei len, const GLubyte* name, GLdouble x, GLdouble y, GLdouble z, GLdouble w) __asm__("__glewProgramNamedParameter4dNV");
extern void ( * glProgramNamedParameter4dvNV) (GLuint id, GLsizei len, const GLubyte* name, const GLdouble v[]) __asm__("__glewProgramNamedParameter4dvNV");
extern void ( * glProgramNamedParameter4fNV) (GLuint id, GLsizei len, const GLubyte* name, GLfloat x, GLfloat y, GLfloat z, GLfloat w) __asm__("__glewProgramNamedParameter4fNV");
extern void ( * glProgramNamedParameter4fvNV) (GLuint id, GLsizei len, const GLubyte* name, const GLfloat v[]) __asm__("__glewProgramNamedParameter4fvNV");
extern void ( * glRenderbufferStorageMultisampleCoverageNV) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) __asm__("__glewRenderbufferStorageMultisampleCoverageNV");
extern void ( * glProgramVertexLimitNV) (GLenum target, GLint limit) __asm__("__glewProgramVertexLimitNV");
extern void ( * glProgramEnvParameterI4iNV) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) __asm__("__glewProgramEnvParameterI4iNV");
extern void ( * glProgramEnvParameterI4ivNV) (GLenum target, GLuint index, const GLint *params) __asm__("__glewProgramEnvParameterI4ivNV");
extern void ( * glProgramEnvParameterI4uiNV) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) __asm__("__glewProgramEnvParameterI4uiNV");
extern void ( * glProgramEnvParameterI4uivNV) (GLenum target, GLuint index, const GLuint *params) __asm__("__glewProgramEnvParameterI4uivNV");
extern void ( * glProgramEnvParametersI4ivNV) (GLenum target, GLuint index, GLsizei count, const GLint *params) __asm__("__glewProgramEnvParametersI4ivNV");
extern void ( * glProgramEnvParametersI4uivNV) (GLenum target, GLuint index, GLsizei count, const GLuint *params) __asm__("__glewProgramEnvParametersI4uivNV");
extern void ( * glProgramLocalParameterI4iNV) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) __asm__("__glewProgramLocalParameterI4iNV");
extern void ( * glProgramLocalParameterI4ivNV) (GLenum target, GLuint index, const GLint *params) __asm__("__glewProgramLocalParameterI4ivNV");
extern void ( * glProgramLocalParameterI4uiNV) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) __asm__("__glewProgramLocalParameterI4uiNV");
extern void ( * glProgramLocalParameterI4uivNV) (GLenum target, GLuint index, const GLuint *params) __asm__("__glewProgramLocalParameterI4uivNV");
extern void ( * glProgramLocalParametersI4ivNV) (GLenum target, GLuint index, GLsizei count, const GLint *params) __asm__("__glewProgramLocalParametersI4ivNV");
extern void ( * glProgramLocalParametersI4uivNV) (GLenum target, GLuint index, GLsizei count, const GLuint *params) __asm__("__glewProgramLocalParametersI4uivNV");
extern void ( * glGetUniformi64vNV) (GLuint program, GLint location, GLint64EXT* params) __asm__("__glewGetUniformi64vNV");
extern void ( * glGetUniformui64vNV) (GLuint program, GLint location, GLuint64EXT* params) __asm__("__glewGetUniformui64vNV");
extern void ( * glProgramUniform1i64NV) (GLuint program, GLint location, GLint64EXT x) __asm__("__glewProgramUniform1i64NV");
extern void ( * glProgramUniform1i64vNV) (GLuint program, GLint location, GLsizei count, const GLint64EXT* value) __asm__("__glewProgramUniform1i64vNV");
extern void ( * glProgramUniform1ui64NV) (GLuint program, GLint location, GLuint64EXT x) __asm__("__glewProgramUniform1ui64NV");
extern void ( * glProgramUniform1ui64vNV) (GLuint program, GLint location, GLsizei count, const GLuint64EXT* value) __asm__("__glewProgramUniform1ui64vNV");
extern void ( * glProgramUniform2i64NV) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y) __asm__("__glewProgramUniform2i64NV");
extern void ( * glProgramUniform2i64vNV) (GLuint program, GLint location, GLsizei count, const GLint64EXT* value) __asm__("__glewProgramUniform2i64vNV");
extern void ( * glProgramUniform2ui64NV) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y) __asm__("__glewProgramUniform2ui64NV");
extern void ( * glProgramUniform2ui64vNV) (GLuint program, GLint location, GLsizei count, const GLuint64EXT* value) __asm__("__glewProgramUniform2ui64vNV");
extern void ( * glProgramUniform3i64NV) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) __asm__("__glewProgramUniform3i64NV");
extern void ( * glProgramUniform3i64vNV) (GLuint program, GLint location, GLsizei count, const GLint64EXT* value) __asm__("__glewProgramUniform3i64vNV");
extern void ( * glProgramUniform3ui64NV) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) __asm__("__glewProgramUniform3ui64NV");
extern void ( * glProgramUniform3ui64vNV) (GLuint program, GLint location, GLsizei count, const GLuint64EXT* value) __asm__("__glewProgramUniform3ui64vNV");
extern void ( * glProgramUniform4i64NV) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) __asm__("__glewProgramUniform4i64NV");
extern void ( * glProgramUniform4i64vNV) (GLuint program, GLint location, GLsizei count, const GLint64EXT* value) __asm__("__glewProgramUniform4i64vNV");
extern void ( * glProgramUniform4ui64NV) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) __asm__("__glewProgramUniform4ui64NV");
extern void ( * glProgramUniform4ui64vNV) (GLuint program, GLint location, GLsizei count, const GLuint64EXT* value) __asm__("__glewProgramUniform4ui64vNV");
extern void ( * glUniform1i64NV) (GLint location, GLint64EXT x) __asm__("__glewUniform1i64NV");
extern void ( * glUniform1i64vNV) (GLint location, GLsizei count, const GLint64EXT* value) __asm__("__glewUniform1i64vNV");
extern void ( * glUniform1ui64NV) (GLint location, GLuint64EXT x) __asm__("__glewUniform1ui64NV");
extern void ( * glUniform1ui64vNV) (GLint location, GLsizei count, const GLuint64EXT* value) __asm__("__glewUniform1ui64vNV");
extern void ( * glUniform2i64NV) (GLint location, GLint64EXT x, GLint64EXT y) __asm__("__glewUniform2i64NV");
extern void ( * glUniform2i64vNV) (GLint location, GLsizei count, const GLint64EXT* value) __asm__("__glewUniform2i64vNV");
extern void ( * glUniform2ui64NV) (GLint location, GLuint64EXT x, GLuint64EXT y) __asm__("__glewUniform2ui64NV");
extern void ( * glUniform2ui64vNV) (GLint location, GLsizei count, const GLuint64EXT* value) __asm__("__glewUniform2ui64vNV");
extern void ( * glUniform3i64NV) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) __asm__("__glewUniform3i64NV");
extern void ( * glUniform3i64vNV) (GLint location, GLsizei count, const GLint64EXT* value) __asm__("__glewUniform3i64vNV");
extern void ( * glUniform3ui64NV) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) __asm__("__glewUniform3ui64NV");
extern void ( * glUniform3ui64vNV) (GLint location, GLsizei count, const GLuint64EXT* value) __asm__("__glewUniform3ui64vNV");
extern void ( * glUniform4i64NV) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) __asm__("__glewUniform4i64NV");
extern void ( * glUniform4i64vNV) (GLint location, GLsizei count, const GLint64EXT* value) __asm__("__glewUniform4i64vNV");
extern void ( * glUniform4ui64NV) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) __asm__("__glewUniform4ui64NV");
extern void ( * glUniform4ui64vNV) (GLint location, GLsizei count, const GLuint64EXT* value) __asm__("__glewUniform4ui64vNV");
extern void ( * glColor3hNV) (GLhalf red, GLhalf green, GLhalf blue) __asm__("__glewColor3hNV");
extern void ( * glColor3hvNV) (const GLhalf* v) __asm__("__glewColor3hvNV");
extern void ( * glColor4hNV) (GLhalf red, GLhalf green, GLhalf blue, GLhalf alpha) __asm__("__glewColor4hNV");
extern void ( * glColor4hvNV) (const GLhalf* v) __asm__("__glewColor4hvNV");
extern void ( * glFogCoordhNV) (GLhalf fog) __asm__("__glewFogCoordhNV");
extern void ( * glFogCoordhvNV) (const GLhalf* fog) __asm__("__glewFogCoordhvNV");
extern void ( * glMultiTexCoord1hNV) (GLenum target, GLhalf s) __asm__("__glewMultiTexCoord1hNV");
extern void ( * glMultiTexCoord1hvNV) (GLenum target, const GLhalf* v) __asm__("__glewMultiTexCoord1hvNV");
extern void ( * glMultiTexCoord2hNV) (GLenum target, GLhalf s, GLhalf t) __asm__("__glewMultiTexCoord2hNV");
extern void ( * glMultiTexCoord2hvNV) (GLenum target, const GLhalf* v) __asm__("__glewMultiTexCoord2hvNV");
extern void ( * glMultiTexCoord3hNV) (GLenum target, GLhalf s, GLhalf t, GLhalf r) __asm__("__glewMultiTexCoord3hNV");
extern void ( * glMultiTexCoord3hvNV) (GLenum target, const GLhalf* v) __asm__("__glewMultiTexCoord3hvNV");
extern void ( * glMultiTexCoord4hNV) (GLenum target, GLhalf s, GLhalf t, GLhalf r, GLhalf q) __asm__("__glewMultiTexCoord4hNV");
extern void ( * glMultiTexCoord4hvNV) (GLenum target, const GLhalf* v) __asm__("__glewMultiTexCoord4hvNV");
extern void ( * glNormal3hNV) (GLhalf nx, GLhalf ny, GLhalf nz) __asm__("__glewNormal3hNV");
extern void ( * glNormal3hvNV) (const GLhalf* v) __asm__("__glewNormal3hvNV");
extern void ( * glSecondaryColor3hNV) (GLhalf red, GLhalf green, GLhalf blue) __asm__("__glewSecondaryColor3hNV");
extern void ( * glSecondaryColor3hvNV) (const GLhalf* v) __asm__("__glewSecondaryColor3hvNV");
extern void ( * glTexCoord1hNV) (GLhalf s) __asm__("__glewTexCoord1hNV");
extern void ( * glTexCoord1hvNV) (const GLhalf* v) __asm__("__glewTexCoord1hvNV");
extern void ( * glTexCoord2hNV) (GLhalf s, GLhalf t) __asm__("__glewTexCoord2hNV");
extern void ( * glTexCoord2hvNV) (const GLhalf* v) __asm__("__glewTexCoord2hvNV");
extern void ( * glTexCoord3hNV) (GLhalf s, GLhalf t, GLhalf r) __asm__("__glewTexCoord3hNV");
extern void ( * glTexCoord3hvNV) (const GLhalf* v) __asm__("__glewTexCoord3hvNV");
extern void ( * glTexCoord4hNV) (GLhalf s, GLhalf t, GLhalf r, GLhalf q) __asm__("__glewTexCoord4hNV");
extern void ( * glTexCoord4hvNV) (const GLhalf* v) __asm__("__glewTexCoord4hvNV");
extern void ( * glVertex2hNV) (GLhalf x, GLhalf y) __asm__("__glewVertex2hNV");
extern void ( * glVertex2hvNV) (const GLhalf* v) __asm__("__glewVertex2hvNV");
extern void ( * glVertex3hNV) (GLhalf x, GLhalf y, GLhalf z) __asm__("__glewVertex3hNV");
extern void ( * glVertex3hvNV) (const GLhalf* v) __asm__("__glewVertex3hvNV");
extern void ( * glVertex4hNV) (GLhalf x, GLhalf y, GLhalf z, GLhalf w) __asm__("__glewVertex4hNV");
extern void ( * glVertex4hvNV) (const GLhalf* v) __asm__("__glewVertex4hvNV");
extern void ( * glVertexAttrib1hNV) (GLuint index, GLhalf x) __asm__("__glewVertexAttrib1hNV");
extern void ( * glVertexAttrib1hvNV) (GLuint index, const GLhalf* v) __asm__("__glewVertexAttrib1hvNV");
extern void ( * glVertexAttrib2hNV) (GLuint index, GLhalf x, GLhalf y) __asm__("__glewVertexAttrib2hNV");
extern void ( * glVertexAttrib2hvNV) (GLuint index, const GLhalf* v) __asm__("__glewVertexAttrib2hvNV");
extern void ( * glVertexAttrib3hNV) (GLuint index, GLhalf x, GLhalf y, GLhalf z) __asm__("__glewVertexAttrib3hNV");
extern void ( * glVertexAttrib3hvNV) (GLuint index, const GLhalf* v) __asm__("__glewVertexAttrib3hvNV");
extern void ( * glVertexAttrib4hNV) (GLuint index, GLhalf x, GLhalf y, GLhalf z, GLhalf w) __asm__("__glewVertexAttrib4hNV");
extern void ( * glVertexAttrib4hvNV) (GLuint index, const GLhalf* v) __asm__("__glewVertexAttrib4hvNV");
extern void ( * glVertexAttribs1hvNV) (GLuint index, GLsizei n, const GLhalf* v) __asm__("__glewVertexAttribs1hvNV");
extern void ( * glVertexAttribs2hvNV) (GLuint index, GLsizei n, const GLhalf* v) __asm__("__glewVertexAttribs2hvNV");
extern void ( * glVertexAttribs3hvNV) (GLuint index, GLsizei n, const GLhalf* v) __asm__("__glewVertexAttribs3hvNV");
extern void ( * glVertexAttribs4hvNV) (GLuint index, GLsizei n, const GLhalf* v) __asm__("__glewVertexAttribs4hvNV");
extern void ( * glVertexWeighthNV) (GLhalf weight) __asm__("__glewVertexWeighthNV");
extern void ( * glVertexWeighthvNV) (const GLhalf* weight) __asm__("__glewVertexWeighthvNV");
extern void ( * glGetInternalformatSampleivNV) (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint* params) __asm__("__glewGetInternalformatSampleivNV");
extern void ( * glBeginOcclusionQueryNV) (GLuint id) __asm__("__glewBeginOcclusionQueryNV");
extern void ( * glDeleteOcclusionQueriesNV) (GLsizei n, const GLuint* ids) __asm__("__glewDeleteOcclusionQueriesNV");
extern void ( * glEndOcclusionQueryNV) (void) __asm__("__glewEndOcclusionQueryNV");
extern void ( * glGenOcclusionQueriesNV) (GLsizei n, GLuint* ids) __asm__("__glewGenOcclusionQueriesNV");
extern void ( * glGetOcclusionQueryivNV) (GLuint id, GLenum pname, GLint* params) __asm__("__glewGetOcclusionQueryivNV");
extern void ( * glGetOcclusionQueryuivNV) (GLuint id, GLenum pname, GLuint* params) __asm__("__glewGetOcclusionQueryuivNV");
extern GLboolean ( * glIsOcclusionQueryNV) (GLuint id) __asm__("__glewIsOcclusionQueryNV");
extern void ( * glProgramBufferParametersIivNV) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params) __asm__("__glewProgramBufferParametersIivNV");
extern void ( * glProgramBufferParametersIuivNV) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params) __asm__("__glewProgramBufferParametersIuivNV");
extern void ( * glProgramBufferParametersfvNV) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params) __asm__("__glewProgramBufferParametersfvNV");
extern void ( * glCopyPathNV) (GLuint resultPath, GLuint srcPath) __asm__("__glewCopyPathNV");
extern void ( * glCoverFillPathInstancedNV) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) __asm__("__glewCoverFillPathInstancedNV");
extern void ( * glCoverFillPathNV) (GLuint path, GLenum coverMode) __asm__("__glewCoverFillPathNV");
extern void ( * glCoverStrokePathInstancedNV) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) __asm__("__glewCoverStrokePathInstancedNV");
extern void ( * glCoverStrokePathNV) (GLuint path, GLenum coverMode) __asm__("__glewCoverStrokePathNV");
extern void ( * glDeletePathsNV) (GLuint path, GLsizei range) __asm__("__glewDeletePathsNV");
extern GLuint ( * glGenPathsNV) (GLsizei range) __asm__("__glewGenPathsNV");
extern void ( * glGetPathColorGenfvNV) (GLenum color, GLenum pname, GLfloat* value) __asm__("__glewGetPathColorGenfvNV");
extern void ( * glGetPathColorGenivNV) (GLenum color, GLenum pname, GLint* value) __asm__("__glewGetPathColorGenivNV");
extern void ( * glGetPathCommandsNV) (GLuint path, GLubyte* commands) __asm__("__glewGetPathCommandsNV");
extern void ( * glGetPathCoordsNV) (GLuint path, GLfloat* coords) __asm__("__glewGetPathCoordsNV");
extern void ( * glGetPathDashArrayNV) (GLuint path, GLfloat* dashArray) __asm__("__glewGetPathDashArrayNV");
extern GLfloat ( * glGetPathLengthNV) (GLuint path, GLsizei startSegment, GLsizei numSegments) __asm__("__glewGetPathLengthNV");
extern void ( * glGetPathMetricRangeNV) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat* metrics) __asm__("__glewGetPathMetricRangeNV");
extern void ( * glGetPathMetricsNV) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics) __asm__("__glewGetPathMetricsNV");
extern void ( * glGetPathParameterfvNV) (GLuint path, GLenum pname, GLfloat* value) __asm__("__glewGetPathParameterfvNV");
extern void ( * glGetPathParameterivNV) (GLuint path, GLenum pname, GLint* value) __asm__("__glewGetPathParameterivNV");
extern void ( * glGetPathSpacingNV) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing) __asm__("__glewGetPathSpacingNV");
extern void ( * glGetPathTexGenfvNV) (GLenum texCoordSet, GLenum pname, GLfloat* value) __asm__("__glewGetPathTexGenfvNV");
extern void ( * glGetPathTexGenivNV) (GLenum texCoordSet, GLenum pname, GLint* value) __asm__("__glewGetPathTexGenivNV");
extern void ( * glGetProgramResourcefvNV) (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei bufSize, GLsizei *length, GLfloat *params) __asm__("__glewGetProgramResourcefvNV");
extern void ( * glInterpolatePathsNV) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight) __asm__("__glewInterpolatePathsNV");
extern GLboolean ( * glIsPathNV) (GLuint path) __asm__("__glewIsPathNV");
extern GLboolean ( * glIsPointInFillPathNV) (GLuint path, GLuint mask, GLfloat x, GLfloat y) __asm__("__glewIsPointInFillPathNV");
extern GLboolean ( * glIsPointInStrokePathNV) (GLuint path, GLfloat x, GLfloat y) __asm__("__glewIsPointInStrokePathNV");
extern void ( * glMatrixLoad3x2fNV) (GLenum matrixMode, const GLfloat* m) __asm__("__glewMatrixLoad3x2fNV");
extern void ( * glMatrixLoad3x3fNV) (GLenum matrixMode, const GLfloat* m) __asm__("__glewMatrixLoad3x3fNV");
extern void ( * glMatrixLoadTranspose3x3fNV) (GLenum matrixMode, const GLfloat* m) __asm__("__glewMatrixLoadTranspose3x3fNV");
extern void ( * glMatrixMult3x2fNV) (GLenum matrixMode, const GLfloat* m) __asm__("__glewMatrixMult3x2fNV");
extern void ( * glMatrixMult3x3fNV) (GLenum matrixMode, const GLfloat* m) __asm__("__glewMatrixMult3x3fNV");
extern void ( * glMatrixMultTranspose3x3fNV) (GLenum matrixMode, const GLfloat* m) __asm__("__glewMatrixMultTranspose3x3fNV");
extern void ( * glPathColorGenNV) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat* coeffs) __asm__("__glewPathColorGenNV");
extern void ( * glPathCommandsNV) (GLuint path, GLsizei numCommands, const GLubyte* commands, GLsizei numCoords, GLenum coordType, const void*coords) __asm__("__glewPathCommandsNV");
extern void ( * glPathCoordsNV) (GLuint path, GLsizei numCoords, GLenum coordType, const void *coords) __asm__("__glewPathCoordsNV");
extern void ( * glPathCoverDepthFuncNV) (GLenum zfunc) __asm__("__glewPathCoverDepthFuncNV");
extern void ( * glPathDashArrayNV) (GLuint path, GLsizei dashCount, const GLfloat* dashArray) __asm__("__glewPathDashArrayNV");
extern void ( * glPathFogGenNV) (GLenum genMode) __asm__("__glewPathFogGenNV");
extern GLenum ( * glPathGlyphIndexArrayNV) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) __asm__("__glewPathGlyphIndexArrayNV");
extern GLenum ( * glPathGlyphIndexRangeNV) (GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]) __asm__("__glewPathGlyphIndexRangeNV");
extern void ( * glPathGlyphRangeNV) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) __asm__("__glewPathGlyphRangeNV");
extern void ( * glPathGlyphsNV) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void*charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) __asm__("__glewPathGlyphsNV");
extern GLenum ( * glPathMemoryGlyphIndexArrayNV) (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) __asm__("__glewPathMemoryGlyphIndexArrayNV");
extern void ( * glPathParameterfNV) (GLuint path, GLenum pname, GLfloat value) __asm__("__glewPathParameterfNV");
extern void ( * glPathParameterfvNV) (GLuint path, GLenum pname, const GLfloat* value) __asm__("__glewPathParameterfvNV");
extern void ( * glPathParameteriNV) (GLuint path, GLenum pname, GLint value) __asm__("__glewPathParameteriNV");
extern void ( * glPathParameterivNV) (GLuint path, GLenum pname, const GLint* value) __asm__("__glewPathParameterivNV");
extern void ( * glPathStencilDepthOffsetNV) (GLfloat factor, GLfloat units) __asm__("__glewPathStencilDepthOffsetNV");
extern void ( * glPathStencilFuncNV) (GLenum func, GLint ref, GLuint mask) __asm__("__glewPathStencilFuncNV");
extern void ( * glPathStringNV) (GLuint path, GLenum format, GLsizei length, const void *pathString) __asm__("__glewPathStringNV");
extern void ( * glPathSubCommandsNV) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte* commands, GLsizei numCoords, GLenum coordType, const void*coords) __asm__("__glewPathSubCommandsNV");
extern void ( * glPathSubCoordsNV) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords) __asm__("__glewPathSubCoordsNV");
extern void ( * glPathTexGenNV) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat* coeffs) __asm__("__glewPathTexGenNV");
extern GLboolean ( * glPointAlongPathNV) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat* x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY) __asm__("__glewPointAlongPathNV");
extern void ( * glProgramPathFragmentInputGenNV) (GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat* coeffs) __asm__("__glewProgramPathFragmentInputGenNV");
extern void ( * glStencilFillPathInstancedNV) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues) __asm__("__glewStencilFillPathInstancedNV");
extern void ( * glStencilFillPathNV) (GLuint path, GLenum fillMode, GLuint mask) __asm__("__glewStencilFillPathNV");
extern void ( * glStencilStrokePathInstancedNV) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues) __asm__("__glewStencilStrokePathInstancedNV");
extern void ( * glStencilStrokePathNV) (GLuint path, GLint reference, GLuint mask) __asm__("__glewStencilStrokePathNV");
extern void ( * glStencilThenCoverFillPathInstancedNV) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) __asm__("__glewStencilThenCoverFillPathInstancedNV");
extern void ( * glStencilThenCoverFillPathNV) (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode) __asm__("__glewStencilThenCoverFillPathNV");
extern void ( * glStencilThenCoverStrokePathInstancedNV) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) __asm__("__glewStencilThenCoverStrokePathInstancedNV");
extern void ( * glStencilThenCoverStrokePathNV) (GLuint path, GLint reference, GLuint mask, GLenum coverMode) __asm__("__glewStencilThenCoverStrokePathNV");
extern void ( * glTransformPathNV) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat* transformValues) __asm__("__glewTransformPathNV");
extern void ( * glWeightPathsNV) (GLuint resultPath, GLsizei numPaths, const GLuint paths[], const GLfloat weights[]) __asm__("__glewWeightPathsNV");
extern void ( * glFlushPixelDataRangeNV) (GLenum target) __asm__("__glewFlushPixelDataRangeNV");
extern void ( * glPixelDataRangeNV) (GLenum target, GLsizei length, void *pointer) __asm__("__glewPixelDataRangeNV");
extern void ( * glPointParameteriNV) (GLenum pname, GLint param) __asm__("__glewPointParameteriNV");
extern void ( * glPointParameterivNV) (GLenum pname, const GLint* params) __asm__("__glewPointParameterivNV");
extern void ( * glGetVideoi64vNV) (GLuint video_slot, GLenum pname, GLint64EXT* params) __asm__("__glewGetVideoi64vNV");
extern void ( * glGetVideoivNV) (GLuint video_slot, GLenum pname, GLint* params) __asm__("__glewGetVideoivNV");
extern void ( * glGetVideoui64vNV) (GLuint video_slot, GLenum pname, GLuint64EXT* params) __asm__("__glewGetVideoui64vNV");
extern void ( * glGetVideouivNV) (GLuint video_slot, GLenum pname, GLuint* params) __asm__("__glewGetVideouivNV");
extern void ( * glPresentFrameDualFillNV) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3) __asm__("__glewPresentFrameDualFillNV");
extern void ( * glPresentFrameKeyedNV) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1) __asm__("__glewPresentFrameKeyedNV");
extern void ( * glPrimitiveRestartIndexNV) (GLuint index) __asm__("__glewPrimitiveRestartIndexNV");
extern void ( * glPrimitiveRestartNV) (void) __asm__("__glewPrimitiveRestartNV");
extern void ( * glCombinerInputNV) (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) __asm__("__glewCombinerInputNV");
extern void ( * glCombinerOutputNV) (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum) __asm__("__glewCombinerOutputNV");
extern void ( * glCombinerParameterfNV) (GLenum pname, GLfloat param) __asm__("__glewCombinerParameterfNV");
extern void ( * glCombinerParameterfvNV) (GLenum pname, const GLfloat* params) __asm__("__glewCombinerParameterfvNV");
extern void ( * glCombinerParameteriNV) (GLenum pname, GLint param) __asm__("__glewCombinerParameteriNV");
extern void ( * glCombinerParameterivNV) (GLenum pname, const GLint* params) __asm__("__glewCombinerParameterivNV");
extern void ( * glFinalCombinerInputNV) (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) __asm__("__glewFinalCombinerInputNV");
extern void ( * glGetCombinerInputParameterfvNV) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat* params) __asm__("__glewGetCombinerInputParameterfvNV");
extern void ( * glGetCombinerInputParameterivNV) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint* params) __asm__("__glewGetCombinerInputParameterivNV");
extern void ( * glGetCombinerOutputParameterfvNV) (GLenum stage, GLenum portion, GLenum pname, GLfloat* params) __asm__("__glewGetCombinerOutputParameterfvNV");
extern void ( * glGetCombinerOutputParameterivNV) (GLenum stage, GLenum portion, GLenum pname, GLint* params) __asm__("__glewGetCombinerOutputParameterivNV");
extern void ( * glGetFinalCombinerInputParameterfvNV) (GLenum variable, GLenum pname, GLfloat* params) __asm__("__glewGetFinalCombinerInputParameterfvNV");
extern void ( * glGetFinalCombinerInputParameterivNV) (GLenum variable, GLenum pname, GLint* params) __asm__("__glewGetFinalCombinerInputParameterivNV");
extern void ( * glCombinerStageParameterfvNV) (GLenum stage, GLenum pname, const GLfloat* params) __asm__("__glewCombinerStageParameterfvNV");
extern void ( * glGetCombinerStageParameterfvNV) (GLenum stage, GLenum pname, GLfloat* params) __asm__("__glewGetCombinerStageParameterfvNV");
extern void ( * glFramebufferSampleLocationsfvNV) (GLenum target, GLuint start, GLsizei count, const GLfloat* v) __asm__("__glewFramebufferSampleLocationsfvNV");
extern void ( * glNamedFramebufferSampleLocationsfvNV) (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v) __asm__("__glewNamedFramebufferSampleLocationsfvNV");
extern void ( * glGetBufferParameterui64vNV) (GLenum target, GLenum pname, GLuint64EXT* params) __asm__("__glewGetBufferParameterui64vNV");
extern void ( * glGetIntegerui64vNV) (GLenum value, GLuint64EXT* result) __asm__("__glewGetIntegerui64vNV");
extern void ( * glGetNamedBufferParameterui64vNV) (GLuint buffer, GLenum pname, GLuint64EXT* params) __asm__("__glewGetNamedBufferParameterui64vNV");
extern GLboolean ( * glIsBufferResidentNV) (GLenum target) __asm__("__glewIsBufferResidentNV");
extern GLboolean ( * glIsNamedBufferResidentNV) (GLuint buffer) __asm__("__glewIsNamedBufferResidentNV");
extern void ( * glMakeBufferNonResidentNV) (GLenum target) __asm__("__glewMakeBufferNonResidentNV");
extern void ( * glMakeBufferResidentNV) (GLenum target, GLenum access) __asm__("__glewMakeBufferResidentNV");
extern void ( * glMakeNamedBufferNonResidentNV) (GLuint buffer) __asm__("__glewMakeNamedBufferNonResidentNV");
extern void ( * glMakeNamedBufferResidentNV) (GLuint buffer, GLenum access) __asm__("__glewMakeNamedBufferResidentNV");
extern void ( * glProgramUniformui64NV) (GLuint program, GLint location, GLuint64EXT value) __asm__("__glewProgramUniformui64NV");
extern void ( * glProgramUniformui64vNV) (GLuint program, GLint location, GLsizei count, const GLuint64EXT* value) __asm__("__glewProgramUniformui64vNV");
extern void ( * glUniformui64NV) (GLint location, GLuint64EXT value) __asm__("__glewUniformui64NV");
extern void ( * glUniformui64vNV) (GLint location, GLsizei count, const GLuint64EXT* value) __asm__("__glewUniformui64vNV");
extern void ( * glTextureBarrierNV) (void) __asm__("__glewTextureBarrierNV");
extern void ( * glTexImage2DMultisampleCoverageNV) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) __asm__("__glewTexImage2DMultisampleCoverageNV");
extern void ( * glTexImage3DMultisampleCoverageNV) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) __asm__("__glewTexImage3DMultisampleCoverageNV");
extern void ( * glTextureImage2DMultisampleCoverageNV) (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) __asm__("__glewTextureImage2DMultisampleCoverageNV");
extern void ( * glTextureImage2DMultisampleNV) (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) __asm__("__glewTextureImage2DMultisampleNV");
extern void ( * glTextureImage3DMultisampleCoverageNV) (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) __asm__("__glewTextureImage3DMultisampleCoverageNV");
extern void ( * glTextureImage3DMultisampleNV) (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) __asm__("__glewTextureImage3DMultisampleNV");
extern void ( * glActiveVaryingNV) (GLuint program, const GLchar *name) __asm__("__glewActiveVaryingNV");
extern void ( * glBeginTransformFeedbackNV) (GLenum primitiveMode) __asm__("__glewBeginTransformFeedbackNV");
extern void ( * glBindBufferBaseNV) (GLenum target, GLuint index, GLuint buffer) __asm__("__glewBindBufferBaseNV");
extern void ( * glBindBufferOffsetNV) (GLenum target, GLuint index, GLuint buffer, GLintptr offset) __asm__("__glewBindBufferOffsetNV");
extern void ( * glBindBufferRangeNV) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) __asm__("__glewBindBufferRangeNV");
extern void ( * glEndTransformFeedbackNV) (void) __asm__("__glewEndTransformFeedbackNV");
extern void ( * glGetActiveVaryingNV) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) __asm__("__glewGetActiveVaryingNV");
extern void ( * glGetTransformFeedbackVaryingNV) (GLuint program, GLuint index, GLint *location) __asm__("__glewGetTransformFeedbackVaryingNV");
extern GLint ( * glGetVaryingLocationNV) (GLuint program, const GLchar *name) __asm__("__glewGetVaryingLocationNV");
extern void ( * glTransformFeedbackAttribsNV) (GLuint count, const GLint *attribs, GLenum bufferMode) __asm__("__glewTransformFeedbackAttribsNV");
extern void ( * glTransformFeedbackVaryingsNV) (GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode) __asm__("__glewTransformFeedbackVaryingsNV");
extern void ( * glBindTransformFeedbackNV) (GLenum target, GLuint id) __asm__("__glewBindTransformFeedbackNV");
extern void ( * glDeleteTransformFeedbacksNV) (GLsizei n, const GLuint* ids) __asm__("__glewDeleteTransformFeedbacksNV");
extern void ( * glDrawTransformFeedbackNV) (GLenum mode, GLuint id) __asm__("__glewDrawTransformFeedbackNV");
extern void ( * glGenTransformFeedbacksNV) (GLsizei n, GLuint* ids) __asm__("__glewGenTransformFeedbacksNV");
extern GLboolean ( * glIsTransformFeedbackNV) (GLuint id) __asm__("__glewIsTransformFeedbackNV");
extern void ( * glPauseTransformFeedbackNV) (void) __asm__("__glewPauseTransformFeedbackNV");
extern void ( * glResumeTransformFeedbackNV) (void) __asm__("__glewResumeTransformFeedbackNV");
extern void ( * glVDPAUFiniNV) (void) __asm__("__glewVDPAUFiniNV");
extern void ( * glVDPAUGetSurfaceivNV) (GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei* length, GLint *values) __asm__("__glewVDPAUGetSurfaceivNV");
extern void ( * glVDPAUInitNV) (const void* vdpDevice, const void*getProcAddress) __asm__("__glewVDPAUInitNV");
extern void ( * glVDPAUIsSurfaceNV) (GLvdpauSurfaceNV surface) __asm__("__glewVDPAUIsSurfaceNV");
extern void ( * glVDPAUMapSurfacesNV) (GLsizei numSurfaces, const GLvdpauSurfaceNV* surfaces) __asm__("__glewVDPAUMapSurfacesNV");
extern GLvdpauSurfaceNV ( * glVDPAURegisterOutputSurfaceNV) (const void* vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames) __asm__("__glewVDPAURegisterOutputSurfaceNV");
extern GLvdpauSurfaceNV ( * glVDPAURegisterVideoSurfaceNV) (const void* vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames) __asm__("__glewVDPAURegisterVideoSurfaceNV");
extern void ( * glVDPAUSurfaceAccessNV) (GLvdpauSurfaceNV surface, GLenum access) __asm__("__glewVDPAUSurfaceAccessNV");
extern void ( * glVDPAUUnmapSurfacesNV) (GLsizei numSurface, const GLvdpauSurfaceNV* surfaces) __asm__("__glewVDPAUUnmapSurfacesNV");
extern void ( * glVDPAUUnregisterSurfaceNV) (GLvdpauSurfaceNV surface) __asm__("__glewVDPAUUnregisterSurfaceNV");
extern void ( * glFlushVertexArrayRangeNV) (void) __asm__("__glewFlushVertexArrayRangeNV");
extern void ( * glVertexArrayRangeNV) (GLsizei length, void *pointer) __asm__("__glewVertexArrayRangeNV");
extern void ( * glGetVertexAttribLi64vNV) (GLuint index, GLenum pname, GLint64EXT* params) __asm__("__glewGetVertexAttribLi64vNV");
extern void ( * glGetVertexAttribLui64vNV) (GLuint index, GLenum pname, GLuint64EXT* params) __asm__("__glewGetVertexAttribLui64vNV");
extern void ( * glVertexAttribL1i64NV) (GLuint index, GLint64EXT x) __asm__("__glewVertexAttribL1i64NV");
extern void ( * glVertexAttribL1i64vNV) (GLuint index, const GLint64EXT* v) __asm__("__glewVertexAttribL1i64vNV");
extern void ( * glVertexAttribL1ui64NV) (GLuint index, GLuint64EXT x) __asm__("__glewVertexAttribL1ui64NV");
extern void ( * glVertexAttribL1ui64vNV) (GLuint index, const GLuint64EXT* v) __asm__("__glewVertexAttribL1ui64vNV");
extern void ( * glVertexAttribL2i64NV) (GLuint index, GLint64EXT x, GLint64EXT y) __asm__("__glewVertexAttribL2i64NV");
extern void ( * glVertexAttribL2i64vNV) (GLuint index, const GLint64EXT* v) __asm__("__glewVertexAttribL2i64vNV");
extern void ( * glVertexAttribL2ui64NV) (GLuint index, GLuint64EXT x, GLuint64EXT y) __asm__("__glewVertexAttribL2ui64NV");
extern void ( * glVertexAttribL2ui64vNV) (GLuint index, const GLuint64EXT* v) __asm__("__glewVertexAttribL2ui64vNV");
extern void ( * glVertexAttribL3i64NV) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z) __asm__("__glewVertexAttribL3i64NV");
extern void ( * glVertexAttribL3i64vNV) (GLuint index, const GLint64EXT* v) __asm__("__glewVertexAttribL3i64vNV");
extern void ( * glVertexAttribL3ui64NV) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) __asm__("__glewVertexAttribL3ui64NV");
extern void ( * glVertexAttribL3ui64vNV) (GLuint index, const GLuint64EXT* v) __asm__("__glewVertexAttribL3ui64vNV");
extern void ( * glVertexAttribL4i64NV) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) __asm__("__glewVertexAttribL4i64NV");
extern void ( * glVertexAttribL4i64vNV) (GLuint index, const GLint64EXT* v) __asm__("__glewVertexAttribL4i64vNV");
extern void ( * glVertexAttribL4ui64NV) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) __asm__("__glewVertexAttribL4ui64NV");
extern void ( * glVertexAttribL4ui64vNV) (GLuint index, const GLuint64EXT* v) __asm__("__glewVertexAttribL4ui64vNV");
extern void ( * glVertexAttribLFormatNV) (GLuint index, GLint size, GLenum type, GLsizei stride) __asm__("__glewVertexAttribLFormatNV");
extern void ( * glBufferAddressRangeNV) (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length) __asm__("__glewBufferAddressRangeNV");
extern void ( * glColorFormatNV) (GLint size, GLenum type, GLsizei stride) __asm__("__glewColorFormatNV");
extern void ( * glEdgeFlagFormatNV) (GLsizei stride) __asm__("__glewEdgeFlagFormatNV");
extern void ( * glFogCoordFormatNV) (GLenum type, GLsizei stride) __asm__("__glewFogCoordFormatNV");
extern void ( * glGetIntegerui64i_vNV) (GLenum value, GLuint index, GLuint64EXT result[]) __asm__("__glewGetIntegerui64i_vNV");
extern void ( * glIndexFormatNV) (GLenum type, GLsizei stride) __asm__("__glewIndexFormatNV");
extern void ( * glNormalFormatNV) (GLenum type, GLsizei stride) __asm__("__glewNormalFormatNV");
extern void ( * glSecondaryColorFormatNV) (GLint size, GLenum type, GLsizei stride) __asm__("__glewSecondaryColorFormatNV");
extern void ( * glTexCoordFormatNV) (GLint size, GLenum type, GLsizei stride) __asm__("__glewTexCoordFormatNV");
extern void ( * glVertexAttribFormatNV) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride) __asm__("__glewVertexAttribFormatNV");
extern void ( * glVertexAttribIFormatNV) (GLuint index, GLint size, GLenum type, GLsizei stride) __asm__("__glewVertexAttribIFormatNV");
extern void ( * glVertexFormatNV) (GLint size, GLenum type, GLsizei stride) __asm__("__glewVertexFormatNV");
extern GLboolean ( * glAreProgramsResidentNV) (GLsizei n, const GLuint* ids, GLboolean *residences) __asm__("__glewAreProgramsResidentNV");
extern void ( * glBindProgramNV) (GLenum target, GLuint id) __asm__("__glewBindProgramNV");
extern void ( * glDeleteProgramsNV) (GLsizei n, const GLuint* ids) __asm__("__glewDeleteProgramsNV");
extern void ( * glExecuteProgramNV) (GLenum target, GLuint id, const GLfloat* params) __asm__("__glewExecuteProgramNV");
extern void ( * glGenProgramsNV) (GLsizei n, GLuint* ids) __asm__("__glewGenProgramsNV");
extern void ( * glGetProgramParameterdvNV) (GLenum target, GLuint index, GLenum pname, GLdouble* params) __asm__("__glewGetProgramParameterdvNV");
extern void ( * glGetProgramParameterfvNV) (GLenum target, GLuint index, GLenum pname, GLfloat* params) __asm__("__glewGetProgramParameterfvNV");
extern void ( * glGetProgramStringNV) (GLuint id, GLenum pname, GLubyte* program) __asm__("__glewGetProgramStringNV");
extern void ( * glGetProgramivNV) (GLuint id, GLenum pname, GLint* params) __asm__("__glewGetProgramivNV");
extern void ( * glGetTrackMatrixivNV) (GLenum target, GLuint address, GLenum pname, GLint* params) __asm__("__glewGetTrackMatrixivNV");
extern void ( * glGetVertexAttribPointervNV) (GLuint index, GLenum pname, void** pointer) __asm__("__glewGetVertexAttribPointervNV");
extern void ( * glGetVertexAttribdvNV) (GLuint index, GLenum pname, GLdouble* params) __asm__("__glewGetVertexAttribdvNV");
extern void ( * glGetVertexAttribfvNV) (GLuint index, GLenum pname, GLfloat* params) __asm__("__glewGetVertexAttribfvNV");
extern void ( * glGetVertexAttribivNV) (GLuint index, GLenum pname, GLint* params) __asm__("__glewGetVertexAttribivNV");
extern GLboolean ( * glIsProgramNV) (GLuint id) __asm__("__glewIsProgramNV");
extern void ( * glLoadProgramNV) (GLenum target, GLuint id, GLsizei len, const GLubyte* program) __asm__("__glewLoadProgramNV");
extern void ( * glProgramParameter4dNV) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) __asm__("__glewProgramParameter4dNV");
extern void ( * glProgramParameter4dvNV) (GLenum target, GLuint index, const GLdouble* params) __asm__("__glewProgramParameter4dvNV");
extern void ( * glProgramParameter4fNV) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) __asm__("__glewProgramParameter4fNV");
extern void ( * glProgramParameter4fvNV) (GLenum target, GLuint index, const GLfloat* params) __asm__("__glewProgramParameter4fvNV");
extern void ( * glProgramParameters4dvNV) (GLenum target, GLuint index, GLsizei num, const GLdouble* params) __asm__("__glewProgramParameters4dvNV");
extern void ( * glProgramParameters4fvNV) (GLenum target, GLuint index, GLsizei num, const GLfloat* params) __asm__("__glewProgramParameters4fvNV");
extern void ( * glRequestResidentProgramsNV) (GLsizei n, GLuint* ids) __asm__("__glewRequestResidentProgramsNV");
extern void ( * glTrackMatrixNV) (GLenum target, GLuint address, GLenum matrix, GLenum transform) __asm__("__glewTrackMatrixNV");
extern void ( * glVertexAttrib1dNV) (GLuint index, GLdouble x) __asm__("__glewVertexAttrib1dNV");
extern void ( * glVertexAttrib1dvNV) (GLuint index, const GLdouble* v) __asm__("__glewVertexAttrib1dvNV");
extern void ( * glVertexAttrib1fNV) (GLuint index, GLfloat x) __asm__("__glewVertexAttrib1fNV");
extern void ( * glVertexAttrib1fvNV) (GLuint index, const GLfloat* v) __asm__("__glewVertexAttrib1fvNV");
extern void ( * glVertexAttrib1sNV) (GLuint index, GLshort x) __asm__("__glewVertexAttrib1sNV");
extern void ( * glVertexAttrib1svNV) (GLuint index, const GLshort* v) __asm__("__glewVertexAttrib1svNV");
extern void ( * glVertexAttrib2dNV) (GLuint index, GLdouble x, GLdouble y) __asm__("__glewVertexAttrib2dNV");
extern void ( * glVertexAttrib2dvNV) (GLuint index, const GLdouble* v) __asm__("__glewVertexAttrib2dvNV");
extern void ( * glVertexAttrib2fNV) (GLuint index, GLfloat x, GLfloat y) __asm__("__glewVertexAttrib2fNV");
extern void ( * glVertexAttrib2fvNV) (GLuint index, const GLfloat* v) __asm__("__glewVertexAttrib2fvNV");
extern void ( * glVertexAttrib2sNV) (GLuint index, GLshort x, GLshort y) __asm__("__glewVertexAttrib2sNV");
extern void ( * glVertexAttrib2svNV) (GLuint index, const GLshort* v) __asm__("__glewVertexAttrib2svNV");
extern void ( * glVertexAttrib3dNV) (GLuint index, GLdouble x, GLdouble y, GLdouble z) __asm__("__glewVertexAttrib3dNV");
extern void ( * glVertexAttrib3dvNV) (GLuint index, const GLdouble* v) __asm__("__glewVertexAttrib3dvNV");
extern void ( * glVertexAttrib3fNV) (GLuint index, GLfloat x, GLfloat y, GLfloat z) __asm__("__glewVertexAttrib3fNV");
extern void ( * glVertexAttrib3fvNV) (GLuint index, const GLfloat* v) __asm__("__glewVertexAttrib3fvNV");
extern void ( * glVertexAttrib3sNV) (GLuint index, GLshort x, GLshort y, GLshort z) __asm__("__glewVertexAttrib3sNV");
extern void ( * glVertexAttrib3svNV) (GLuint index, const GLshort* v) __asm__("__glewVertexAttrib3svNV");
extern void ( * glVertexAttrib4dNV) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) __asm__("__glewVertexAttrib4dNV");
extern void ( * glVertexAttrib4dvNV) (GLuint index, const GLdouble* v) __asm__("__glewVertexAttrib4dvNV");
extern void ( * glVertexAttrib4fNV) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) __asm__("__glewVertexAttrib4fNV");
extern void ( * glVertexAttrib4fvNV) (GLuint index, const GLfloat* v) __asm__("__glewVertexAttrib4fvNV");
extern void ( * glVertexAttrib4sNV) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) __asm__("__glewVertexAttrib4sNV");
extern void ( * glVertexAttrib4svNV) (GLuint index, const GLshort* v) __asm__("__glewVertexAttrib4svNV");
extern void ( * glVertexAttrib4ubNV) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) __asm__("__glewVertexAttrib4ubNV");
extern void ( * glVertexAttrib4ubvNV) (GLuint index, const GLubyte* v) __asm__("__glewVertexAttrib4ubvNV");
extern void ( * glVertexAttribPointerNV) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) __asm__("__glewVertexAttribPointerNV");
extern void ( * glVertexAttribs1dvNV) (GLuint index, GLsizei n, const GLdouble* v) __asm__("__glewVertexAttribs1dvNV");
extern void ( * glVertexAttribs1fvNV) (GLuint index, GLsizei n, const GLfloat* v) __asm__("__glewVertexAttribs1fvNV");
extern void ( * glVertexAttribs1svNV) (GLuint index, GLsizei n, const GLshort* v) __asm__("__glewVertexAttribs1svNV");
extern void ( * glVertexAttribs2dvNV) (GLuint index, GLsizei n, const GLdouble* v) __asm__("__glewVertexAttribs2dvNV");
extern void ( * glVertexAttribs2fvNV) (GLuint index, GLsizei n, const GLfloat* v) __asm__("__glewVertexAttribs2fvNV");
extern void ( * glVertexAttribs2svNV) (GLuint index, GLsizei n, const GLshort* v) __asm__("__glewVertexAttribs2svNV");
extern void ( * glVertexAttribs3dvNV) (GLuint index, GLsizei n, const GLdouble* v) __asm__("__glewVertexAttribs3dvNV");
extern void ( * glVertexAttribs3fvNV) (GLuint index, GLsizei n, const GLfloat* v) __asm__("__glewVertexAttribs3fvNV");
extern void ( * glVertexAttribs3svNV) (GLuint index, GLsizei n, const GLshort* v) __asm__("__glewVertexAttribs3svNV");
extern void ( * glVertexAttribs4dvNV) (GLuint index, GLsizei n, const GLdouble* v) __asm__("__glewVertexAttribs4dvNV");
extern void ( * glVertexAttribs4fvNV) (GLuint index, GLsizei n, const GLfloat* v) __asm__("__glewVertexAttribs4fvNV");
extern void ( * glVertexAttribs4svNV) (GLuint index, GLsizei n, const GLshort* v) __asm__("__glewVertexAttribs4svNV");
extern void ( * glVertexAttribs4ubvNV) (GLuint index, GLsizei n, const GLubyte* v) __asm__("__glewVertexAttribs4ubvNV");
extern void ( * glBeginVideoCaptureNV) (GLuint video_capture_slot) __asm__("__glewBeginVideoCaptureNV");
extern void ( * glBindVideoCaptureStreamBufferNV) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset) __asm__("__glewBindVideoCaptureStreamBufferNV");
extern void ( * glBindVideoCaptureStreamTextureNV) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture) __asm__("__glewBindVideoCaptureStreamTextureNV");
extern void ( * glEndVideoCaptureNV) (GLuint video_capture_slot) __asm__("__glewEndVideoCaptureNV");
extern void ( * glGetVideoCaptureStreamdvNV) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble* params) __asm__("__glewGetVideoCaptureStreamdvNV");
extern void ( * glGetVideoCaptureStreamfvNV) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat* params) __asm__("__glewGetVideoCaptureStreamfvNV");
extern void ( * glGetVideoCaptureStreamivNV) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint* params) __asm__("__glewGetVideoCaptureStreamivNV");
extern void ( * glGetVideoCaptureivNV) (GLuint video_capture_slot, GLenum pname, GLint* params) __asm__("__glewGetVideoCaptureivNV");
extern GLenum ( * glVideoCaptureNV) (GLuint video_capture_slot, GLuint* sequence_num, GLuint64EXT *capture_time) __asm__("__glewVideoCaptureNV");
extern void ( * glVideoCaptureStreamParameterdvNV) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble* params) __asm__("__glewVideoCaptureStreamParameterdvNV");
extern void ( * glVideoCaptureStreamParameterfvNV) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat* params) __asm__("__glewVideoCaptureStreamParameterfvNV");
extern void ( * glVideoCaptureStreamParameterivNV) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint* params) __asm__("__glewVideoCaptureStreamParameterivNV");
extern void ( * glClearDepthfOES) (GLclampf depth) __asm__("__glewClearDepthfOES");
extern void ( * glClipPlanefOES) (GLenum plane, const GLfloat* equation) __asm__("__glewClipPlanefOES");
extern void ( * glDepthRangefOES) (GLclampf n, GLclampf f) __asm__("__glewDepthRangefOES");
extern void ( * glFrustumfOES) (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) __asm__("__glewFrustumfOES");
extern void ( * glGetClipPlanefOES) (GLenum plane, GLfloat* equation) __asm__("__glewGetClipPlanefOES");
extern void ( * glOrthofOES) (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) __asm__("__glewOrthofOES");
extern void ( * glAlphaFuncx) (GLenum func, GLclampx ref) __asm__("__glewAlphaFuncx");
extern void ( * glClearColorx) (GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha) __asm__("__glewClearColorx");
extern void ( * glClearDepthx) (GLclampx depth) __asm__("__glewClearDepthx");
extern void ( * glColor4x) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) __asm__("__glewColor4x");
extern void ( * glDepthRangex) (GLclampx zNear, GLclampx zFar) __asm__("__glewDepthRangex");
extern void ( * glFogx) (GLenum pname, GLfixed param) __asm__("__glewFogx");
extern void ( * glFogxv) (GLenum pname, const GLfixed* params) __asm__("__glewFogxv");
extern void ( * glFrustumf) (GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar) __asm__("__glewFrustumf");
extern void ( * glFrustumx) (GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar) __asm__("__glewFrustumx");
extern void ( * glLightModelx) (GLenum pname, GLfixed param) __asm__("__glewLightModelx");
extern void ( * glLightModelxv) (GLenum pname, const GLfixed* params) __asm__("__glewLightModelxv");
extern void ( * glLightx) (GLenum light, GLenum pname, GLfixed param) __asm__("__glewLightx");
extern void ( * glLightxv) (GLenum light, GLenum pname, const GLfixed* params) __asm__("__glewLightxv");
extern void ( * glLineWidthx) (GLfixed width) __asm__("__glewLineWidthx");
extern void ( * glLoadMatrixx) (const GLfixed* m) __asm__("__glewLoadMatrixx");
extern void ( * glMaterialx) (GLenum face, GLenum pname, GLfixed param) __asm__("__glewMaterialx");
extern void ( * glMaterialxv) (GLenum face, GLenum pname, const GLfixed* params) __asm__("__glewMaterialxv");
extern void ( * glMultMatrixx) (const GLfixed* m) __asm__("__glewMultMatrixx");
extern void ( * glMultiTexCoord4x) (GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q) __asm__("__glewMultiTexCoord4x");
extern void ( * glNormal3x) (GLfixed nx, GLfixed ny, GLfixed nz) __asm__("__glewNormal3x");
extern void ( * glOrthof) (GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar) __asm__("__glewOrthof");
extern void ( * glOrthox) (GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar) __asm__("__glewOrthox");
extern void ( * glPointSizex) (GLfixed size) __asm__("__glewPointSizex");
extern void ( * glPolygonOffsetx) (GLfixed factor, GLfixed units) __asm__("__glewPolygonOffsetx");
extern void ( * glRotatex) (GLfixed angle, GLfixed x, GLfixed y, GLfixed z) __asm__("__glewRotatex");
extern void ( * glSampleCoveragex) (GLclampx value, GLboolean invert) __asm__("__glewSampleCoveragex");
extern void ( * glScalex) (GLfixed x, GLfixed y, GLfixed z) __asm__("__glewScalex");
extern void ( * glTexEnvx) (GLenum target, GLenum pname, GLfixed param) __asm__("__glewTexEnvx");
extern void ( * glTexEnvxv) (GLenum target, GLenum pname, const GLfixed* params) __asm__("__glewTexEnvxv");
extern void ( * glTexParameterx) (GLenum target, GLenum pname, GLfixed param) __asm__("__glewTexParameterx");
extern void ( * glTranslatex) (GLfixed x, GLfixed y, GLfixed z) __asm__("__glewTranslatex");
extern void ( * glClipPlanef) (GLenum plane, const GLfloat* equation) __asm__("__glewClipPlanef");
extern void ( * glClipPlanex) (GLenum plane, const GLfixed* equation) __asm__("__glewClipPlanex");
extern void ( * glGetClipPlanef) (GLenum pname, GLfloat eqn[4]) __asm__("__glewGetClipPlanef");
extern void ( * glGetClipPlanex) (GLenum pname, GLfixed eqn[4]) __asm__("__glewGetClipPlanex");
extern void ( * glGetFixedv) (GLenum pname, GLfixed* params) __asm__("__glewGetFixedv");
extern void ( * glGetLightxv) (GLenum light, GLenum pname, GLfixed* params) __asm__("__glewGetLightxv");
extern void ( * glGetMaterialxv) (GLenum face, GLenum pname, GLfixed* params) __asm__("__glewGetMaterialxv");
extern void ( * glGetTexEnvxv) (GLenum env, GLenum pname, GLfixed* params) __asm__("__glewGetTexEnvxv");
extern void ( * glGetTexParameterxv) (GLenum target, GLenum pname, GLfixed* params) __asm__("__glewGetTexParameterxv");
extern void ( * glPointParameterx) (GLenum pname, GLfixed param) __asm__("__glewPointParameterx");
extern void ( * glPointParameterxv) (GLenum pname, const GLfixed* params) __asm__("__glewPointParameterxv");
extern void ( * glPointSizePointerOES) (GLenum type, GLsizei stride, const void *pointer) __asm__("__glewPointSizePointerOES");
extern void ( * glTexParameterxv) (GLenum target, GLenum pname, const GLfixed* params) __asm__("__glewTexParameterxv");
extern const GLchar* ( * glErrorStringREGAL) (GLenum error) __asm__("__glewErrorStringREGAL");
extern GLboolean ( * glGetExtensionREGAL) (const GLchar* ext) __asm__("__glewGetExtensionREGAL");
extern GLboolean ( * glIsSupportedREGAL) (const GLchar* ext) __asm__("__glewIsSupportedREGAL");
extern void ( * glLogMessageCallbackREGAL) (GLLOGPROCREGAL callback) __asm__("__glewLogMessageCallbackREGAL");
extern void * ( * glGetProcAddressREGAL) (const GLchar *name) __asm__("__glewGetProcAddressREGAL");
extern void ( * glDetailTexFuncSGIS) (GLenum target, GLsizei n, const GLfloat* points) __asm__("__glewDetailTexFuncSGIS");
extern void ( * glGetDetailTexFuncSGIS) (GLenum target, GLfloat* points) __asm__("__glewGetDetailTexFuncSGIS");
extern void ( * glFogFuncSGIS) (GLsizei n, const GLfloat* points) __asm__("__glewFogFuncSGIS");
extern void ( * glGetFogFuncSGIS) (GLfloat* points) __asm__("__glewGetFogFuncSGIS");
extern void ( * glSampleMaskSGIS) (GLclampf value, GLboolean invert) __asm__("__glewSampleMaskSGIS");
extern void ( * glSamplePatternSGIS) (GLenum pattern) __asm__("__glewSamplePatternSGIS");
extern void ( * glGetSharpenTexFuncSGIS) (GLenum target, GLfloat* points) __asm__("__glewGetSharpenTexFuncSGIS");
extern void ( * glSharpenTexFuncSGIS) (GLenum target, GLsizei n, const GLfloat* points) __asm__("__glewSharpenTexFuncSGIS");
extern void ( * glTexImage4DSGIS) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei extent, GLint border, GLenum format, GLenum type, const void *pixels) __asm__("__glewTexImage4DSGIS");
extern void ( * glTexSubImage4DSGIS) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei extent, GLenum format, GLenum type, const void *pixels) __asm__("__glewTexSubImage4DSGIS");
extern void ( * glGetTexFilterFuncSGIS) (GLenum target, GLenum filter, GLfloat* weights) __asm__("__glewGetTexFilterFuncSGIS");
extern void ( * glTexFilterFuncSGIS) (GLenum target, GLenum filter, GLsizei n, const GLfloat* weights) __asm__("__glewTexFilterFuncSGIS");
extern void ( * glAsyncMarkerSGIX) (GLuint marker) __asm__("__glewAsyncMarkerSGIX");
extern void ( * glDeleteAsyncMarkersSGIX) (GLuint marker, GLsizei range) __asm__("__glewDeleteAsyncMarkersSGIX");
extern GLint ( * glFinishAsyncSGIX) (GLuint* markerp) __asm__("__glewFinishAsyncSGIX");
extern GLuint ( * glGenAsyncMarkersSGIX) (GLsizei range) __asm__("__glewGenAsyncMarkersSGIX");
extern GLboolean ( * glIsAsyncMarkerSGIX) (GLuint marker) __asm__("__glewIsAsyncMarkerSGIX");
extern GLint ( * glPollAsyncSGIX) (GLuint* markerp) __asm__("__glewPollAsyncSGIX");
extern void ( * glFlushRasterSGIX) (void) __asm__("__glewFlushRasterSGIX");
extern void ( * glTextureFogSGIX) (GLenum pname) __asm__("__glewTextureFogSGIX");
extern void ( * glFragmentColorMaterialSGIX) (GLenum face, GLenum mode) __asm__("__glewFragmentColorMaterialSGIX");
extern void ( * glFragmentLightModelfSGIX) (GLenum pname, GLfloat param) __asm__("__glewFragmentLightModelfSGIX");
extern void ( * glFragmentLightModelfvSGIX) (GLenum pname, GLfloat* params) __asm__("__glewFragmentLightModelfvSGIX");
extern void ( * glFragmentLightModeliSGIX) (GLenum pname, GLint param) __asm__("__glewFragmentLightModeliSGIX");
extern void ( * glFragmentLightModelivSGIX) (GLenum pname, GLint* params) __asm__("__glewFragmentLightModelivSGIX");
extern void ( * glFragmentLightfSGIX) (GLenum light, GLenum pname, GLfloat param) __asm__("__glewFragmentLightfSGIX");
extern void ( * glFragmentLightfvSGIX) (GLenum light, GLenum pname, GLfloat* params) __asm__("__glewFragmentLightfvSGIX");
extern void ( * glFragmentLightiSGIX) (GLenum light, GLenum pname, GLint param) __asm__("__glewFragmentLightiSGIX");
extern void ( * glFragmentLightivSGIX) (GLenum light, GLenum pname, GLint* params) __asm__("__glewFragmentLightivSGIX");
extern void ( * glFragmentMaterialfSGIX) (GLenum face, GLenum pname, const GLfloat param) __asm__("__glewFragmentMaterialfSGIX");
extern void ( * glFragmentMaterialfvSGIX) (GLenum face, GLenum pname, const GLfloat* params) __asm__("__glewFragmentMaterialfvSGIX");
extern void ( * glFragmentMaterialiSGIX) (GLenum face, GLenum pname, const GLint param) __asm__("__glewFragmentMaterialiSGIX");
extern void ( * glFragmentMaterialivSGIX) (GLenum face, GLenum pname, const GLint* params) __asm__("__glewFragmentMaterialivSGIX");
extern void ( * glGetFragmentLightfvSGIX) (GLenum light, GLenum value, GLfloat* data) __asm__("__glewGetFragmentLightfvSGIX");
extern void ( * glGetFragmentLightivSGIX) (GLenum light, GLenum value, GLint* data) __asm__("__glewGetFragmentLightivSGIX");
extern void ( * glGetFragmentMaterialfvSGIX) (GLenum face, GLenum pname, const GLfloat* data) __asm__("__glewGetFragmentMaterialfvSGIX");
extern void ( * glGetFragmentMaterialivSGIX) (GLenum face, GLenum pname, const GLint* data) __asm__("__glewGetFragmentMaterialivSGIX");
extern void ( * glFrameZoomSGIX) (GLint factor) __asm__("__glewFrameZoomSGIX");
extern void ( * glPixelTexGenSGIX) (GLenum mode) __asm__("__glewPixelTexGenSGIX");
extern void ( * glReferencePlaneSGIX) (const GLdouble* equation) __asm__("__glewReferencePlaneSGIX");
extern void ( * glSpriteParameterfSGIX) (GLenum pname, GLfloat param) __asm__("__glewSpriteParameterfSGIX");
extern void ( * glSpriteParameterfvSGIX) (GLenum pname, GLfloat* params) __asm__("__glewSpriteParameterfvSGIX");
extern void ( * glSpriteParameteriSGIX) (GLenum pname, GLint param) __asm__("__glewSpriteParameteriSGIX");
extern void ( * glSpriteParameterivSGIX) (GLenum pname, GLint* params) __asm__("__glewSpriteParameterivSGIX");
extern void ( * glTagSampleBufferSGIX) (void) __asm__("__glewTagSampleBufferSGIX");
extern void ( * glColorTableParameterfvSGI) (GLenum target, GLenum pname, const GLfloat* params) __asm__("__glewColorTableParameterfvSGI");
extern void ( * glColorTableParameterivSGI) (GLenum target, GLenum pname, const GLint* params) __asm__("__glewColorTableParameterivSGI");
extern void ( * glColorTableSGI) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table) __asm__("__glewColorTableSGI");
extern void ( * glCopyColorTableSGI) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) __asm__("__glewCopyColorTableSGI");
extern void ( * glGetColorTableParameterfvSGI) (GLenum target, GLenum pname, GLfloat* params) __asm__("__glewGetColorTableParameterfvSGI");
extern void ( * glGetColorTableParameterivSGI) (GLenum target, GLenum pname, GLint* params) __asm__("__glewGetColorTableParameterivSGI");
extern void ( * glGetColorTableSGI) (GLenum target, GLenum format, GLenum type, void *table) __asm__("__glewGetColorTableSGI");
extern void ( * glFinishTextureSUNX) (void) __asm__("__glewFinishTextureSUNX");
extern void ( * glGlobalAlphaFactorbSUN) (GLbyte factor) __asm__("__glewGlobalAlphaFactorbSUN");
extern void ( * glGlobalAlphaFactordSUN) (GLdouble factor) __asm__("__glewGlobalAlphaFactordSUN");
extern void ( * glGlobalAlphaFactorfSUN) (GLfloat factor) __asm__("__glewGlobalAlphaFactorfSUN");
extern void ( * glGlobalAlphaFactoriSUN) (GLint factor) __asm__("__glewGlobalAlphaFactoriSUN");
extern void ( * glGlobalAlphaFactorsSUN) (GLshort factor) __asm__("__glewGlobalAlphaFactorsSUN");
extern void ( * glGlobalAlphaFactorubSUN) (GLubyte factor) __asm__("__glewGlobalAlphaFactorubSUN");
extern void ( * glGlobalAlphaFactoruiSUN) (GLuint factor) __asm__("__glewGlobalAlphaFactoruiSUN");
extern void ( * glGlobalAlphaFactorusSUN) (GLushort factor) __asm__("__glewGlobalAlphaFactorusSUN");
extern void ( * glReadVideoPixelsSUN) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels) __asm__("__glewReadVideoPixelsSUN");
extern void ( * glReplacementCodePointerSUN) (GLenum type, GLsizei stride, const void *pointer) __asm__("__glewReplacementCodePointerSUN");
extern void ( * glReplacementCodeubSUN) (GLubyte code) __asm__("__glewReplacementCodeubSUN");
extern void ( * glReplacementCodeubvSUN) (const GLubyte* code) __asm__("__glewReplacementCodeubvSUN");
extern void ( * glReplacementCodeuiSUN) (GLuint code) __asm__("__glewReplacementCodeuiSUN");
extern void ( * glReplacementCodeuivSUN) (const GLuint* code) __asm__("__glewReplacementCodeuivSUN");
extern void ( * glReplacementCodeusSUN) (GLushort code) __asm__("__glewReplacementCodeusSUN");
extern void ( * glReplacementCodeusvSUN) (const GLushort* code) __asm__("__glewReplacementCodeusvSUN");
extern void ( * glColor3fVertex3fSUN) (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) __asm__("__glewColor3fVertex3fSUN");
extern void ( * glColor3fVertex3fvSUN) (const GLfloat* c, const GLfloat *v) __asm__("__glewColor3fVertex3fvSUN");
extern void ( * glColor4fNormal3fVertex3fSUN) (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) __asm__("__glewColor4fNormal3fVertex3fSUN");
extern void ( * glColor4fNormal3fVertex3fvSUN) (const GLfloat* c, const GLfloat *n, const GLfloat *v) __asm__("__glewColor4fNormal3fVertex3fvSUN");
extern void ( * glColor4ubVertex2fSUN) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y) __asm__("__glewColor4ubVertex2fSUN");
extern void ( * glColor4ubVertex2fvSUN) (const GLubyte* c, const GLfloat *v) __asm__("__glewColor4ubVertex2fvSUN");
extern void ( * glColor4ubVertex3fSUN) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) __asm__("__glewColor4ubVertex3fSUN");
extern void ( * glColor4ubVertex3fvSUN) (const GLubyte* c, const GLfloat *v) __asm__("__glewColor4ubVertex3fvSUN");
extern void ( * glNormal3fVertex3fSUN) (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) __asm__("__glewNormal3fVertex3fSUN");
extern void ( * glNormal3fVertex3fvSUN) (const GLfloat* n, const GLfloat *v) __asm__("__glewNormal3fVertex3fvSUN");
extern void ( * glReplacementCodeuiColor3fVertex3fSUN) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) __asm__("__glewReplacementCodeuiColor3fVertex3fSUN");
extern void ( * glReplacementCodeuiColor3fVertex3fvSUN) (const GLuint* rc, const GLfloat *c, const GLfloat *v) __asm__("__glewReplacementCodeuiColor3fVertex3fvSUN");
extern void ( * glReplacementCodeuiColor4fNormal3fVertex3fSUN) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) __asm__("__glewReplacementCodeuiColor4fNormal3fVertex3fSUN");
extern void ( * glReplacementCodeuiColor4fNormal3fVertex3fvSUN) (const GLuint* rc, const GLfloat *c, const GLfloat *n, const GLfloat *v) __asm__("__glewReplacementCodeuiColor4fNormal3fVertex3fvSUN");
extern void ( * glReplacementCodeuiColor4ubVertex3fSUN) (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) __asm__("__glewReplacementCodeuiColor4ubVertex3fSUN");
extern void ( * glReplacementCodeuiColor4ubVertex3fvSUN) (const GLuint* rc, const GLubyte *c, const GLfloat *v) __asm__("__glewReplacementCodeuiColor4ubVertex3fvSUN");
extern void ( * glReplacementCodeuiNormal3fVertex3fSUN) (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) __asm__("__glewReplacementCodeuiNormal3fVertex3fSUN");
extern void ( * glReplacementCodeuiNormal3fVertex3fvSUN) (const GLuint* rc, const GLfloat *n, const GLfloat *v) __asm__("__glewReplacementCodeuiNormal3fVertex3fvSUN");
extern void ( * glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN) (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) __asm__("__glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN");
extern void ( * glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN) (const GLuint* rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v) __asm__("__glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN");
extern void ( * glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN) (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) __asm__("__glewReplacementCodeuiTexCoord2fNormal3fVertex3fSUN");
extern void ( * glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN) (const GLuint* rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v) __asm__("__glewReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN");
extern void ( * glReplacementCodeuiTexCoord2fVertex3fSUN) (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) __asm__("__glewReplacementCodeuiTexCoord2fVertex3fSUN");
extern void ( * glReplacementCodeuiTexCoord2fVertex3fvSUN) (const GLuint* rc, const GLfloat *tc, const GLfloat *v) __asm__("__glewReplacementCodeuiTexCoord2fVertex3fvSUN");
extern void ( * glReplacementCodeuiVertex3fSUN) (GLuint rc, GLfloat x, GLfloat y, GLfloat z) __asm__("__glewReplacementCodeuiVertex3fSUN");
extern void ( * glReplacementCodeuiVertex3fvSUN) (const GLuint* rc, const GLfloat *v) __asm__("__glewReplacementCodeuiVertex3fvSUN");
extern void ( * glTexCoord2fColor3fVertex3fSUN) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) __asm__("__glewTexCoord2fColor3fVertex3fSUN");
extern void ( * glTexCoord2fColor3fVertex3fvSUN) (const GLfloat* tc, const GLfloat *c, const GLfloat *v) __asm__("__glewTexCoord2fColor3fVertex3fvSUN");
extern void ( * glTexCoord2fColor4fNormal3fVertex3fSUN) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) __asm__("__glewTexCoord2fColor4fNormal3fVertex3fSUN");
extern void ( * glTexCoord2fColor4fNormal3fVertex3fvSUN) (const GLfloat* tc, const GLfloat *c, const GLfloat *n, const GLfloat *v) __asm__("__glewTexCoord2fColor4fNormal3fVertex3fvSUN");
extern void ( * glTexCoord2fColor4ubVertex3fSUN) (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) __asm__("__glewTexCoord2fColor4ubVertex3fSUN");
extern void ( * glTexCoord2fColor4ubVertex3fvSUN) (const GLfloat* tc, const GLubyte *c, const GLfloat *v) __asm__("__glewTexCoord2fColor4ubVertex3fvSUN");
extern void ( * glTexCoord2fNormal3fVertex3fSUN) (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) __asm__("__glewTexCoord2fNormal3fVertex3fSUN");
extern void ( * glTexCoord2fNormal3fVertex3fvSUN) (const GLfloat* tc, const GLfloat *n, const GLfloat *v) __asm__("__glewTexCoord2fNormal3fVertex3fvSUN");
extern void ( * glTexCoord2fVertex3fSUN) (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) __asm__("__glewTexCoord2fVertex3fSUN");
extern void ( * glTexCoord2fVertex3fvSUN) (const GLfloat* tc, const GLfloat *v) __asm__("__glewTexCoord2fVertex3fvSUN");
extern void ( * glTexCoord4fColor4fNormal3fVertex4fSUN) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w) __asm__("__glewTexCoord4fColor4fNormal3fVertex4fSUN");
extern void ( * glTexCoord4fColor4fNormal3fVertex4fvSUN) (const GLfloat* tc, const GLfloat *c, const GLfloat *n, const GLfloat *v) __asm__("__glewTexCoord4fColor4fNormal3fVertex4fvSUN");
extern void ( * glTexCoord4fVertex4fSUN) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w) __asm__("__glewTexCoord4fVertex4fSUN");
extern void ( * glTexCoord4fVertex4fvSUN) (const GLfloat* tc, const GLfloat *v) __asm__("__glewTexCoord4fVertex4fvSUN");
extern void ( * glAddSwapHintRectWIN) (GLint x, GLint y, GLsizei width, GLsizei height) __asm__("__glewAddSwapHintRectWIN");
extern GLenum glewInit ();
extern GLboolean glewIsSupported (const char* name);

extern GLboolean __GLEW_VERSION_1_1;
extern GLboolean __GLEW_VERSION_1_2;
extern GLboolean __GLEW_VERSION_1_2_1;
extern GLboolean __GLEW_VERSION_1_3;
extern GLboolean __GLEW_VERSION_1_4;
extern GLboolean __GLEW_VERSION_1_5;
extern GLboolean __GLEW_VERSION_2_0;
extern GLboolean __GLEW_VERSION_2_1;
extern GLboolean __GLEW_VERSION_3_0;
extern GLboolean __GLEW_VERSION_3_1;
extern GLboolean __GLEW_VERSION_3_2;
extern GLboolean __GLEW_VERSION_3_3;
extern GLboolean __GLEW_VERSION_4_0;
extern GLboolean __GLEW_VERSION_4_1;
extern GLboolean __GLEW_VERSION_4_2;
extern GLboolean __GLEW_VERSION_4_3;
extern GLboolean __GLEW_VERSION_4_4;
extern GLboolean __GLEW_VERSION_4_5;
extern GLboolean __GLEW_3DFX_multisample;
extern GLboolean __GLEW_3DFX_tbuffer;
extern GLboolean __GLEW_3DFX_texture_compression_FXT1;
extern GLboolean __GLEW_AMD_blend_minmax_factor;
extern GLboolean __GLEW_AMD_conservative_depth;
extern GLboolean __GLEW_AMD_debug_output;
extern GLboolean __GLEW_AMD_depth_clamp_separate;
extern GLboolean __GLEW_AMD_draw_buffers_blend;
extern GLboolean __GLEW_AMD_gcn_shader;
extern GLboolean __GLEW_AMD_gpu_shader_int64;
extern GLboolean __GLEW_AMD_interleaved_elements;
extern GLboolean __GLEW_AMD_multi_draw_indirect;
extern GLboolean __GLEW_AMD_name_gen_delete;
extern GLboolean __GLEW_AMD_occlusion_query_event;
extern GLboolean __GLEW_AMD_performance_monitor;
extern GLboolean __GLEW_AMD_pinned_memory;
extern GLboolean __GLEW_AMD_query_buffer_object;
extern GLboolean __GLEW_AMD_sample_positions;
extern GLboolean __GLEW_AMD_seamless_cubemap_per_texture;
extern GLboolean __GLEW_AMD_shader_atomic_counter_ops;
extern GLboolean __GLEW_AMD_shader_stencil_export;
extern GLboolean __GLEW_AMD_shader_stencil_value_export;
extern GLboolean __GLEW_AMD_shader_trinary_minmax;
extern GLboolean __GLEW_AMD_sparse_texture;
extern GLboolean __GLEW_AMD_stencil_operation_extended;
extern GLboolean __GLEW_AMD_texture_texture4;
extern GLboolean __GLEW_AMD_transform_feedback3_lines_triangles;
extern GLboolean __GLEW_AMD_transform_feedback4;
extern GLboolean __GLEW_AMD_vertex_shader_layer;
extern GLboolean __GLEW_AMD_vertex_shader_tessellator;
extern GLboolean __GLEW_AMD_vertex_shader_viewport_index;
extern GLboolean __GLEW_ANGLE_depth_texture;
extern GLboolean __GLEW_ANGLE_framebuffer_blit;
extern GLboolean __GLEW_ANGLE_framebuffer_multisample;
extern GLboolean __GLEW_ANGLE_instanced_arrays;
extern GLboolean __GLEW_ANGLE_pack_reverse_row_order;
extern GLboolean __GLEW_ANGLE_program_binary;
extern GLboolean __GLEW_ANGLE_texture_compression_dxt1;
extern GLboolean __GLEW_ANGLE_texture_compression_dxt3;
extern GLboolean __GLEW_ANGLE_texture_compression_dxt5;
extern GLboolean __GLEW_ANGLE_texture_usage;
extern GLboolean __GLEW_ANGLE_timer_query;
extern GLboolean __GLEW_ANGLE_translated_shader_source;
extern GLboolean __GLEW_APPLE_aux_depth_stencil;
extern GLboolean __GLEW_APPLE_client_storage;
extern GLboolean __GLEW_APPLE_element_array;
extern GLboolean __GLEW_APPLE_fence;
extern GLboolean __GLEW_APPLE_float_pixels;
extern GLboolean __GLEW_APPLE_flush_buffer_range;
extern GLboolean __GLEW_APPLE_object_purgeable;
extern GLboolean __GLEW_APPLE_pixel_buffer;
extern GLboolean __GLEW_APPLE_rgb_422;
extern GLboolean __GLEW_APPLE_row_bytes;
extern GLboolean __GLEW_APPLE_specular_vector;
extern GLboolean __GLEW_APPLE_texture_range;
extern GLboolean __GLEW_APPLE_transform_hint;
extern GLboolean __GLEW_APPLE_vertex_array_object;
extern GLboolean __GLEW_APPLE_vertex_array_range;
extern GLboolean __GLEW_APPLE_vertex_program_evaluators;
extern GLboolean __GLEW_APPLE_ycbcr_422;
extern GLboolean __GLEW_ARB_ES2_compatibility;
extern GLboolean __GLEW_ARB_ES3_1_compatibility;
extern GLboolean __GLEW_ARB_ES3_compatibility;
extern GLboolean __GLEW_ARB_arrays_of_arrays;
extern GLboolean __GLEW_ARB_base_instance;
extern GLboolean __GLEW_ARB_bindless_texture;
extern GLboolean __GLEW_ARB_blend_func_extended;
extern GLboolean __GLEW_ARB_buffer_storage;
extern GLboolean __GLEW_ARB_cl_event;
extern GLboolean __GLEW_ARB_clear_buffer_object;
extern GLboolean __GLEW_ARB_clear_texture;
extern GLboolean __GLEW_ARB_clip_control;
extern GLboolean __GLEW_ARB_color_buffer_float;
extern GLboolean __GLEW_ARB_compatibility;
extern GLboolean __GLEW_ARB_compressed_texture_pixel_storage;
extern GLboolean __GLEW_ARB_compute_shader;
extern GLboolean __GLEW_ARB_compute_variable_group_size;
extern GLboolean __GLEW_ARB_conditional_render_inverted;
extern GLboolean __GLEW_ARB_conservative_depth;
extern GLboolean __GLEW_ARB_copy_buffer;
extern GLboolean __GLEW_ARB_copy_image;
extern GLboolean __GLEW_ARB_cull_distance;
extern GLboolean __GLEW_ARB_debug_output;
extern GLboolean __GLEW_ARB_depth_buffer_float;
extern GLboolean __GLEW_ARB_depth_clamp;
extern GLboolean __GLEW_ARB_depth_texture;
extern GLboolean __GLEW_ARB_derivative_control;
extern GLboolean __GLEW_ARB_direct_state_access;
extern GLboolean __GLEW_ARB_draw_buffers;
extern GLboolean __GLEW_ARB_draw_buffers_blend;
extern GLboolean __GLEW_ARB_draw_elements_base_vertex;
extern GLboolean __GLEW_ARB_draw_indirect;
extern GLboolean __GLEW_ARB_draw_instanced;
extern GLboolean __GLEW_ARB_enhanced_layouts;
extern GLboolean __GLEW_ARB_explicit_attrib_location;
extern GLboolean __GLEW_ARB_explicit_uniform_location;
extern GLboolean __GLEW_ARB_fragment_coord_conventions;
extern GLboolean __GLEW_ARB_fragment_layer_viewport;
extern GLboolean __GLEW_ARB_fragment_program;
extern GLboolean __GLEW_ARB_fragment_program_shadow;
extern GLboolean __GLEW_ARB_fragment_shader;
extern GLboolean __GLEW_ARB_framebuffer_no_attachments;
extern GLboolean __GLEW_ARB_framebuffer_object;
extern GLboolean __GLEW_ARB_framebuffer_sRGB;
extern GLboolean __GLEW_ARB_geometry_shader4;
extern GLboolean __GLEW_ARB_get_program_binary;
extern GLboolean __GLEW_ARB_get_texture_sub_image;
extern GLboolean __GLEW_ARB_gpu_shader5;
extern GLboolean __GLEW_ARB_gpu_shader_fp64;
extern GLboolean __GLEW_ARB_half_float_pixel;
extern GLboolean __GLEW_ARB_half_float_vertex;
extern GLboolean __GLEW_ARB_imaging;
extern GLboolean __GLEW_ARB_indirect_parameters;
extern GLboolean __GLEW_ARB_instanced_arrays;
extern GLboolean __GLEW_ARB_internalformat_query;
extern GLboolean __GLEW_ARB_internalformat_query2;
extern GLboolean __GLEW_ARB_invalidate_subdata;
extern GLboolean __GLEW_ARB_map_buffer_alignment;
extern GLboolean __GLEW_ARB_map_buffer_range;
extern GLboolean __GLEW_ARB_matrix_palette;
extern GLboolean __GLEW_ARB_multi_bind;
extern GLboolean __GLEW_ARB_multi_draw_indirect;
extern GLboolean __GLEW_ARB_multisample;
extern GLboolean __GLEW_ARB_multitexture;
extern GLboolean __GLEW_ARB_occlusion_query;
extern GLboolean __GLEW_ARB_occlusion_query2;
extern GLboolean __GLEW_ARB_pipeline_statistics_query;
extern GLboolean __GLEW_ARB_pixel_buffer_object;
extern GLboolean __GLEW_ARB_point_parameters;
extern GLboolean __GLEW_ARB_point_sprite;
extern GLboolean __GLEW_ARB_program_interface_query;
extern GLboolean __GLEW_ARB_provoking_vertex;
extern GLboolean __GLEW_ARB_query_buffer_object;
extern GLboolean __GLEW_ARB_robust_buffer_access_behavior;
extern GLboolean __GLEW_ARB_robustness;
extern GLboolean __GLEW_ARB_robustness_application_isolation;
extern GLboolean __GLEW_ARB_robustness_share_group_isolation;
extern GLboolean __GLEW_ARB_sample_shading;
extern GLboolean __GLEW_ARB_sampler_objects;
extern GLboolean __GLEW_ARB_seamless_cube_map;
extern GLboolean __GLEW_ARB_seamless_cubemap_per_texture;
extern GLboolean __GLEW_ARB_separate_shader_objects;
extern GLboolean __GLEW_ARB_shader_atomic_counters;
extern GLboolean __GLEW_ARB_shader_bit_encoding;
extern GLboolean __GLEW_ARB_shader_draw_parameters;
extern GLboolean __GLEW_ARB_shader_group_vote;
extern GLboolean __GLEW_ARB_shader_image_load_store;
extern GLboolean __GLEW_ARB_shader_image_size;
extern GLboolean __GLEW_ARB_shader_objects;
extern GLboolean __GLEW_ARB_shader_precision;
extern GLboolean __GLEW_ARB_shader_stencil_export;
extern GLboolean __GLEW_ARB_shader_storage_buffer_object;
extern GLboolean __GLEW_ARB_shader_subroutine;
extern GLboolean __GLEW_ARB_shader_texture_image_samples;
extern GLboolean __GLEW_ARB_shader_texture_lod;
extern GLboolean __GLEW_ARB_shading_language_100;
extern GLboolean __GLEW_ARB_shading_language_420pack;
extern GLboolean __GLEW_ARB_shading_language_include;
extern GLboolean __GLEW_ARB_shading_language_packing;
extern GLboolean __GLEW_ARB_shadow;
extern GLboolean __GLEW_ARB_shadow_ambient;
extern GLboolean __GLEW_ARB_sparse_buffer;
extern GLboolean __GLEW_ARB_sparse_texture;
extern GLboolean __GLEW_ARB_stencil_texturing;
extern GLboolean __GLEW_ARB_sync;
extern GLboolean __GLEW_ARB_tessellation_shader;
extern GLboolean __GLEW_ARB_texture_barrier;
extern GLboolean __GLEW_ARB_texture_border_clamp;
extern GLboolean __GLEW_ARB_texture_buffer_object;
extern GLboolean __GLEW_ARB_texture_buffer_object_rgb32;
extern GLboolean __GLEW_ARB_texture_buffer_range;
extern GLboolean __GLEW_ARB_texture_compression;
extern GLboolean __GLEW_ARB_texture_compression_bptc;
extern GLboolean __GLEW_ARB_texture_compression_rgtc;
extern GLboolean __GLEW_ARB_texture_cube_map;
extern GLboolean __GLEW_ARB_texture_cube_map_array;
extern GLboolean __GLEW_ARB_texture_env_add;
extern GLboolean __GLEW_ARB_texture_env_combine;
extern GLboolean __GLEW_ARB_texture_env_crossbar;
extern GLboolean __GLEW_ARB_texture_env_dot3;
extern GLboolean __GLEW_ARB_texture_float;
extern GLboolean __GLEW_ARB_texture_gather;
extern GLboolean __GLEW_ARB_texture_mirror_clamp_to_edge;
extern GLboolean __GLEW_ARB_texture_mirrored_repeat;
extern GLboolean __GLEW_ARB_texture_multisample;
extern GLboolean __GLEW_ARB_texture_non_power_of_two;
extern GLboolean __GLEW_ARB_texture_query_levels;
extern GLboolean __GLEW_ARB_texture_query_lod;
extern GLboolean __GLEW_ARB_texture_rectangle;
extern GLboolean __GLEW_ARB_texture_rg;
extern GLboolean __GLEW_ARB_texture_rgb10_a2ui;
extern GLboolean __GLEW_ARB_texture_stencil8;
extern GLboolean __GLEW_ARB_texture_storage;
extern GLboolean __GLEW_ARB_texture_storage_multisample;
extern GLboolean __GLEW_ARB_texture_swizzle;
extern GLboolean __GLEW_ARB_texture_view;
extern GLboolean __GLEW_ARB_timer_query;
extern GLboolean __GLEW_ARB_transform_feedback2;
extern GLboolean __GLEW_ARB_transform_feedback3;
extern GLboolean __GLEW_ARB_transform_feedback_instanced;
extern GLboolean __GLEW_ARB_transform_feedback_overflow_query;
extern GLboolean __GLEW_ARB_transpose_matrix;
extern GLboolean __GLEW_ARB_uniform_buffer_object;
extern GLboolean __GLEW_ARB_vertex_array_bgra;
extern GLboolean __GLEW_ARB_vertex_array_object;
extern GLboolean __GLEW_ARB_vertex_attrib_64bit;
extern GLboolean __GLEW_ARB_vertex_attrib_binding;
extern GLboolean __GLEW_ARB_vertex_blend;
extern GLboolean __GLEW_ARB_vertex_buffer_object;
extern GLboolean __GLEW_ARB_vertex_program;
extern GLboolean __GLEW_ARB_vertex_shader;
extern GLboolean __GLEW_ARB_vertex_type_10f_11f_11f_rev;
extern GLboolean __GLEW_ARB_vertex_type_2_10_10_10_rev;
extern GLboolean __GLEW_ARB_viewport_array;
extern GLboolean __GLEW_ARB_window_pos;
extern GLboolean __GLEW_ATIX_point_sprites;
extern GLboolean __GLEW_ATIX_texture_env_combine3;
extern GLboolean __GLEW_ATIX_texture_env_route;
extern GLboolean __GLEW_ATIX_vertex_shader_output_point_size;
extern GLboolean __GLEW_ATI_draw_buffers;
extern GLboolean __GLEW_ATI_element_array;
extern GLboolean __GLEW_ATI_envmap_bumpmap;
extern GLboolean __GLEW_ATI_fragment_shader;
extern GLboolean __GLEW_ATI_map_object_buffer;
extern GLboolean __GLEW_ATI_meminfo;
extern GLboolean __GLEW_ATI_pn_triangles;
extern GLboolean __GLEW_ATI_separate_stencil;
extern GLboolean __GLEW_ATI_shader_texture_lod;
extern GLboolean __GLEW_ATI_text_fragment_shader;
extern GLboolean __GLEW_ATI_texture_compression_3dc;
extern GLboolean __GLEW_ATI_texture_env_combine3;
extern GLboolean __GLEW_ATI_texture_float;
extern GLboolean __GLEW_ATI_texture_mirror_once;
extern GLboolean __GLEW_ATI_vertex_array_object;
extern GLboolean __GLEW_ATI_vertex_attrib_array_object;
extern GLboolean __GLEW_ATI_vertex_streams;
extern GLboolean __GLEW_EXT_422_pixels;
extern GLboolean __GLEW_EXT_Cg_shader;
extern GLboolean __GLEW_EXT_abgr;
extern GLboolean __GLEW_EXT_bgra;
extern GLboolean __GLEW_EXT_bindable_uniform;
extern GLboolean __GLEW_EXT_blend_color;
extern GLboolean __GLEW_EXT_blend_equation_separate;
extern GLboolean __GLEW_EXT_blend_func_separate;
extern GLboolean __GLEW_EXT_blend_logic_op;
extern GLboolean __GLEW_EXT_blend_minmax;
extern GLboolean __GLEW_EXT_blend_subtract;
extern GLboolean __GLEW_EXT_clip_volume_hint;
extern GLboolean __GLEW_EXT_cmyka;
extern GLboolean __GLEW_EXT_color_subtable;
extern GLboolean __GLEW_EXT_compiled_vertex_array;
extern GLboolean __GLEW_EXT_convolution;
extern GLboolean __GLEW_EXT_coordinate_frame;
extern GLboolean __GLEW_EXT_copy_texture;
extern GLboolean __GLEW_EXT_cull_vertex;
extern GLboolean __GLEW_EXT_debug_label;
extern GLboolean __GLEW_EXT_debug_marker;
extern GLboolean __GLEW_EXT_depth_bounds_test;
extern GLboolean __GLEW_EXT_direct_state_access;
extern GLboolean __GLEW_EXT_draw_buffers2;
extern GLboolean __GLEW_EXT_draw_instanced;
extern GLboolean __GLEW_EXT_draw_range_elements;
extern GLboolean __GLEW_EXT_fog_coord;
extern GLboolean __GLEW_EXT_fragment_lighting;
extern GLboolean __GLEW_EXT_framebuffer_blit;
extern GLboolean __GLEW_EXT_framebuffer_multisample;
extern GLboolean __GLEW_EXT_framebuffer_multisample_blit_scaled;
extern GLboolean __GLEW_EXT_framebuffer_object;
extern GLboolean __GLEW_EXT_framebuffer_sRGB;
extern GLboolean __GLEW_EXT_geometry_shader4;
extern GLboolean __GLEW_EXT_gpu_program_parameters;
extern GLboolean __GLEW_EXT_gpu_shader4;
extern GLboolean __GLEW_EXT_histogram;
extern GLboolean __GLEW_EXT_index_array_formats;
extern GLboolean __GLEW_EXT_index_func;
extern GLboolean __GLEW_EXT_index_material;
extern GLboolean __GLEW_EXT_index_texture;
extern GLboolean __GLEW_EXT_light_texture;
extern GLboolean __GLEW_EXT_misc_attribute;
extern GLboolean __GLEW_EXT_multi_draw_arrays;
extern GLboolean __GLEW_EXT_multisample;
extern GLboolean __GLEW_EXT_packed_depth_stencil;
extern GLboolean __GLEW_EXT_packed_float;
extern GLboolean __GLEW_EXT_packed_pixels;
extern GLboolean __GLEW_EXT_paletted_texture;
extern GLboolean __GLEW_EXT_pixel_buffer_object;
extern GLboolean __GLEW_EXT_pixel_transform;
extern GLboolean __GLEW_EXT_pixel_transform_color_table;
extern GLboolean __GLEW_EXT_point_parameters;
extern GLboolean __GLEW_EXT_polygon_offset;
extern GLboolean __GLEW_EXT_polygon_offset_clamp;
extern GLboolean __GLEW_EXT_post_depth_coverage;
extern GLboolean __GLEW_EXT_provoking_vertex;
extern GLboolean __GLEW_EXT_raster_multisample;
extern GLboolean __GLEW_EXT_rescale_normal;
extern GLboolean __GLEW_EXT_scene_marker;
extern GLboolean __GLEW_EXT_secondary_color;
extern GLboolean __GLEW_EXT_separate_shader_objects;
extern GLboolean __GLEW_EXT_separate_specular_color;
extern GLboolean __GLEW_EXT_shader_image_load_formatted;
extern GLboolean __GLEW_EXT_shader_image_load_store;
extern GLboolean __GLEW_EXT_shader_integer_mix;
extern GLboolean __GLEW_EXT_shadow_funcs;
extern GLboolean __GLEW_EXT_shared_texture_palette;
extern GLboolean __GLEW_EXT_sparse_texture2;
extern GLboolean __GLEW_EXT_stencil_clear_tag;
extern GLboolean __GLEW_EXT_stencil_two_side;
extern GLboolean __GLEW_EXT_stencil_wrap;
extern GLboolean __GLEW_EXT_subtexture;
extern GLboolean __GLEW_EXT_texture;
extern GLboolean __GLEW_EXT_texture3D;
extern GLboolean __GLEW_EXT_texture_array;
extern GLboolean __GLEW_EXT_texture_buffer_object;
extern GLboolean __GLEW_EXT_texture_compression_dxt1;
extern GLboolean __GLEW_EXT_texture_compression_latc;
extern GLboolean __GLEW_EXT_texture_compression_rgtc;
extern GLboolean __GLEW_EXT_texture_compression_s3tc;
extern GLboolean __GLEW_EXT_texture_cube_map;
extern GLboolean __GLEW_EXT_texture_edge_clamp;
extern GLboolean __GLEW_EXT_texture_env;
extern GLboolean __GLEW_EXT_texture_env_add;
extern GLboolean __GLEW_EXT_texture_env_combine;
extern GLboolean __GLEW_EXT_texture_env_dot3;
extern GLboolean __GLEW_EXT_texture_filter_anisotropic;
extern GLboolean __GLEW_EXT_texture_filter_minmax;
extern GLboolean __GLEW_EXT_texture_integer;
extern GLboolean __GLEW_EXT_texture_lod_bias;
extern GLboolean __GLEW_EXT_texture_mirror_clamp;
extern GLboolean __GLEW_EXT_texture_object;
extern GLboolean __GLEW_EXT_texture_perturb_normal;
extern GLboolean __GLEW_EXT_texture_rectangle;
extern GLboolean __GLEW_EXT_texture_sRGB;
extern GLboolean __GLEW_EXT_texture_sRGB_decode;
extern GLboolean __GLEW_EXT_texture_shared_exponent;
extern GLboolean __GLEW_EXT_texture_snorm;
extern GLboolean __GLEW_EXT_texture_swizzle;
extern GLboolean __GLEW_EXT_timer_query;
extern GLboolean __GLEW_EXT_transform_feedback;
extern GLboolean __GLEW_EXT_vertex_array;
extern GLboolean __GLEW_EXT_vertex_array_bgra;
extern GLboolean __GLEW_EXT_vertex_attrib_64bit;
extern GLboolean __GLEW_EXT_vertex_shader;
extern GLboolean __GLEW_EXT_vertex_weighting;
extern GLboolean __GLEW_EXT_x11_sync_object;
extern GLboolean __GLEW_GREMEDY_frame_terminator;
extern GLboolean __GLEW_GREMEDY_string_marker;
extern GLboolean __GLEW_HP_convolution_border_modes;
extern GLboolean __GLEW_HP_image_transform;
extern GLboolean __GLEW_HP_occlusion_test;
extern GLboolean __GLEW_HP_texture_lighting;
extern GLboolean __GLEW_IBM_cull_vertex;
extern GLboolean __GLEW_IBM_multimode_draw_arrays;
extern GLboolean __GLEW_IBM_rasterpos_clip;
extern GLboolean __GLEW_IBM_static_data;
extern GLboolean __GLEW_IBM_texture_mirrored_repeat;
extern GLboolean __GLEW_IBM_vertex_array_lists;
extern GLboolean __GLEW_INGR_color_clamp;
extern GLboolean __GLEW_INGR_interlace_read;
extern GLboolean __GLEW_INTEL_fragment_shader_ordering;
extern GLboolean __GLEW_INTEL_map_texture;
extern GLboolean __GLEW_INTEL_parallel_arrays;
extern GLboolean __GLEW_INTEL_performance_query;
extern GLboolean __GLEW_INTEL_texture_scissor;
extern GLboolean __GLEW_KHR_blend_equation_advanced;
extern GLboolean __GLEW_KHR_blend_equation_advanced_coherent;
extern GLboolean __GLEW_KHR_context_flush_control;
extern GLboolean __GLEW_KHR_debug;
extern GLboolean __GLEW_KHR_robust_buffer_access_behavior;
extern GLboolean __GLEW_KHR_robustness;
extern GLboolean __GLEW_KHR_texture_compression_astc_hdr;
extern GLboolean __GLEW_KHR_texture_compression_astc_ldr;
extern GLboolean __GLEW_KTX_buffer_region;
extern GLboolean __GLEW_MESAX_texture_stack;
extern GLboolean __GLEW_MESA_pack_invert;
extern GLboolean __GLEW_MESA_resize_buffers;
extern GLboolean __GLEW_MESA_window_pos;
extern GLboolean __GLEW_MESA_ycbcr_texture;
extern GLboolean __GLEW_NVX_conditional_render;
extern GLboolean __GLEW_NVX_gpu_memory_info;
extern GLboolean __GLEW_NV_bindless_multi_draw_indirect;
extern GLboolean __GLEW_NV_bindless_multi_draw_indirect_count;
extern GLboolean __GLEW_NV_bindless_texture;
extern GLboolean __GLEW_NV_blend_equation_advanced;
extern GLboolean __GLEW_NV_blend_equation_advanced_coherent;
extern GLboolean __GLEW_NV_blend_square;
extern GLboolean __GLEW_NV_compute_program5;
extern GLboolean __GLEW_NV_conditional_render;
extern GLboolean __GLEW_NV_conservative_raster;
extern GLboolean __GLEW_NV_copy_depth_to_color;
extern GLboolean __GLEW_NV_copy_image;
extern GLboolean __GLEW_NV_deep_texture3D;
extern GLboolean __GLEW_NV_depth_buffer_float;
extern GLboolean __GLEW_NV_depth_clamp;
extern GLboolean __GLEW_NV_depth_range_unclamped;
extern GLboolean __GLEW_NV_draw_texture;
extern GLboolean __GLEW_NV_evaluators;
extern GLboolean __GLEW_NV_explicit_multisample;
extern GLboolean __GLEW_NV_fence;
extern GLboolean __GLEW_NV_fill_rectangle;
extern GLboolean __GLEW_NV_float_buffer;
extern GLboolean __GLEW_NV_fog_distance;
extern GLboolean __GLEW_NV_fragment_coverage_to_color;
extern GLboolean __GLEW_NV_fragment_program;
extern GLboolean __GLEW_NV_fragment_program2;
extern GLboolean __GLEW_NV_fragment_program4;
extern GLboolean __GLEW_NV_fragment_program_option;
extern GLboolean __GLEW_NV_fragment_shader_interlock;
extern GLboolean __GLEW_NV_framebuffer_mixed_samples;
extern GLboolean __GLEW_NV_framebuffer_multisample_coverage;
extern GLboolean __GLEW_NV_geometry_program4;
extern GLboolean __GLEW_NV_geometry_shader4;
extern GLboolean __GLEW_NV_geometry_shader_passthrough;
extern GLboolean __GLEW_NV_gpu_program4;
extern GLboolean __GLEW_NV_gpu_program5;
extern GLboolean __GLEW_NV_gpu_program5_mem_extended;
extern GLboolean __GLEW_NV_gpu_program_fp64;
extern GLboolean __GLEW_NV_gpu_shader5;
extern GLboolean __GLEW_NV_half_float;
extern GLboolean __GLEW_NV_internalformat_sample_query;
extern GLboolean __GLEW_NV_light_max_exponent;
extern GLboolean __GLEW_NV_multisample_coverage;
extern GLboolean __GLEW_NV_multisample_filter_hint;
extern GLboolean __GLEW_NV_occlusion_query;
extern GLboolean __GLEW_NV_packed_depth_stencil;
extern GLboolean __GLEW_NV_parameter_buffer_object;
extern GLboolean __GLEW_NV_parameter_buffer_object2;
extern GLboolean __GLEW_NV_path_rendering;
extern GLboolean __GLEW_NV_path_rendering_shared_edge;
extern GLboolean __GLEW_NV_pixel_data_range;
extern GLboolean __GLEW_NV_point_sprite;
extern GLboolean __GLEW_NV_present_video;
extern GLboolean __GLEW_NV_primitive_restart;
extern GLboolean __GLEW_NV_register_combiners;
extern GLboolean __GLEW_NV_register_combiners2;
extern GLboolean __GLEW_NV_sample_locations;
extern GLboolean __GLEW_NV_sample_mask_override_coverage;
extern GLboolean __GLEW_NV_shader_atomic_counters;
extern GLboolean __GLEW_NV_shader_atomic_float;
extern GLboolean __GLEW_NV_shader_atomic_fp16_vector;
extern GLboolean __GLEW_NV_shader_atomic_int64;
extern GLboolean __GLEW_NV_shader_buffer_load;
extern GLboolean __GLEW_NV_shader_storage_buffer_object;
extern GLboolean __GLEW_NV_shader_thread_group;
extern GLboolean __GLEW_NV_shader_thread_shuffle;
extern GLboolean __GLEW_NV_tessellation_program5;
extern GLboolean __GLEW_NV_texgen_emboss;
extern GLboolean __GLEW_NV_texgen_reflection;
extern GLboolean __GLEW_NV_texture_barrier;
extern GLboolean __GLEW_NV_texture_compression_vtc;
extern GLboolean __GLEW_NV_texture_env_combine4;
extern GLboolean __GLEW_NV_texture_expand_normal;
extern GLboolean __GLEW_NV_texture_multisample;
extern GLboolean __GLEW_NV_texture_rectangle;
extern GLboolean __GLEW_NV_texture_shader;
extern GLboolean __GLEW_NV_texture_shader2;
extern GLboolean __GLEW_NV_texture_shader3;
extern GLboolean __GLEW_NV_transform_feedback;
extern GLboolean __GLEW_NV_transform_feedback2;
extern GLboolean __GLEW_NV_uniform_buffer_unified_memory;
extern GLboolean __GLEW_NV_vdpau_interop;
extern GLboolean __GLEW_NV_vertex_array_range;
extern GLboolean __GLEW_NV_vertex_array_range2;
extern GLboolean __GLEW_NV_vertex_attrib_integer_64bit;
extern GLboolean __GLEW_NV_vertex_buffer_unified_memory;
extern GLboolean __GLEW_NV_vertex_program;
extern GLboolean __GLEW_NV_vertex_program1_1;
extern GLboolean __GLEW_NV_vertex_program2;
extern GLboolean __GLEW_NV_vertex_program2_option;
extern GLboolean __GLEW_NV_vertex_program3;
extern GLboolean __GLEW_NV_vertex_program4;
extern GLboolean __GLEW_NV_video_capture;
extern GLboolean __GLEW_NV_viewport_array2;
extern GLboolean __GLEW_OES_byte_coordinates;
extern GLboolean __GLEW_OES_compressed_paletted_texture;
extern GLboolean __GLEW_OES_read_format;
extern GLboolean __GLEW_OES_single_precision;
extern GLboolean __GLEW_OML_interlace;
extern GLboolean __GLEW_OML_resample;
extern GLboolean __GLEW_OML_subsample;
extern GLboolean __GLEW_PGI_misc_hints;
extern GLboolean __GLEW_PGI_vertex_hints;
extern GLboolean __GLEW_REGAL_ES1_0_compatibility;
extern GLboolean __GLEW_REGAL_ES1_1_compatibility;
extern GLboolean __GLEW_REGAL_enable;
extern GLboolean __GLEW_REGAL_error_string;
extern GLboolean __GLEW_REGAL_extension_query;
extern GLboolean __GLEW_REGAL_log;
extern GLboolean __GLEW_REGAL_proc_address;
extern GLboolean __GLEW_REND_screen_coordinates;
extern GLboolean __GLEW_S3_s3tc;
extern GLboolean __GLEW_SGIS_color_range;
extern GLboolean __GLEW_SGIS_detail_texture;
extern GLboolean __GLEW_SGIS_fog_function;
extern GLboolean __GLEW_SGIS_generate_mipmap;
extern GLboolean __GLEW_SGIS_multisample;
extern GLboolean __GLEW_SGIS_pixel_texture;
extern GLboolean __GLEW_SGIS_point_line_texgen;
extern GLboolean __GLEW_SGIS_sharpen_texture;
extern GLboolean __GLEW_SGIS_texture4D;
extern GLboolean __GLEW_SGIS_texture_border_clamp;
extern GLboolean __GLEW_SGIS_texture_edge_clamp;
extern GLboolean __GLEW_SGIS_texture_filter4;
extern GLboolean __GLEW_SGIS_texture_lod;
extern GLboolean __GLEW_SGIS_texture_select;
extern GLboolean __GLEW_SGIX_async;
extern GLboolean __GLEW_SGIX_async_histogram;
extern GLboolean __GLEW_SGIX_async_pixel;
extern GLboolean __GLEW_SGIX_blend_alpha_minmax;
extern GLboolean __GLEW_SGIX_clipmap;
extern GLboolean __GLEW_SGIX_convolution_accuracy;
extern GLboolean __GLEW_SGIX_depth_texture;
extern GLboolean __GLEW_SGIX_flush_raster;
extern GLboolean __GLEW_SGIX_fog_offset;
extern GLboolean __GLEW_SGIX_fog_texture;
extern GLboolean __GLEW_SGIX_fragment_specular_lighting;
extern GLboolean __GLEW_SGIX_framezoom;
extern GLboolean __GLEW_SGIX_interlace;
extern GLboolean __GLEW_SGIX_ir_instrument1;
extern GLboolean __GLEW_SGIX_list_priority;
extern GLboolean __GLEW_SGIX_pixel_texture;
extern GLboolean __GLEW_SGIX_pixel_texture_bits;
extern GLboolean __GLEW_SGIX_reference_plane;
extern GLboolean __GLEW_SGIX_resample;
extern GLboolean __GLEW_SGIX_shadow;
extern GLboolean __GLEW_SGIX_shadow_ambient;
extern GLboolean __GLEW_SGIX_sprite;
extern GLboolean __GLEW_SGIX_tag_sample_buffer;
extern GLboolean __GLEW_SGIX_texture_add_env;
extern GLboolean __GLEW_SGIX_texture_coordinate_clamp;
extern GLboolean __GLEW_SGIX_texture_lod_bias;
extern GLboolean __GLEW_SGIX_texture_multi_buffer;
extern GLboolean __GLEW_SGIX_texture_range;
extern GLboolean __GLEW_SGIX_texture_scale_bias;
extern GLboolean __GLEW_SGIX_vertex_preclip;
extern GLboolean __GLEW_SGIX_vertex_preclip_hint;
extern GLboolean __GLEW_SGIX_ycrcb;
extern GLboolean __GLEW_SGI_color_matrix;
extern GLboolean __GLEW_SGI_color_table;
extern GLboolean __GLEW_SGI_texture_color_table;
extern GLboolean __GLEW_SUNX_constant_data;
extern GLboolean __GLEW_SUN_convolution_border_modes;
extern GLboolean __GLEW_SUN_global_alpha;
extern GLboolean __GLEW_SUN_mesh_array;
extern GLboolean __GLEW_SUN_read_video_pixels;
extern GLboolean __GLEW_SUN_slice_accum;
extern GLboolean __GLEW_SUN_triangle_list;
extern GLboolean __GLEW_SUN_vertex;
extern GLboolean __GLEW_WIN_phong_shading;
extern GLboolean __GLEW_WIN_specular_fog;
extern GLboolean __GLEW_WIN_swap_hint;
]]

return ffi.load('glewgl')
